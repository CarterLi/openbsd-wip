$OpenBSD$
--- cmake/Configure.cmake.ports.orig	Tue Jan 26 23:59:13 2010
+++ cmake/Configure.cmake	Thu Oct 20 18:11:06 2011
@@ -68,8 +68,11 @@ SET(GGL_EPOCH "-1.0")
 # defined in configure.ac, eg.:
 # LIBGGADGET_CURRENT, LIBGGADGET_REVISION and LIBGGADGET_AGE
 # It's just a temporary value, because the API is not stable yet.
-SET(GGL_LIB_VERSION "0.0.0")
-SET(GGL_LIB_SOVERSION "0")
+# Do not set this value when package system controls library versions on itself
+IF(NOT DEFINED ENV{LIBggadget${GGL_EPOCH}_VERSION})
+  SET(GGL_LIB_VERSION "0.0.0")
+  SET(GGL_LIB_SOVERSION "0")
+ENDIF(NOT DEFINED ENV{LIBggadget${GGL_EPOCH}_VERSION})
 
 # This string is used in auto update request. It should be updated to the
 # time of a release build is made. Its format is yymmdd-HHMMSS.
@@ -138,7 +141,7 @@ SET(sysconfdir "${prefix}/etc")
 
 SET(GGL_MODULE_DIR "${LIB_INSTALL_DIR}/${PRODUCT_NAME}/modules")
 SET(GGL_RESOURCE_DIR "${CMAKE_INSTALL_PREFIX}/share/${PRODUCT_NAME}")
-SET(GGL_LIBEXEC_DIR "${LIB_INSTALL_DIR}/${PRODUCT_NAME}")
+SET(GGL_LIBEXEC_DIR "${EXEC_INSTALL_PREFIX}/libexec/${PRODUCT_NAME}")
 SET(GGL_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/${PRODUCT_NAME}")
 SET(GGL_SYSDEPS_INCLUDE_DIR "${LIB_INSTALL_DIR}/${PRODUCT_NAME}/include")
 
@@ -169,7 +172,7 @@ ENDIF(GGL_DEFAULT_SSL_CA_FILE)
 
 INCLUDE(CheckCCompilerFlag)
 IF(UNIX)
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Werror -Wconversion -Wextra")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wconversion -Wextra")
   # No "-Wall -Werror" for C flags, to avoid third_party code break.
   SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
   SET(PROJECT_RESOURCE_DIR share/${PRODUCT_NAME})
@@ -244,11 +247,26 @@ ENDIF(HAVE_MMAP)
 
 # Check necessary libraries.
 
+# Some systems have libdl, some has not.
+# Assume systems lacking of it does not need it either.
+# Use separate variable for caching search results.
+MESSAGE("-- Checking for libdl")
+FIND_LIBRARY(DL_FOUND dl)
+IF(${DL_FOUND})
+  SET(DL_LIBRARY ${DL_FOUND})
+  MESSAGE("-- Found libdl: ${DL_LIBRARY}")
+ELSE(${DL_FOUND})
+  SET(DL_LIBRARY "")
+  MESSAGE("-- libdl was not found, assume we do not need it either")
+ENDIF(${DL_FOUND})
+
 # Check if libltdl-dev is installed
-FIND_FILE(LTDL ltdl.h)
-IF(NOT LTDL)
+FIND_PATH(LTDL_INCLUDE_DIR ltdl.h)
+FIND_LIBRARY(LTDL_LIBRARY ltdl)
+IF(NOT LTDL_INCLUDE_DIR OR NOT LTDL_LIBRARY)
   MESSAGE(FATAL_ERROR "libltdl development package is needed to build ggl")
-ENDIF(NOT LTDL)
+ENDIF(NOT LTDL_INCLUDE_DIR OR NOT LTDL_LIBRARY)
+INCLUDE_DIRECTORIES(${LTDL_INCLUDE_DIR})
 
 FIND_PACKAGE(ZLIB REQUIRED)
 
@@ -291,12 +309,13 @@ IF(NOT LIBSOUP_FOUND)
   ENDIF(GGL_BUILD_SOUP_XML_HTTP_REQUEST)
 ELSE(NOT LIBSOUP_FOUND)
   GET_CONFIG(libsoup-gnome-2.4 2.26.0 LIBSOUP_GNOME LIBSOUP_GNOME_FOUND)
+  SET(CMAKE_REQUIRED_FLAGS ${LIBSOUP_DEFINITIONS})
+  SET(CMAKE_REQUIRED_INCLUDES ${LIBSOUP_INCLUDE_DIR})
+  SET(CMAKE_REQUIRED_LIBRARIES ${LIBSOUP_LIBRARIES} ${LIBSOUP_LINKER_FLAGS})
+  CHECK_FUNCTION_EXISTS(soup_message_headers_get_one SOUP_MESSAGE_HEADERS_GET_ONE_FOUND)
   IF(LIBSOUP_GNOME_FOUND)
     LIST(APPEND LIBSOUP_DEFINITIONS "-DHAVE_LIBSOUP_GNOME")
   ENDIF(LIBSOUP_GNOME_FOUND)
-  SET(CMAKE_REQUIRED_INCLUDES ${LIBSOUP_INCLUDE_DIR})
-  SET(CMAKE_REQUIRED_LIBRARIES ${LIBSOUP_LIBRARIES})
-  CHECK_FUNCTION_EXISTS(soup_message_headers_get_one SOUP_MESSAGE_HEADERS_GET_ONE_FOUND)
   IF(SOUP_MESSAGE_HEADERS_GET_ONE_FOUND)
     LIST(APPEND LIBSOUP_DEFINITIONS "-DHAVE_SOUP_MESSAGE_HEADERS_GET_ONE")
   ENDIF(SOUP_MESSAGE_HEADERS_GET_ONE_FOUND)
@@ -307,7 +326,7 @@ GET_CONFIG(gstreamer-plugins-base-0.10 0.10.0 GSTREAME
 IF(GSTREAMER_FOUND AND GSTREAMER_PLUGINS_BASE_FOUND)
   FIND_LIBRARY(VIDEOSINK_LIBRARY NAMES gstvideo-0.10 PATH /usr/lib /usr/lib/gstreamer-0.10 /usr/local/lib /usr/local/lib/gstreamer-0.10)
   IF(VIDEOSINK_LIBRARY)
-    SET(GSTREAMER_VIDEO_LIBRARIES "${GSTREAMER_LIBRARIES}  -lgstvideo-0.10")
+    SET(GSTREAMER_VIDEO_LIBRARIES ${GSTREAMER_LIBRARIES} ${VIDEOSINK_LIBRARY})
   ELSE(VIDEOSINK_LIBRARY)
     MESSAGE("Libgstreamer-plugins-base-dev is not available, gst-video-element extension won't be built.")
     SET(GGL_BUILD_GST_VIDEO_ELEMENT 0)
@@ -389,10 +408,11 @@ IF(NOT DBUS_FOUND AND GGL_BUILD_LIBGGADGET_DBUS)
   SET(GGL_BUILD_LIBGGADGET_DBUS 0)
   MESSAGE("Library D-Bus is not available, libggadget-dbus won't be built.")
 ELSE(NOT DBUS_FOUND AND GGL_BUILD_LIBGGADGET_DBUS)
-  LIST(APPEND DBUS_DEFINITIONS "-DHAVE_DBUS_LIBRARY")
+  SET(CMAKE_REQUIRED_FLAGS ${DBUS_DEFINITIONS})
   SET(CMAKE_REQUIRED_INCLUDES ${DBUS_INCLUDE_DIR})
-  SET(CMAKE_REQUIRED_LIBRARIES ${DBUS_LIBRARIES})
+  SET(CMAKE_REQUIRED_LIBRARIES ${DBUS_LIBRARIES} ${DBUS_LINKER_FLAGS})
   CHECK_FUNCTION_EXISTS(dbus_watch_get_unix_fd DBUS_UNIX_FD_FUNC_FOUND)
+  LIST(APPEND DBUS_DEFINITIONS "-DHAVE_DBUS_LIBRARY")
   IF(DBUS_UNIX_FD_FUNC_FOUND)
     LIST(APPEND DBUS_DEFINITIONS "-DHAVE_DBUS_WATCH_GET_UNIX_FD")
   ENDIF(DBUS_UNIX_FD_FUNC_FOUND)
@@ -488,8 +508,7 @@ IF(SMJS_FOUND)
   ENDIF("${RESULT}" STREQUAL "/stable")
 
   SET(CMAKE_REQUIRED_INCLUDES ${SMJS_INCLUDE_DIR})
-  SET(CMAKE_REQUIRED_LIBRARIES ${SMJS_LIBRARIES})
-  SET(CMAKE_REQUIRED_LINK_DIR ${SMJS_LINK_DIR})
+  SET(CMAKE_REQUIRED_LIBRARIES ${SMJS_LIBRARIES} ${SMJS_LINKER_FLAGS})
   SET(CMAKE_REQUIRED_DEFINITIONS ${SMJS_DEFINITIONS})
   CHECK_INCLUDE_FILE(jsversion.h JSVERSION_H_FOUND)
   IF(JSVERSION_H_FOUND)
