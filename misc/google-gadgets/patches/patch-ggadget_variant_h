$OpenBSD$
Unfuckup type definitions. Checked on i386 and amd64.
--- ggadget/variant.h.ports.orig	Mon Dec 28 13:39:57 2009
+++ ggadget/variant.h	Mon Oct 24 14:47:18 2011
@@ -137,24 +137,23 @@ class Variant {
   }
 
   /**
-   * Construct a @c Variant with a @c int32_t value.
+   * Construct a @c Variant with a @c int value.
    * Also supports <code>[unsigned]</code> char and <code>[unsigned]
    * short</code>.
    * The type of the constructed @c Variant is @c TYPE_INT64.
    */
-  explicit Variant(int32_t value) : type_(TYPE_INT64) {
+  explicit Variant(int value) : type_(TYPE_INT64) {
     v_.int64_value_ = value;
   }
 
   /**
-   * Construct a @c Variant with a @c uint32_t value.
+   * Construct a @c Variant with a @c unsigned int value.
    * The type of the constructed @c Variant is @c TYPE_INT64.
    */
-  explicit Variant(uint32_t value) : type_(TYPE_INT64) {
+  explicit Variant(unsigned int value) : type_(TYPE_INT64) {
     v_.int64_value_ = static_cast<int64_t>(value);
   }
 
-#if GGL_SIZEOF_LONG_INT != 8
   /**
    * Construct a @c Variant with a @c long value.
    * The type of the constructed @c Variant is @c TYPE_INT64.
@@ -170,21 +169,20 @@ class Variant {
   explicit Variant(unsigned long value) : type_(TYPE_INT64) {
     v_.int64_value_ = static_cast<int64_t>(value);
   }
-#endif
 
   /**
-   * Construct a @c Variant with a @c int64_t value.
+   * Construct a @c Variant with a @c long long value.
    * The type of the constructed @c Variant is @c TYPE_INT64.
    */
-  explicit Variant(int64_t value) : type_(TYPE_INT64) {
+  explicit Variant(long long value) : type_(TYPE_INT64) {
     v_.int64_value_ = value;
   }
 
   /**
-   * Construct a @c Variant with a @c uint64_t value.
+   * Construct a @c Variant with a @c unsigned long long value.
    * The type of the constructed @c Variant is @c TYPE_INT64.
    */
-  explicit Variant(uint64_t value) : type_(TYPE_INT64) {
+  explicit Variant(unsigned long long value) : type_(TYPE_INT64) {
     v_.int64_value_ = static_cast<int64_t>(value);
   }
 
