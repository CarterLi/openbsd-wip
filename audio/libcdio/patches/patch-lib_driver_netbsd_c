$OpenBSD$

Fix and simplify device enumeration.

cdio_error() (which exits) should have been cdio_warn():
http://lists.gnu.org/archive/html/libcdio-devel/2018-05/msg00013.html

Implement missing functions, based on the OpenBSD backend previously in-tree.

Index: lib/driver/netbsd.c
--- lib/driver/netbsd.c.orig
+++ lib/driver/netbsd.c
@@ -61,6 +61,8 @@
 #define DEFAULT_CDIO_DEVICE "/dev/rcd0c"
 #endif
 
+#define MAX_CD_DEVICES 64
+
 #ifdef HAVE_STRING_H
 #include <string.h>
 #endif
@@ -235,7 +237,7 @@ set_arg_netbsd(void *user_data, const char key[], cons
                 _obj->gen.source_name = strdup(value);
         } else if (!strcmp(key, "access-mode")) {
                 if (strcmp(value, "READ_CD"))
-                        cdio_error("unknown access type: %s ignored.", value);
+                        cdio_warn("unknown access type: %s ignored.", value);
         } else
                 return -1;
 
@@ -250,7 +252,7 @@ _cdio_read_toc(_img_private_t *_obj)
 
         res = ioctl(_obj->gen.fd, CDIOREADTOCHEADER, &_obj->tochdr);
         if (res < 0) {
-                cdio_error("error in ioctl(CDIOREADTOCHEADER): %s\n",
+                cdio_warn("error in ioctl(CDIOREADTOCHEADER): %s\n",
                            strerror(errno));
                 return false;
         }
@@ -263,7 +265,7 @@ _cdio_read_toc(_img_private_t *_obj)
 
         res = ioctl(_obj->gen.fd, CDIOREADTOCENTRIES, &req);
         if (res < 0) {
-                cdio_error("error in ioctl(CDROMREADTOCENTRIES): %s\n",
+                cdio_warn("error in ioctl(CDROMREADTOCENTRIES): %s\n",
                            strerror(errno));
                 return false;
         }
@@ -352,13 +354,13 @@ eject_media_netbsd(void *user_data) {
 
         res = ioctl(fd, CDIOCALLOW);
         if (res < 0) {
-                cdio_error("ioctl(fd, CDIOCALLOW) failed: %s\n",
+                cdio_warn("ioctl(fd, CDIOCALLOW) failed: %s\n",
                            strerror(errno));
                 /* go on... */
         }
         res = ioctl(fd, CDIOCEJECT);
         if (res < 0) {
-                cdio_error("ioctl(CDIOCEJECT) failed: %s\n",
+                cdio_warn("ioctl(CDIOCEJECT) failed: %s\n",
                            strerror(errno));
                 ret = 1;
         }
@@ -430,6 +432,41 @@ get_track_isrc_netbsd (const void *p_user_data, track_
   return mmc_get_track_isrc( p_env->gen.cdio, i_track );
 }
 
+static driver_return_code_t
+audio_get_volume_netbsd(void *p_user_data, cdio_audio_volume_t *p_volume)
+{
+  const _img_private_t *p_env = p_user_data;
+  return (ioctl(p_env->gen.fd, CDIOCGETVOL, p_volume));
+}
+
+static driver_return_code_t
+audio_pause_netbsd(void *p_user_data)
+{
+  const _img_private_t *p_env = p_user_data;
+  return (ioctl(p_env->gen.fd, CDIOCPAUSE));
+}
+
+static driver_return_code_t
+audio_stop_netbsd(void *p_user_data)
+{
+  const _img_private_t *p_env = p_user_data;
+  return (ioctl(p_env->gen.fd, CDIOCSTOP));
+}
+
+static driver_return_code_t
+audio_resume_netbsd(void *p_user_data)
+{
+  const _img_private_t *p_env = p_user_data;
+  return (ioctl(p_env->gen.fd, CDIOCRESUME));
+}
+
+static driver_return_code_t
+audio_set_volume_netbsd(void *p_user_data, cdio_audio_volume_t *p_volume)
+{
+  const _img_private_t *p_env = p_user_data;
+  return (ioctl(p_env->gen.fd, CDIOCSETVOL, p_volume));
+}
+
 /*!
   Get format of track.
 */
@@ -535,6 +572,23 @@ get_disc_last_lsn_netbsd(void *user_data)
 
         return (((msf.m * 60) + msf.s) * CDIO_CD_FRAMES_PER_SEC + msf.f);
 }
+
+
+static driver_return_code_t
+get_last_session_netbsd(void *p_user_data, lsn_t *i_last_session)
+{
+  const _img_private_t *p_env = p_user_data;
+  int addr;
+
+  if (ioctl(p_env->gen.fd, CDIOREADMSADDR, &addr) == 0) {
+    *i_last_session = addr;
+    return (DRIVER_OP_SUCCESS);
+  } else {
+    cdio_info("ioctl CDIOREADMSADDR failed: %s\n",
+        strerror(errno));
+    return (DRIVER_OP_ERROR);
+  }
+}
 #endif /* HAVE_NETBSD_CDROM */
 
 char **
@@ -544,52 +598,115 @@ cdio_get_devices_netbsd (void)
   return NULL;
 #else
   char drive[40];
-  char **drives = NULL;
-  unsigned int num_drives=0;
-  int mib[2];
-  size_t len;
-  char *p, *pp, *data;
+  char **drives = NULL, *p;
+  unsigned int num_drives = 0;
+  int cdfd;
+  int n;
 
-  mib[0] = CTL_HW;
-  mib[1] = HW_DISKNAMES;
+  /* On NetBSD CD devices may be under c or d paritions, whereas on OpenBSD
+   * they are only ever under c */
+#ifdef __OpenBSD__
+  char *partitions = "c";
+#else
+  char *partitions = "cd";
+#endif
 
-  /* Determine how much space to allocate. */
-  if (sysctl(mib, 2, NULL, &len, NULL, 0) == -1)
-     return NULL;
-
-  if ((data = (char *)malloc(len)) == NULL)
-     return NULL;
-
-  if (sysctl(mib, 2, data, &len, NULL, 0) == -1) {
-     free(data);
-     return NULL;
+  /* Iterate raw CD device "units" (e.g. rcd0, rcd1, ...) */
+  for (n = 0; n <= MAX_CD_DEVICES; n++) {
+    /* Iterate partitions */
+    for (p = partitions; *p != '\0'; p++) {
+      snprintf(drive, sizeof(drive), "/dev/rcd%d%c", n, *p);
+      if (!cdio_is_device_quiet_generic(drive))
+        continue;
+      if ((cdfd = open(drive, O_RDONLY|O_NONBLOCK, 0)) == -1)
+        continue;
+      close(cdfd);
+      cdio_add_device_list(&drives, drive, &num_drives);
+    }
   }
-  if (sizeof DEFAULT_CDIO_DEVICE > sizeof drive) {
-     free(data);
-     return NULL;
-  }
-  strcpy(drive,DEFAULT_CDIO_DEVICE);
-  p = data;
-  while ((pp = strchr(p, ' ')) != NULL) {
-     *pp = '\0';
-     if (p[0] == 'c' && p[1] == 'd' && p[2] >= '0' && p[2] <= '9' &&
-         p[3] == '\0') {
-        drive[sizeof DEFAULT_CDIO_DEVICE - 3] = p[2];
-        cdio_add_device_list(&drives, drive, &num_drives);
-     }
-     p = ++pp;
-  }
-  if (p[0] == 'c' && p[1] == 'd' && p[2] >= '0' && p[2] <= '9' &&
-      p[3] == '\0') {
-     drive[sizeof DEFAULT_CDIO_DEVICE - 3] = p[2];
-     cdio_add_device_list(&drives, drive, &num_drives);
-  }
   cdio_add_device_list(&drives, NULL, &num_drives);
-  free(data);
-  return drives;
+  return (drives);
 #endif /* HAVE_NETBSD_CDROM */
 }
 
+static driver_return_code_t
+audio_play_msf_netbsd(void *p_user_data, msf_t *p_start_msf, msf_t *p_end_msf)
+{
+  const _img_private_t *p_env = p_user_data;
+  struct ioc_play_msf a;
+
+  a.start_m = cdio_from_bcd8(p_start_msf->m);
+  a.start_s = cdio_from_bcd8(p_start_msf->s);
+  a.start_f = cdio_from_bcd8(p_start_msf->f);
+  a.end_m = cdio_from_bcd8(p_end_msf->m);
+  a.end_s = cdio_from_bcd8(p_end_msf->s);
+  a.end_f = cdio_from_bcd8(p_end_msf->f);
+
+  return (ioctl(p_env->gen.fd, CDIOCPLAYMSF, (char *)&a));
+}
+
+#if !USE_MMC_SUBCHANNEL
+static driver_return_code_t
+audio_read_subchannel_netbsd(void *p_user_data, cdio_subchannel_t *subchannel)
+{
+  const _img_private_t *p_env = p_user_data;
+  struct ioc_read_subchannel s;
+  struct cd_sub_channel_info data;
+
+  bzero(&s, sizeof(s));
+  s.data = &data;
+  s.data_len = sizeof(data);
+  s.address_format = CD_MSF_FORMAT;
+  s.data_format = CD_CURRENT_POSITION;
+
+  if (ioctl(p_env->gen.fd, CDIOCREADSUBCHANNEL, &s) != -1) {
+    subchannel->control = s.data->what.position.control;
+    subchannel->track = s.data->what.position.track_number;
+    subchannel->index = s.data->what.position.index_number;
+
+    subchannel->abs_addr.m =
+        cdio_to_bcd8(s.data->what.position.absaddr.msf.minute);
+    subchannel->abs_addr.s =
+        cdio_to_bcd8(s.data->what.position.absaddr.msf.second);
+    subchannel->abs_addr.f =
+        cdio_to_bcd8(s.data->what.position.absaddr.msf.frame);
+    subchannel->rel_addr.m =
+        cdio_to_bcd8(s.data->what.position.reladdr.msf.minute);
+    subchannel->rel_addr.s =
+        cdio_to_bcd8(s.data->what.position.reladdr.msf.second);
+    subchannel->rel_addr.f =
+        cdio_to_bcd8(s.data->what.position.reladdr.msf.frame);
+    subchannel->audio_status = s.data->header.audio_status;
+
+    return (DRIVER_OP_SUCCESS);
+  } else {
+    cdio_info("ioctl CDIOCREADSUBCHANNEL failed: %s\n",
+        strerror(errno));
+    return (DRIVER_OP_ERROR);
+  }
+}
+#endif
+
+static lba_t
+get_track_lba_netbsd(void *p_user_data, track_t i_track)
+{
+  _img_private_t *p_env = p_user_data;
+
+  if (!p_env->gen.toc_init)
+    read_toc_netbsd(p_env);
+
+  if (i_track == CDIO_CDROM_LEADOUT_TRACK)
+    i_track = p_env->gen.i_first_track + p_env->gen.i_tracks;
+
+  if (!p_env->gen.toc_init ||
+      i_track > (p_env->gen.i_first_track + p_env->gen.i_tracks) ||
+      i_track < p_env->gen.i_first_track)
+    return (CDIO_INVALID_LBA);
+
+  return (p_env->tocent[i_track - p_env->gen.i_first_track].addr.lba +
+      CDIO_PREGAP_SECTORS);
+}
+
 /*!
   Return a string containing the default CD device.
  */
@@ -617,7 +734,18 @@ close_tray_netbsd (const char *psz_device)
 
 #ifdef HAVE_NETBSD_CDROM
 static cdio_funcs_t _funcs = {
+  .audio_get_volume      = audio_get_volume_netbsd,
+  .audio_pause           = audio_pause_netbsd,
+  .audio_play_msf        = audio_play_msf_netbsd,
+  .audio_play_track_index= NULL,
+#if USE_MMC_SUBCHANNEL
   .audio_read_subchannel = audio_read_subchannel_mmc,
+#else
+  .audio_read_subchannel = audio_read_subchannel_netbsd,
+#endif
+  .audio_stop            = audio_stop_netbsd,
+  .audio_resume          = audio_resume_netbsd,
+  .audio_set_volume      = audio_set_volume_netbsd,
   .eject_media           = eject_media_netbsd,
   .free                  = cdio_generic_free,
   .get_arg               = get_arg_netbsd,
@@ -627,6 +755,8 @@ static cdio_funcs_t _funcs = {
   .get_default_device    = cdio_get_default_device_netbsd,
   .get_devices           = cdio_get_devices_netbsd,
   .get_disc_last_lsn     = get_disc_last_lsn_netbsd,
+  .get_last_session      = get_last_session_netbsd,
+  .get_media_changed     = get_media_changed_mmc,
   .get_discmode          = get_discmode_generic,
   .get_drive_cap         = get_drive_cap_mmc,
   .get_first_track_num   = get_first_track_num_netbsd,
@@ -637,7 +767,7 @@ static cdio_funcs_t _funcs = {
   .get_track_copy_permit = get_track_copy_permit_generic,
   .get_track_format      = get_track_format_netbsd,
   .get_track_green       = get_track_green_netbsd,
-  .get_track_lba         = NULL, /* This could be implemented if need be. */
+  .get_track_lba         = get_track_lba_netbsd,
   .get_track_preemphasis = get_track_preemphasis_generic,
   .get_track_msf         = get_track_msf_netbsd,
   .get_track_isrc        = get_track_isrc_netbsd,
@@ -648,9 +778,7 @@ static cdio_funcs_t _funcs = {
   .read_mode2_sector     = read_mode2_sector_netbsd,
   .read_mode2_sectors    = read_mode2_sectors_netbsd,
   .read_toc              = read_toc_netbsd,
-#if 1
   .run_mmc_cmd           = run_scsi_cmd_netbsd,
-#endif
   .set_arg               = set_arg_netbsd,
 };
 #endif /*HAVE_NETBSD_CDROM*/
