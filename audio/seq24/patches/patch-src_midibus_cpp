$OpenBSD$
--- src/midibus.cpp.orig	Fri Sep 21 13:55:00 2012
+++ src/midibus.cpp	Fri Sep 21 14:08:09 2012
@@ -25,7 +25,9 @@
 midibus::midibus( int a_localclient,
 		  int a_destclient, 
 		  int a_destport, 
+#if defined(__LINUX__)
 		  snd_seq_t *a_seq, 
+#endif
 		  const char *a_client_name, 
 		  const char *a_port_name,
 		  char a_id, int a_queue )
@@ -34,7 +36,9 @@ midibus::midibus( int a_localclient,
     m_local_addr_client = a_localclient;
     m_dest_addr_client = a_destclient;
     m_dest_addr_port   = a_destport;
+#if defined(__LINUX__)
     m_seq            = a_seq;
+#endif
     m_queue          = a_queue;
 
     m_id = a_id;
@@ -64,12 +68,16 @@ midibus::midibus( int a_localclient,
 }
 
 midibus::midibus( int a_localclient,
+#if defined(__LINUX__)
 		  snd_seq_t *a_seq, 
+#endif
 		  char a_id, int a_queue )
 {
     /* set members */
     m_local_addr_client = a_localclient;
+#if defined(__LINUX__)
     m_seq            = a_seq;
+#endif
     m_queue          = a_queue;
 
     m_id = a_id;
@@ -107,6 +115,7 @@ midibus::unlock( )
 
 bool midibus::init_out( )
 {
+#if defined(__LINUX__)
     /* temp return */
     int ret;
 
@@ -133,13 +142,14 @@ bool midibus::init_out( )
         printf( "snd_seq_connect_to(%d:%d) error\n", m_dest_addr_client, m_dest_addr_port);
         return false;
     }
-
+#endif
     return true;
 }
 
 
 bool midibus::init_out_sub( )
 {
+#if defined(__LINUX__)
     /* temp return */
     int ret;
 
@@ -157,6 +167,7 @@ bool midibus::init_out_sub( )
         return false;
     }
 
+#endif
     return true;
 }
 
@@ -164,7 +175,7 @@ bool midibus::init_out_sub( )
 
 bool midibus::init_in( )
 {
-
+#if defined(__LINUX__)
     /* temp return */
     int ret;
 
@@ -207,13 +218,14 @@ bool midibus::init_in( )
         printf( "snd_seq_connect_from(%d:%d) error\n", m_dest_addr_client, m_dest_addr_port);
         return false;
     }
-
+#endif
     return true;
 }
 
 
 bool midibus::init_in_sub( )
 {
+#if defined(__LINUX__)
     /* temp return */
     int ret;
 
@@ -230,7 +242,7 @@ bool midibus::init_in_sub( )
         printf( "snd_seq_create_simple_port(write) error\n");
         return false;
     }
-
+#endif
     return true;
 }
 
@@ -239,7 +251,7 @@ bool midibus::init_in_sub( )
 
 bool midibus::deinit_in( )
 {
-
+#if defined(__LINUX__)
     /* temp return */
     int ret;
     
@@ -268,7 +280,7 @@ bool midibus::deinit_in( )
         printf( "snd_seq_unsubscribe_port(%d:%d) error\n", m_dest_addr_client, m_dest_addr_port);
         return false;
     }
-
+#endif
     return true;
 }
 
@@ -303,6 +315,7 @@ midibus::~midibus()
 void 
 midibus::play( event *a_e24, unsigned char a_channel )
 {
+#if defined(__LINUX__)
     lock();
 
   
@@ -347,6 +360,7 @@ midibus::play( event *a_e24, unsigned char a_channel )
 	
 
     unlock();
+#endif
 }
 
 
@@ -364,6 +378,7 @@ min ( long a, long b ){
 void 
 midibus::sysex( event *a_e24 )
 {
+#if defined(__LINUX__)
     lock();
 
     snd_seq_event_t ev;
@@ -402,6 +417,7 @@ midibus::sysex( event *a_e24 )
     }
 
     unlock();
+#endif
 }
 
 
@@ -409,11 +425,13 @@ midibus::sysex( event *a_e24 )
 void 
 midibus::flush()
 {
+#if defined(__LINUX__)
     lock();
 
     snd_seq_drain_output( m_seq );
 
     unlock();
+#endif
 } 
 
 
@@ -466,6 +484,7 @@ midibus::continue_from( long a_tick )
 
     m_lasttick = starting_tick - 1;    
 
+#if defined(__LINUX__)
     if ( m_clock_type != e_clock_off )
     {
         //printf( "control value %ld\n",  beats);
@@ -497,6 +516,7 @@ midibus::continue_from( long a_tick )
         flush();
         snd_seq_event_output(m_seq, &ev);
     }
+#endif
 }
 
 
@@ -504,6 +524,7 @@ midibus::continue_from( long a_tick )
 void 
 midibus::start()
 {
+#if defined(__LINUX__)
     m_lasttick = -1;
     
     if ( m_clock_type != e_clock_off ){ 
@@ -526,6 +547,7 @@ midibus::start()
 	snd_seq_event_output(m_seq, &ev);
 
     }
+#endif
 }
 
 
@@ -574,7 +596,7 @@ midibus::get_input( )
 void 
 midibus::stop()
 {
-
+#if defined(__LINUX__)
     m_lasttick = -1;
 
     if ( m_clock_type != e_clock_off ){   
@@ -597,6 +619,7 @@ midibus::stop()
 	snd_seq_event_output(m_seq, &ev);
 	
     }
+#endif
 }
 
 
@@ -606,6 +629,7 @@ midibus::stop()
 void
 midibus::clock( long a_tick )
 {
+#if defined(__LINUX__)
 
     lock();
 
@@ -657,6 +681,7 @@ midibus::clock( long a_tick )
     }
 
     unlock();
+#endif
 }
 
 /* deletes events in queue */
@@ -705,6 +730,7 @@ mastermidibus::unlock( )
 void 
 mastermidibus::start()
 {
+#if defined(__LINUX__)
     lock();
          
     /* start timer */
@@ -714,6 +740,7 @@ mastermidibus::start()
 	m_buses_out[i]->start();
 
      unlock();
+#endif
 }
 
 
@@ -721,6 +748,7 @@ mastermidibus::start()
     void
 mastermidibus::continue_from( long a_tick)
 {
+#if defined(__LINUX__)
     lock();
 
     /* start timer */
@@ -730,6 +758,7 @@ mastermidibus::continue_from( long a_tick)
         m_buses_out[i]->continue_from( a_tick );
 
     unlock();
+#endif
 }
 
 void
@@ -746,6 +775,7 @@ mastermidibus::init_clock( long a_tick )
 void 
 mastermidibus::stop()
 {
+#if defined(__LINUX__)
     lock();
 
     for ( int i=0; i < m_num_out_buses; i++ )
@@ -758,6 +788,7 @@ mastermidibus::stop()
     /* start timer */
     snd_seq_stop_queue( m_alsa_seq, m_queue, NULL );
     unlock();
+#endif
 }
 
 
@@ -776,6 +807,7 @@ mastermidibus::clock( long a_tick )
 void 
 mastermidibus::set_ppqn( int a_ppqn )
 {
+#if defined(__LINUX__)
     lock();
 
     m_ppqn = a_ppqn;
@@ -794,12 +826,14 @@ mastermidibus::set_ppqn( int a_ppqn )
     snd_seq_set_queue_tempo( m_alsa_seq, m_queue, tempo );
 
     unlock();
+#endif
 }
 
 
 void 
 mastermidibus::set_bpm( int a_bpm )
 {
+#if defined(__LINUX__)
     lock();
 
     m_bpm = a_bpm;
@@ -817,17 +851,20 @@ mastermidibus::set_bpm( int a_bpm )
     snd_seq_set_queue_tempo(m_alsa_seq, m_queue, tempo );
 
     unlock();
+#endif
 }
 
 // flushes our local queue events out into ALSA
 void 
 mastermidibus::flush()
 {
+#if defined(__LINUX__)
     lock();
 
     snd_seq_drain_output( m_alsa_seq );
 
     unlock();
+#endif
 } 
 
 
@@ -852,6 +889,7 @@ mastermidibus::mastermidibus()
         m_init_input[i] = false;
     }
     
+#if defined(__LINUX__)
     /* open the sequencer client */
     ret = snd_seq_open(&m_alsa_seq, "default",  SND_SEQ_OPEN_DUPLEX, 0);
     
@@ -868,12 +906,13 @@ mastermidibus::mastermidibus()
 
 	/* notify lash of our client ID so it can restore connections */
 	lash_driver->set_alsa_client_id(snd_seq_client_id(m_alsa_seq));
+#endif
 }
 
 void
 mastermidibus::init( )
 {
-    
+#if defined(__LINUX__)
     /* client info */
     snd_seq_client_info_t *cinfo;
     /* port info */
@@ -1030,12 +1069,12 @@ mastermidibus::init( )
 
     for ( int i=0; i<m_num_in_buses; i++ )
         set_input(i,m_init_input[i]);
-
-    
+#endif
 }
       
 mastermidibus::~mastermidibus()
 {
+#if defined(__LINUX__)
     for ( int i=0; i<m_num_out_buses; i++ )
 	delete m_buses_out[i];
 
@@ -1049,7 +1088,7 @@ mastermidibus::~mastermidibus()
 
     /* close client */
     snd_seq_close( m_alsa_seq );
-
+#endif
 }
 
 
@@ -1228,7 +1267,7 @@ mastermidibus::poll_for_midi( )
 
 bool 
 mastermidibus::is_more_input( ){
-    
+#if defined(__LINUX__)
     lock();
 
     int size = snd_seq_event_input_pending(m_alsa_seq, 0);
@@ -1236,12 +1275,15 @@ mastermidibus::is_more_input( ){
     unlock();
 
     return ( size > 0 );
+#endif
+    return (0);
 }
 
 
 void 
 mastermidibus::port_start( int a_client, int a_port )
 {
+#if defined(__LINUX__)
     lock();
     
  
@@ -1363,6 +1405,7 @@ mastermidibus::port_start( int a_client, int a_port )
 			     POLLIN);
     
     unlock();
+#endif
 }
 
 void 
@@ -1395,6 +1438,7 @@ mastermidibus::port_exit( int a_client, int a_port )
 bool
 mastermidibus::get_midi_event( event *a_in )
 {
+#if defined(__LINUX__)
     lock();
     
     snd_seq_event_t *ev; 
@@ -1508,6 +1552,7 @@ mastermidibus::get_midi_event( event *a_in )
     
     unlock();
     
+#endif
     return true;
 }
 
