$OpenBSD$
--- sqlite3.c.orig	Mon Sep 19 19:47:01 2011
+++ sqlite3.c	Tue Sep 20 20:57:24 2011
@@ -301,11 +301,6 @@
 #pragma warn -spa /* Suspicious pointer arithmetic */
 #endif
 
-/* Needed for various definitions... */
-#ifndef _GNU_SOURCE
-# define _GNU_SOURCE
-#endif
-
 /*
 ** Include standard header files as necessary
 */
@@ -7713,33 +7708,26 @@ typedef INT8_TYPE i8;              /* 1-byte signed in
 */
 #define SQLITE_MAX_U32  ((((u64)1)<<32)-1)
 
-/*
-** Macros to determine whether the machine is big or little endian,
-** evaluated at runtime.
-*/
-#ifdef SQLITE_AMALGAMATION
-SQLITE_PRIVATE const int sqlite3one = 1;
+#include <sys/endian.h>
+#if _BYTE_ORDER == _BIG_ENDIAN
+#define SQLITE_BIGENDIAN	1
+#define SQLITE_LITTLEENDIAN	0
+#define SQLITE_UTF16NATIVE	SQLITE_UTF16BE
+#elif _BYTE_ORDER == _LITTLE_ENDIAN
+#define SQLITE_BIGENDIAN	0
+#define SQLITE_LITTLEENDIAN	1
+#define SQLITE_UTF16NATIVE	SQLITE_UTF16LE
 #else
-SQLITE_PRIVATE const int sqlite3one;
+#error "Help, I'm trapped in a PDP11"
 #endif
-#if defined(i386) || defined(__i386__) || defined(_M_IX86)\
-                             || defined(__x86_64) || defined(__x86_64__)
-# define SQLITE_BIGENDIAN    0
-# define SQLITE_LITTLEENDIAN 1
-# define SQLITE_UTF16NATIVE  SQLITE_UTF16LE
-#else
-# define SQLITE_BIGENDIAN    (*(char *)(&sqlite3one)==0)
-# define SQLITE_LITTLEENDIAN (*(char *)(&sqlite3one)==1)
-# define SQLITE_UTF16NATIVE (SQLITE_BIGENDIAN?SQLITE_UTF16BE:SQLITE_UTF16LE)
-#endif
 
 /*
 ** Constants for the largest and smallest possible 64-bit signed integers.
 ** These macros are designed to work correctly on both 32-bit and 64-bit
 ** compilers.
 */
-#define LARGEST_INT64  (0xffffffff|(((i64)0x7fffffff)<<32))
-#define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)
+#define LARGEST_INT64  INT64_MAX
+#define SMALLEST_INT64 INT64_MIN
 
 /* 
 ** Round up a number to the next larger multiple of 8.  This is used
@@ -131066,3 +131054,33 @@ SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(
 #endif /* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */
 
 /************** End of fts3_icu.c ********************************************/
+
+
+/* stubs for pthreads function, quick and dirty */
+#if SQLITE_THREADSAFE && !defined(SQLITE_TEST)
+
+#include <pthread.h>
+
+#define WEAKALIAS(f,g ) extern f __attribute__((__weak__, __alias__(#g)))
+
+static pthread_t _sqlite_self_stub()
+{
+	return 0;
+}
+
+static int _sqlite_zero_stub()
+{
+	return 0;
+}
+
+WEAKALIAS(pthread_t pthread_self(void), _sqlite_self_stub);
+WEAKALIAS(int pthread_mutex_init(pthread_mutex_t *a, const pthread_mutexattr_t *b), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutex_destroy(pthread_mutex_t *a), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutex_lock(pthread_mutex_t *a), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutex_trylock(pthread_mutex_t *a), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutex_unlock(pthread_mutex_t *a), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutexattr_init(pthread_mutexattr_t *a), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutexattr_settype(pthread_mutexattr_t *a, int b), _sqlite_zero_stub);
+WEAKALIAS(int pthread_mutexattr_destroy(pthread_mutexattr_t *a), _sqlite_zero_stub);
+
+#endif
