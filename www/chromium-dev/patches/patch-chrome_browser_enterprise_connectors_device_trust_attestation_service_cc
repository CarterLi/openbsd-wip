$OpenBSD$

Index: chrome/browser/enterprise/connectors/device_trust/attestation_service.cc
--- chrome/browser/enterprise/connectors/device_trust/attestation_service.cc.orig
+++ chrome/browser/enterprise/connectors/device_trust/attestation_service.cc
@@ -18,7 +18,7 @@
 namespace enterprise_connectors {
 
 AttestationService::AttestationService() {
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC) || defined(OS_BSD)
   key_pair_ = std::make_unique<enterprise_connectors::DeviceTrustKeyPair>();
   key_pair_->Init();
 #endif  // defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
@@ -71,7 +71,7 @@ std::string AttestationService::ProtobufChallengeToJso
   base::Base64Encode(challenge_response, &encoded);
   signed_data.SetKey("data", base::Value(encoded));
 
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC) || defined(OS_BSD)
   std::string signature;
   key_pair_->GetSignatureInBase64(challenge_response, &signature);
   signed_data.SetKey("signature", base::Value(signature));
@@ -85,7 +85,7 @@ std::string AttestationService::ProtobufChallengeToJso
   return json;
 }
 
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC) || defined(OS_BSD)
 std::string AttestationService::ExportPEMPublicKey() {
   return key_pair_->ExportPEMPublicKey();
 }
@@ -110,7 +110,7 @@ void AttestationService::SignEnterpriseChallengeTask(
 
   KeyInfo key_info;
   // Set the public key so VA can verify the client.
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC) || defined(OS_BSD)
   key_info.set_signed_public_key_and_challenge(ExportPEMPublicKey());
 #endif  // defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
 
@@ -135,7 +135,7 @@ void AttestationService::SignEnterpriseChallengeTask(
 bool AttestationService::SignChallengeData(const std::string& data,
                                            std::string* response) {
   std::string signature;
-#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_MAC) || defined(OS_BSD)
   if (!key_pair_->GetSignatureInBase64(data, &signature)) {
     LOG(ERROR) << __func__ << ": Failed to sign data.";
     return false;
