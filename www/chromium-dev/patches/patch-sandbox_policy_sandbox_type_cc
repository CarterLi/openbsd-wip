$OpenBSD$

Index: sandbox/policy/sandbox_type.cc
--- sandbox/policy/sandbox_type.cc.orig
+++ sandbox/policy/sandbox_type.cc
@@ -35,7 +35,7 @@ bool IsUnsandboxedSandboxType(SandboxType sandbox_type
 #endif
     case SandboxType::kAudio:
       return false;
-#if defined(OS_FUCHSIA)
+#if defined(OS_FUCHSIA) || defined(OS_BSD)
     case SandboxType::kVideoCapture:
       return false;
 #endif
@@ -121,7 +121,7 @@ void SetCommandLineFlagsForSandboxType(base::CommandLi
 #endif
     case SandboxType::kPrintCompositor:
     case SandboxType::kAudio:
-#if defined(OS_FUCHSIA)
+#if defined(OS_FUCHSIA) || defined(OS_BSD)
     case SandboxType::kVideoCapture:
 #endif
 #if defined(OS_WIN)
@@ -250,7 +250,7 @@ std::string StringFromUtilitySandboxType(SandboxType s
       return switches::kUtilitySandbox;
     case SandboxType::kAudio:
       return switches::kAudioSandbox;
-#if defined(OS_FUCHSIA)
+#if defined(OS_FUCHSIA) || defined(OS_BSD)
     case SandboxType::kVideoCapture:
       return switches::kVideoCaptureSandbox;
 #endif
@@ -356,7 +356,7 @@ SandboxType UtilitySandboxTypeFromString(const std::st
     return SandboxType::kAudio;
   if (sandbox_string == switches::kSpeechRecognitionSandbox)
     return SandboxType::kSpeechRecognition;
-#if defined(OS_FUCHSIA)
+#if defined(OS_FUCHSIA) || defined(OS_BSD)
   if (sandbox_string == switches::kVideoCaptureSandbox)
     return SandboxType::kVideoCapture;
 #endif
