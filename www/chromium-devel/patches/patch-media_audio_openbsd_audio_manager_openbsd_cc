$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Tue Jan 31 21:01:08 2012
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu Feb  2 14:02:29 2012
@@ -1,4 +1,4 @@
-// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
@@ -45,32 +45,27 @@ bool AudioManagerOpenBSD::HasAudioInputDevices() {
 
 AudioOutputStream* AudioManagerOpenBSD::MakeAudioOutputStream(
     const AudioParameters& params) {
-  // Early return for testing hook.  Do this before checking for
-  // |initialized_|.
-  if (params.format == AudioParameters::AUDIO_MOCK) {
+  // Early return for testing hook.
+  if (params.format == AudioParameters::AUDIO_MOCK)
     return FakeAudioOutputStream::MakeFakeStream(params);
-  }
 
-  if (!initialized()) {
-    return NULL;
-  }
-
   // Don't allow opening more than |kMaxOutputStreams| streams.
-  if (active_streams_.size() >= kMaxOutputStreams) {
+  if (active_output_stream_count_ >= kMaxOutputStreams)
     return NULL;
-  }
 
-  AudioOutputStream* stream;
+
+  AudioOutputStream* stream = NULL;
 #if defined(USE_PULSEAUDIO)
   if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kUsePulseAudio)) {
     stream = new PulseAudioOutputStream(params, this);
-    active_streams_.insert(stream);
+    ++active_output_stream_count_;
+    DCHECK(stream);
     return stream;
   }
-#endif
-
+#else
   NOTIMPLEMENTED();
-  return NULL;
+#endif
+  return stream;
 }
 
 AudioInputStream* AudioManagerOpenBSD::MakeAudioInputStream(
@@ -79,23 +74,12 @@ AudioInputStream* AudioManagerOpenBSD::MakeAudioInputS
   return NULL;
 }
 
-AudioManagerOpenBSD::AudioManagerOpenBSD() {
-}
+AudioManagerOpenBSD::AudioManagerOpenBSD() : active_output_stream_count_(0U) {}
 
 AudioManagerOpenBSD::~AudioManagerOpenBSD() {
-  // Make sure we stop the thread first. If we allow the default destructor to
-  // destroy the members, we may destroy audio streams before stopping the
-  // thread, resulting an unexpected behavior.
-  // This way we make sure activities of the audio streams are all stopped
-  // before we destroy them.
-  audio_thread_.Stop();
-
-  // Free output dispatchers, closing all remaining open streams.
-  output_dispatchers_.clear();
-
-  // Delete all the streams. Have to do it manually, we don't have ScopedSet<>,
-  // and we are not using ScopedVector<> because search there is slow.
-  STLDeleteElements(&active_streams_);
+  Shutdown();
+  // All the streams should have been deleted on the audio thread via Shutdown.
+  CHECK_EQ(active_output_stream_count_, 0U);
 }
 
 void AudioManagerOpenBSD::Init() {
@@ -112,8 +96,9 @@ void AudioManagerOpenBSD::UnMuteAll() {
 
 void AudioManagerOpenBSD::ReleaseOutputStream(AudioOutputStream* stream) {
   if (stream) {
-    active_streams_.erase(stream);
     delete stream;
+    --active_output_stream_count_;
+    DCHECK_GE(active_output_stream_count_, 0U);
   }
 }
 
