$OpenBSD$
--- content/browser/plugin_service.cc.orig	Mon Nov  7 12:21:14 2011
+++ content/browser/plugin_service.cc	Tue Nov  8 18:40:08 2011
@@ -37,7 +37,7 @@
 #include "webkit/plugins/npapi/plugin_list.h"
 #include "webkit/plugins/webplugininfo.h"
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_OPENBSD)
 using ::base::files::FilePathWatcher;
 #endif
 
@@ -86,7 +86,7 @@ static void NotifyPluginsOfActivation() {
     plugin->OnAppActivation();
   }
 }
-#elif defined(OS_POSIX)
+#elif defined(OS_POSIX) && !defined(OS_OPENBSD)
 // Delegate class for monitoring directories.
 class PluginDirWatcherDelegate : public FilePathWatcher::Delegate {
   virtual void OnFilePathChanged(const FilePath& path) OVERRIDE {
@@ -173,7 +173,7 @@ void PluginService::StartWatchingPlugins() {
       hklm_watcher_.StartWatching(hklm_event_.get(), this);
     }
   }
-#elif defined(OS_POSIX) && !defined(OS_MACOSX)
+#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_OPENBSD)
 // The FilePathWatcher produces too many false positives on MacOS (access time
 // updates?) which will lead to enforcing updates of the plugins way too often.
 // On ChromeOS the user can't install plugins anyway and on Windows all
@@ -615,7 +615,7 @@ content::PepperPluginInfo* PluginService::GetRegistere
   return &ppapi_plugins_[ppapi_plugins_.size() - 1];
 }
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_OPENBSD)
 // static
 void PluginService::RegisterFilePathWatcher(
     FilePathWatcher *watcher,
