$OpenBSD$

Pledge and unveil. Based upon:
https://github.com/0x16h/gophernicus/commit/1f61d46a5ebb061d5862a6a61e296b473c169ec6

Index: gophernicus.c
--- gophernicus.c.orig
+++ gophernicus.c
@@ -25,7 +25,6 @@
 
 #include "gophernicus.h"
 
-
 /*
  * Print gopher menu line
  */
@@ -219,7 +218,8 @@ void selector_to_path(state *st)
 
 #ifdef HAVE_PASSWD
 	/* Virtual userdir (~user -> /home/user/public_gopher)? */
-	if (*(st->user_dir) && sstrncmp(st->req_selector, "/~") == MATCH) {
+	if (st->opt_personal_spaces && *(st->user_dir) &&
+	    sstrncmp(st->req_selector, "/~") == MATCH) {
 
 		/* Parse userdir login name & path */;
 		sstrlcpy(buf, st->req_selector + 2);
@@ -453,6 +453,8 @@ void init_state(state *st)
 	st->opt_shm = TRUE;
 	st->opt_root = TRUE;
 	st->opt_proxy = TRUE;
+	st->opt_execmaps = TRUE;
+	st->opt_personal_spaces = TRUE;
 	st->debug = FALSE;
 
 	/* Load default suffix -> filetype mappings */
@@ -488,6 +490,9 @@ int main(int argc, char *argv[])
 	char local[BUFSIZE];
 	int dummy;
 #endif
+#ifdef __OpenBSD__
+	char pledges[256];
+#endif
 
 	/* Get the name of this binary */
 	if ((c = strrchr(argv[0], '/'))) sstrlcpy(self, c + 1);
@@ -506,6 +511,78 @@ int main(int argc, char *argv[])
 	/* Open syslog() */
 	if (st.opt_syslog) openlog(self, LOG_PID, LOG_DAEMON);
 
+#ifdef __OpenBSD__
+	/* unveil(2) support */
+	if (st.opt_execmaps) {
+		/*
+		 * We can't really unveil(2) if the user is expecting to shell-out
+                 * to an arbitrary command.
+		 */
+		if (st.opt_syslog) {
+			syslog(LOG_WARNING,
+			    "executable gophermaps enabled, can't unveil(2)");
+		}
+	} else {
+		/* These paths must always available */
+		if (unveil("/tmp", "rcw") == -1)
+			die(&st, NULL, "unveil");
+		if (unveil("/etc/hosts", "r") == -1)
+			die(&st, NULL, "unveil");
+		if (unveil("/etc/resolv.conf", "r") == -1)
+			die(&st, NULL, "unveil");
+		if (unveil(st.server_root, "r") == -1)
+			die(&st, NULL, "unveil");
+
+		/*
+		 * Personal spaces serve "gopher://host/1/~user" from
+		 * "/home/user/public_gopher" and also needs to read the
+		 * password database to get the user's ~/public_gopher.
+		 */
+		if (st.opt_personal_spaces) {
+			syslog(LOG_WARNING,
+			    "personal gopherspaces enabled, unveil(2) /home and /etc/pwd.db");
+			if (unveil("/home", "r") == -1)
+				die(&st, NULL, "unveil");
+
+			if (unveil("/etc/pwd.db", "r") == -1)
+				die(&st, NULL, "unveil");
+		}
+	}
+
+	/* pledge(2) support */
+	if (st.opt_shm) {
+		/*
+		 * pledge(2) never allows shared memory.
+		 */
+		if (st.opt_syslog) {
+			syslog(LOG_WARNING,
+			    "shared-memory enabled, can't pledge(2)");
+		}
+	} else {
+		strlcpy(pledges,
+		    "stdio rpath wpath cpath tmppath inet sendfd recvfd tty proc",
+		    sizeof(pledges));
+
+		/* Executable maps shell-out using popen(3) */
+		if (st.opt_execmaps) {
+			strlcat(pledges, " exec", sizeof(pledges));
+			syslog(LOG_WARNING,
+			    "executable gophermaps enabled, adding 'exec' to pledge(2)");
+		}
+
+		/* Personal spaces require getpwnam(3) and getpwent(3) */
+		if (st.opt_personal_spaces) {
+			strlcat(pledges, " getpw", sizeof(pledges));
+			syslog(LOG_WARNING,
+			    "personal gopherspaces enabled, adding 'getpw' to pledge(2)");
+		}
+
+		if (pledge(pledges, NULL) == -1)
+			die(&st, NULL, "pledge");
+	}
+
+#endif
+
 	/* Check if TCP wrappers have something to say about this connection */
 #ifdef HAVE_LIBWRAP
 	if (sstrncmp(st.req_remote_addr, UNKNOWN_ADDR) != MATCH &&
@@ -527,30 +604,31 @@ int main(int argc, char *argv[])
 
 	/* Try to get shared memory */
 #ifdef HAVE_SHMEM
-	if ((shmid = shmget(SHM_KEY, sizeof(shm_state), IPC_CREAT | SHM_MODE)) == ERROR) {
+	if (st.opt_shm) {
+		if ((shmid = shmget(SHM_KEY, sizeof(shm_state), IPC_CREAT | SHM_MODE)) == ERROR) {
 
-		/* Getting memory failed -> delete the old allocation */
-		shmctl(shmid, IPC_RMID, &shm_ds);
-		shm = NULL;
-	}
-	else {
-		/* Map shared memory */
-		if ((shm = (shm_state *) shmat(shmid, (void *) 0, 0)) == (void *) ERROR)
+			/* Getting memory failed -> delete the old allocation */
+			shmctl(shmid, IPC_RMID, &shm_ds);
 			shm = NULL;
+		}
+		else {
+			/* Map shared memory */
+			if ((shm = (shm_state *) shmat(shmid, (void *) 0, 0)) == (void *) ERROR)
+				shm = NULL;
 
-		/* Initialize mapped shared memory */
-		if (shm && shm->start_time == 0) {
-			shm->start_time = time(NULL);
+			/* Initialize mapped shared memory */
+			if (shm && shm->start_time == 0) {
+				shm->start_time = time(NULL);
 
-			/* Keep server platform & description in shm */
-			platform(&st);
-			sstrlcpy(shm->server_platform, st.server_platform);
-			sstrlcpy(shm->server_description, st.server_description);
+				/* Keep server platform & description in shm */
+				platform(&st);
+				sstrlcpy(shm->server_platform, st.server_platform);
+				sstrlcpy(shm->server_description, st.server_description);
+			}
 		}
+	} else {
+		shm = NULL;
 	}
-
-	/* For debugging shared memory issues */
-	if (!st.opt_shm) shm = NULL;
 
 	/* Get server platform and description */
 	if (shm) {
