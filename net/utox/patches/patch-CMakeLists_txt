$OpenBSD$

Index: CMakeLists.txt
--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -1,5 +1,4 @@
 cmake_minimum_required(VERSION 3.2)
-set(CMAKE_OSX_DEPLOYMENT_TARGET 10.6 CACHE STRING "Minimum OS X deployment version")
 project(uTox LANGUAGES C)
 
 #####################
@@ -31,13 +30,12 @@ if(WIN32)
     set(WINDOWS TRUE)
 elseif(APPLE)
     if(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
+        set(CMAKE_OSX_DEPLOYMENT_TARGET 10.6 CACHE STRING "Minimum OS X deployment version")
         set(MACOSX TRUE)
     endif()
 elseif(UNIX)
     if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
         set(LINUX TRUE)
-    elseif(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
-        set(OPENBSD TRUE)
     elseif(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
         set(NETBSD TRUE)
     elseif(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*|FreeBSD")
@@ -103,12 +101,10 @@ if(WINDOWS AND NOT CROSS_COMPILING)
         # Helping Cygwin out again..
         set(WIN64 TRUE)
     endif()
-elseif(FREEBSD)
-    include(cmake/toolchain-freebsd.cmake)
-elseif(OPENBSD OR NETBSD)
-    include(cmake/toolchain-openbsd.cmake)
 elseif(APPLE)
     include(cmake/macOS.cmake)
+elseif(FREEBSD)
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib" CACHE STRING "" FORCE)
 endif()
 
 
@@ -184,8 +180,7 @@ add_cflag("-fPIC")
 # Fix GNU stack
 if(CMAKE_C_COMPILER_ID MATCHES "GNU")
     # Have ld strip the symbols from Release and MinSizeRel build types.
-    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Os")
-    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -Os -s")
+    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -s")
 
     if(LINUX)
         # enable Link Time Optimization on gcc (linux only currently)
@@ -220,9 +215,12 @@ elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
     endif()
 
     # Have ld strip the symbols from Release and MinSizeRel build types. (-Oz is clang specific)
-    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Os")
-    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -Oz -s")
+    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -s")
 
+    if(FREEBSD)
+        set(LIBRARIES ${LIBRARIES} "cxxrt")
+    endif()
+
     if(NOT ENABLE_ASAN)
         if(NOT APPLE)
             add_cflag("-fsanitize=safe-stack")
@@ -303,6 +301,9 @@ elseif(APPLE)
     add_definitions("-x objective-c")
     add_subdirectory(src/cocoa)
 elseif(UNIX)
+    find_package(X11 REQUIRED)
+    include_directories(${X11_INCLUDE_DIR})
+
     add_subdirectory(src/xlib)
 
     if(LINUX)
