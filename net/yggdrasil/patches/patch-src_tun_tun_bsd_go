- remove redundant MTU ioctl
- fix broken address ioctl
- rip out ifconfig(8) fallback

Index: src/tun/tun_bsd.go
--- src/tun/tun_bsd.go.orig
+++ src/tun/tun_bsd.go
@@ -4,11 +4,8 @@
 package tun
 
 import (
-	"encoding/binary"
 	"fmt"
-	"os/exec"
-	"strconv"
-	"strings"
+	"net"
 	"syscall"
 	"unsafe"
 
@@ -17,11 +14,17 @@ import (
 	wgtun "golang.zx2c4.com/wireguard/tun"
 )
 
-const SIOCSIFADDR_IN6 = (0x80000000) | ((288 & 0x1fff) << 16) | uint32(byte('i'))<<8 | 12
+const (
+	SIOCAIFADDR_IN6       = 0x8080691a
+	ND6_INFINITE_LIFETIME = 0xffffffff
+)
 
+// match net.IP being []byte, i.e. [16]byte for IPv6
+type in6_addr [16]uint8
+
 type in6_addrlifetime struct {
-	ia6t_expire    float64
-	ia6t_preferred float64
+	ia6t_expire    int64
+	ia6t_preferred int64
 	ia6t_vltime    uint32
 	ia6t_pltime    uint32
 }
@@ -29,51 +32,21 @@ type in6_addrlifetime struct {
 type sockaddr_in6 struct {
 	sin6_len      uint8
 	sin6_family   uint8
-	sin6_port     uint8
+	sin6_port     uint16
 	sin6_flowinfo uint32
-	sin6_addr     [8]uint16
+	sin6_addr     in6_addr
 	sin6_scope_id uint32
 }
 
-/*
-from <netinet6/in6_var.h>
-struct  in6_ifreq {
- 277         char    ifr_name[IFNAMSIZ];
- 278         union {
- 279                 struct  sockaddr_in6 ifru_addr;
- 280                 struct  sockaddr_in6 ifru_dstaddr;
- 281                 int     ifru_flags;
- 282                 int     ifru_flags6;
- 283                 int     ifru_metric;
- 284                 caddr_t ifru_data;
- 285                 struct in6_addrlifetime ifru_lifetime;
- 286                 struct in6_ifstat ifru_stat;
- 287                 struct icmp6_ifstat ifru_icmp6stat;
- 288                 u_int32_t ifru_scope_id[16];
- 289         } ifr_ifru;
- 290 };
-*/
-
-type in6_ifreq_mtu struct {
-	ifr_name [syscall.IFNAMSIZ]byte
-	ifru_mtu int
+type in6_aliasreq struct {
+	ifra_name       [syscall.IFNAMSIZ]byte
+	ifra_addr       sockaddr_in6
+	ifra_dstaddr    sockaddr_in6
+	ifra_prefixmask sockaddr_in6
+	ifra_flags      int32
+	ifra_lifetime   in6_addrlifetime
 }
 
-type in6_ifreq_addr struct {
-	ifr_name  [syscall.IFNAMSIZ]byte
-	ifru_addr sockaddr_in6
-}
-
-type in6_ifreq_flags struct {
-	ifr_name [syscall.IFNAMSIZ]byte
-	flags    int
-}
-
-type in6_ifreq_lifetime struct {
-	ifr_name          [syscall.IFNAMSIZ]byte
-	ifru_addrlifetime in6_addrlifetime
-}
-
 // Configures the TUN adapter with the correct IPv6 address and MTU.
 func (tun *TunAdapter) setup(ifname string, addr string, mtu uint64) error {
 	iface, err := wgtun.CreateTUN(ifname, int(mtu))
@@ -97,13 +70,22 @@ func (tun *TunAdapter) setupFD(fd int32, addr string, 
 	return fmt.Errorf("setup via FD not supported on this platform")
 }
 
+func (sa6 *sockaddr_in6) setSockaddr(addr [/*16*/]byte /* net.IP or net.IPMask */) {
+	sa6.sin6_len    = uint8(unsafe.Sizeof(*sa6))
+	sa6.sin6_family = unix.AF_INET6
+
+	for i := range sa6.sin6_addr {
+		sa6.sin6_addr[i] = addr[i]
+	}
+}
+
 func (tun *TunAdapter) setupAddress(addr string) error {
 	var sfd int
 	var err error
 
 	// Create system socket
-	if sfd, err = unix.Socket(unix.AF_INET, unix.SOCK_DGRAM, 0); err != nil {
-		tun.log.Printf("Create AF_INET socket failed: %v.", err)
+	if sfd, err = unix.Socket(unix.AF_INET6, unix.SOCK_DGRAM, 0); err != nil {
+		tun.log.Printf("Create AF_INET6 socket failed: %v", err)
 		return err
 	}
 
@@ -112,53 +94,28 @@ func (tun *TunAdapter) setupAddress(addr string) error
 	tun.log.Infof("Interface IPv6: %s", addr)
 	tun.log.Infof("Interface MTU: %d", tun.mtu)
 
-	// Create the MTU request
-	var ir in6_ifreq_mtu
-	copy(ir.ifr_name[:], tun.Name())
-	ir.ifru_mtu = int(tun.mtu)
-
-	// Set the MTU
-	if _, _, errno := unix.Syscall(unix.SYS_IOCTL, uintptr(sfd), uintptr(syscall.SIOCSIFMTU), uintptr(unsafe.Pointer(&ir))); errno != 0 {
-		err = errno
-		tun.log.Errorf("Error in SIOCSIFMTU: %v", errno)
-
-		// Fall back to ifconfig to set the MTU
-		cmd := exec.Command("ifconfig", tun.Name(), "mtu", string(tun.mtu))
-		tun.log.Warnf("Using ifconfig as fallback: %v", strings.Join(cmd.Args, " "))
-		output, err := cmd.CombinedOutput()
-		if err != nil {
-			tun.log.Errorf("SIOCSIFMTU fallback failed: %v.", err)
-			tun.log.Traceln(string(output))
-		}
+	ip, prefix, err := net.ParseCIDR(addr)
+	if err != nil {
+		tun.log.Errorf("Error in ParseCIDR: %v", err)
+		return err
 	}
 
 	// Create the address request
-	// FIXME: I don't work!
-	var ar in6_ifreq_addr
-	copy(ar.ifr_name[:], tun.Name())
-	ar.ifru_addr.sin6_len = uint8(unsafe.Sizeof(ar.ifru_addr))
-	ar.ifru_addr.sin6_family = unix.AF_INET6
-	parts := strings.Split(strings.Split(addr, "/")[0], ":")
-	for i := 0; i < 8; i++ {
-		addr, _ := strconv.ParseUint(parts[i], 16, 16)
-		b := make([]byte, 16)
-		binary.LittleEndian.PutUint16(b, uint16(addr))
-		ar.ifru_addr.sin6_addr[i] = uint16(binary.BigEndian.Uint16(b))
-	}
+	var ar in6_aliasreq
+	copy(ar.ifra_name[:], tun.Name())
 
-	// Set the interface address
-	if _, _, errno := unix.Syscall(unix.SYS_IOCTL, uintptr(sfd), uintptr(SIOCSIFADDR_IN6), uintptr(unsafe.Pointer(&ar))); errno != 0 {
-		err = errno
-		tun.log.Errorf("Error in SIOCSIFADDR_IN6: %v", errno)
+	ar.ifra_addr.setSockaddr(ip)
 
-		// Fall back to ifconfig to set the address
-		cmd := exec.Command("ifconfig", tun.Name(), "inet6", addr)
-		tun.log.Warnf("Using ifconfig as fallback: %v", strings.Join(cmd.Args, " "))
-		output, err := cmd.CombinedOutput()
-		if err != nil {
-			tun.log.Errorf("SIOCSIFADDR_IN6 fallback failed: %v.", err)
-			tun.log.Traceln(string(output))
-		}
+	prefixmask := net.CIDRMask(prefix.Mask.Size())
+	ar.ifra_prefixmask.setSockaddr(prefixmask)
+
+	ar.ifra_lifetime.ia6t_vltime = ND6_INFINITE_LIFETIME
+	ar.ifra_lifetime.ia6t_pltime = ND6_INFINITE_LIFETIME
+
+	// Set the interface address
+	if err = unix.IoctlSetInt(sfd, SIOCAIFADDR_IN6, int(uintptr(unsafe.Pointer(&ar)))); err != nil {
+		tun.log.Errorf("Error in SIOCAIFADDR_IN6: %v", err)
+		return err
 	}
 
 	return nil
