use pledge(2) and unveil(2)

Index: cmd/yggdrasil/main.go
--- cmd/yggdrasil/main.go.orig
+++ cmd/yggdrasil/main.go
@@ -14,6 +14,8 @@ import (
 	"strings"
 	"syscall"
 
+	"suah.dev/protect"
+
 	"github.com/gologme/log"
 	gsyslog "github.com/hashicorp/go-syslog"
 	"github.com/hjson/hjson-go/v4"
@@ -137,6 +139,28 @@ func main() {
 		return
 	}
 
+	// If given, config file and log file have been opened at this point.
+
+	// If a file, the control socket gets chmod'ed/removed on startup/shutdown.
+	// TODO unclear how to access user-specified files here, assume default...
+	if err := protect.Unveil(strings.TrimPrefix(cfg.AdminListen, "unix://"), "rwc"); err != nil {
+		panic(err)
+	}
+
+	// tun(4)
+	if err := protect.Unveil("/dev/" + cfg.IfName, "rw"); err != nil {
+		panic(err)
+	}
+
+	// Nothing else needs filesystem.
+	// TODO Ignoring "noise" like /etc/localtime for now...
+	if err := protect.Unveil("/", ""); err != nil {
+		panic(err)
+	}
+	if err := protect.UnveilBlock(); err != nil {
+		panic(err)
+	}
+
 	privateKey := ed25519.PrivateKey(cfg.PrivateKey)
 	publicKey := privateKey.Public().(ed25519.PublicKey)
 
@@ -279,6 +303,10 @@ func main() {
 		// Wait for all parts to shutdown properly
 		<-done
 	})
+
+	if err := protect.Pledge("stdio rpath cpath inet mcast fattr unix dns route wroute"); err != nil {
+		panic(err)
+	}
 
 	// Block until we are told to shut down.
 	<-ctx.Done()
