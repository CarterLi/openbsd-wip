$OpenBSD$
--- psutil/arch/bsd/process_info.c.orig	Mon Apr 30 00:01:47 2012
+++ psutil/arch/bsd/process_info.c	Sun Apr 29 23:14:35 2012
@@ -15,16 +15,20 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
+#include <fcntl.h>
 #include <sys/types.h>
-#include <sys/sysctl.h>
+// OpenBSD
 #include <sys/param.h>
+#include <sys/sysctl.h>
 #include <sys/user.h>
 #include <sys/proc.h>
 #include <signal.h>
+#include <kvm.h>
 
 #include "process_info.h"
 
 
+#if 0
 /*
  * Returns a list of all BSD processes on the system.  This routine
  * allocates the list and puts it in *procList and a count of the
@@ -89,7 +93,7 @@ get_proc_list(struct kinfo_proc **procList, size_t *pr
                 err = errno;
             if (err == 0) {
                 done = 1;
-            }
+      s      }
             else if (err == ENOMEM) {
                 assert(result != NULL);
                 free(result);
@@ -111,8 +115,66 @@ get_proc_list(struct kinfo_proc **procList, size_t *pr
     assert((err == 0) == (*procList != NULL));
     return err;
 }
+#endif
 
+/*
+ * Returns a list of all BSD processes on the system.  This routine
+ * allocates the list and puts it in *procList and a count of the
+ * number of entries in *procCount.  You are responsible for freeing
+ * this list (use "free" from System framework).
+ * On success, the function returns 0.
+ * On error, the function returns a BSD errno value.
+ */
+int
+get_proc_list(struct kinfo_proc **procList, size_t *procCount)
+{
+    static const int name[] = { CTL_KERN, KERN_PROC, KERN_PROC, 0 };
+    // Declaring name as const requires us to cast it when passing it to
+    // sysctl because the prototype doesn't include the const modifier.
+    char errbuf[_POSIX2_LINE_MAX];
+    struct kinfo_proc *result;
+    struct kinfo_proc *x;
+    int cnt;
+    kvm_t *kd;
 
+    assert( procList != NULL);
+    assert(*procList == NULL);
+    assert(procCount != NULL);
+
+    kd = kvm_openfiles(NULL, NULL, NULL, KVM_NO_FILES, errbuf);
+
+    if (kd == NULL) {
+        fprintf(stderr, "WWWWWWWWWWWWWWWWWW\n");
+        return errno;
+    }
+
+    result = kvm_getprocs(kd, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc), &cnt);
+    if (result == NULL) {
+        fprintf(stderr, "UUUUUUUUUUUUUUUUUU\n");
+        err(1, NULL);
+        return errno;
+    }
+
+    *procCount = (size_t)cnt;
+
+    size_t mlen = cnt * sizeof(struct kinfo_proc);
+
+    if ((*procList = malloc(mlen)) == NULL) {
+        fprintf(stderr, "ZZZZZZZZZZZZZZZZZZ\n");
+        err(1, NULL);
+        return errno;
+    }
+
+    memcpy(*procList, result, mlen);
+
+    assert(*procList != NULL);
+
+    kvm_close(kd);
+
+    return 0;
+}
+
+
 char
 *getcmdpath(long pid, size_t *pathsize)
 {
@@ -125,7 +187,9 @@ char
      */
     mib[0] = CTL_KERN;
     mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_PATHNAME;
+    // OpenBSD
+    // mib[2] = KERN_PROC_PATHNAME;
+    mib[2] = KERN_PROC_ARGS;
     mib[3] = pid;
 
     // call with a null buffer first to determine if we need a buffer
@@ -146,57 +210,32 @@ char
     return path;
 }
 
-
-
-/*
- * Borrowed from psi Python System Information project
- *
- * Get command arguments and environment variables.
- *
- * Based on code from ps.
- *
- * Returns:
- *      0 for success;
- *      -1 for failure (Exception raised);
- *      1 for insufficient privileges.
- */
-char
-*getcmdargs(long pid, size_t *argsize)
+char **
+get_argv(long pid)
 {
-    int mib[4];
-    size_t size, argmax;
-    char *procargs = NULL;
+    static char **argv;
+    char **p;
+    int argv_mib[] = {CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV};
+    size_t argv_size = 128;
 
-    /* Get the maximum process arguments size. */
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_ARGMAX;
+    /* Loop and reallocate until we have enough space to fit argv. */
+    for (;; argv_size *= 2) {
+        if ((argv = realloc(argv, argv_size)) == NULL)
+            err(1, NULL);
 
-    size = sizeof(argmax);
-    if (sysctl(mib, 2, &argmax, &size, NULL, 0) == -1)
-        return NULL;
+        if (sysctl(argv_mib, 4, argv, &argv_size, NULL, 0) == 0)
+            break;
 
-    /* Allocate space for the arguments. */
-    procargs = (char *)malloc(argmax);
-    if (procargs == NULL)
-        return NULL;
+        if (errno == ESRCH) {
+            PyErr_SetFromErrno(PyExc_OSError);
+            return NULL;
+        }
 
-    /*
-     * Make a sysctl() call to get the raw argument space of the process.
-     */
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_ARGS;
-    mib[3] = pid;
-
-    size = argmax;
-    if (sysctl(mib, 4, procargs, &size, NULL, 0) == -1) {
-        free(procargs);
-        return NULL;       /* Insufficient privileges */
+        if (errno != ENOMEM)
+            err(1, NULL);
     }
 
-    // return string and set the length of arguments
-    *argsize = size;
-    return procargs;
+    return argv;
 }
 
 
@@ -204,47 +243,46 @@ char
 PyObject*
 get_arg_list(long pid)
 {
-    char *argstr = NULL;
-    int pos = 0;
-    size_t argsize = 0;
+    static char **argv;
+    char **p;
     PyObject *retlist = Py_BuildValue("[]");
     PyObject *item = NULL;
 
-    if (pid < 0) {
+    // XXX: why not error out?!
+    if (pid < 0)
         return retlist;
+
+    if ((argv = get_argv(pid)) == NULL)
+        return NULL;
+
+    for (p = argv; *p != NULL; p++) {
+	item = Py_BuildValue("s", *p);
+	PyList_Append(retlist, item);
+	Py_DECREF(item);
     }
 
-    // XXX - this leaks memory (grrr)
-    argstr = getcmdargs(pid, &argsize);
+    // XXX: free argv?
 
-    if (NULL == argstr) {
-        if (ESRCH == errno) {
-            PyErr_Format(PyExc_RuntimeError,
-                    "getcmdargs() failed - no process found with pid %lu", pid);
-            return NULL;
-        }
+    return retlist;
+}
 
-        // ignore other errors for now, since we don't want to bail on
-        // get_process_info() if cmdline is the only thing we couldn't get.
-        // In that case, we just return an empty list return
-        // PyErr_Format(PyExc_RuntimeError, "getcmdargs() failed for pid %lu", pid);
-        return retlist;
-    }
+/* returns the command line as a python list object */
+PyObject *
+get_progname(long pid)
+{
+    static char **argv;
+    char buf[MAXPATHLEN];
 
-    // args are returned as a flattened string with \0 separators between
-    // arguments add each string to the list then step forward to the next
-    // separator
-    if (argsize > 0) {
-        while(pos < argsize) {
-            item = Py_BuildValue("s", &argstr[pos]);
-            PyList_Append(retlist, item);
-            Py_DECREF(item);
-            pos = pos + strlen(&argstr[pos]) + 1;
-        }
+    if (pid < 0)
+	return NULL;
+
+    if ((argv = get_argv(pid)) == NULL) {
+        return NULL;
     }
 
-    free(argstr);
-    return retlist;
+    strlcpy(buf, argv[0], MAXPATHLEN);
+
+    return Py_BuildValue("s", buf);
 }
 
 
