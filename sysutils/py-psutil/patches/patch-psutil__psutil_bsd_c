$OpenBSD$
--- psutil/_psutil_bsd.c.orig	Mon Apr 30 00:01:31 2012
+++ psutil/_psutil_bsd.c	Sun Apr 29 23:51:05 2012
@@ -15,15 +15,20 @@
 #include <stdio.h>
 #include <signal.h>
 #include <sys/types.h>
-#include <sys/sysctl.h>
+// OpenBSD
 #include <sys/param.h>
+#include <sys/sysctl.h>
 #include <sys/user.h>
 #include <sys/proc.h>
 #include <sys/socket.h>
+// OpenBSD
+#include <sys/sched.h>
 #include <fcntl.h>
-#include <devstat.h>      /* get io counters */
+// OpenBSD
+// #include <devstat.h>      /* get io counters */
 #include <sys/vmmeter.h>  /* needed for vmtotal struct */
-#include <libutil.h>      /* process open files */
+// OpenBSD
+// #include <libutil.h>      /* process open files */
 #include <sys/mount.h>
 
 #include <net/if.h>       /* net io counters */
@@ -40,8 +45,12 @@
 
 // convert a timeval struct to a double
 #define TV2DOUBLE(t)    ((t).tv_sec + (t).tv_usec / 1000000.0)
+#define KPT2DOUBLE(t)   (t ## _sec + t ## _usec / 1000000.0)
 
 
+
+// OpenBSD
+#if 0
 /*
  * Utility function which fills a kinfo_proc struct based on process pid
  */
@@ -71,8 +80,42 @@ get_kinfo_proc(const pid_t pid, struct kinfo_proc *pro
     }
     return 0;
 }
+#endif
 
+/*
+ * Utility function which fills a kinfo_proc struct based on process pid
+ */
+static int
+get_kinfo_proc(const pid_t pid, struct kinfo_proc *proc)
+{
+    int mib[6];
+    size_t size;
+    mib[0] = CTL_KERN;
+    mib[1] = KERN_PROC;
+    mib[2] = KERN_PROC_PID;
+    mib[3] = pid;
 
+    size = sizeof(struct kinfo_proc);
+
+    mib[4] = size;
+    mib[5] = 1;
+
+    if (sysctl((int*)mib, 6, proc, &size, NULL, 0) == -1) {
+        PyErr_SetFromErrno(PyExc_OSError);
+        return -1;
+    }
+
+    /*
+     * sysctl stores 0 in the size if we can't find the process information.
+     */
+    if (size == 0) {
+        NoSuchProcess();
+        return -1;
+    }
+    return 0;
+}
+
+
 /*
  * Return a Python list of all the PIDs running on the system.
  */
@@ -95,7 +138,9 @@ get_pid_list(PyObject* self, PyObject* args)
     if (num_processes > 0) {
         orig_address = proclist; // save so we can free it after we're done
         for (idx=0; idx < num_processes; idx++) {
-            pid = Py_BuildValue("i", proclist->ki_pid);
+            // OpenBSD
+            // pid = Py_BuildValue("i", proclist->ki_pid);
+            pid = Py_BuildValue("i", proclist->p_pid);
             PyList_Append(retlist, pid);
             Py_XDECREF(pid);
             proclist++;
@@ -143,9 +188,12 @@ get_process_name(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("s", kp.ki_comm);
+    // OpenBSD
+    // return Py_BuildValue("s", kp.ki_comm);
+    return Py_BuildValue("s", kp.p_comm);
 }
 
+PyObject * get_progname(long);
 
 /*
  * Return process pathname executable.
@@ -156,35 +204,11 @@ static PyObject*
 get_process_exe(PyObject* self, PyObject* args)
 {
     long pid;
-    char pathname[PATH_MAX];
-    int error;
-    int mib[4];
-    size_t size;
 
-    if (! PyArg_ParseTuple(args, "l", &pid)) {
+    if (! PyArg_ParseTuple(args, "l", &pid))
         return NULL;
-    }
 
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_PATHNAME;
-    mib[3] = pid;
-
-    size = sizeof(pathname);
-    error = sysctl(mib, 4, pathname, &size, NULL, 0);
-    if (error == -1) {
-        PyErr_SetFromErrno(PyExc_OSError);
-        return NULL;
-    }
-    if (size == 0 || strlen(pathname) == 0) {
-        if (pid_exists(pid) == 0) {
-            return NoSuchProcess();
-        }
-        else {
-            strcpy(pathname, "");
-        }
-    }
-    return Py_BuildValue("s", pathname);
+    return get_progname(pid);
 }
 
 
@@ -227,7 +251,9 @@ get_process_ppid(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("l", (long)kp.ki_ppid);
+    // OpenBSD
+    // return Py_BuildValue("l", (long)kp.ki_ppid);
+    return Py_BuildValue("l", (long)kp.p_ppid);
 }
 
 
@@ -245,7 +271,9 @@ get_process_status(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("i", (int)kp.ki_stat);
+    // OpenBSD
+    // return Py_BuildValue("i", (int)kp.ki_stat);
+    return Py_BuildValue("i", (int)kp.p_stat);
 }
 
 
@@ -264,9 +292,13 @@ get_process_uids(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("lll", (long)kp.ki_ruid,
-                                (long)kp.ki_uid,
-                                (long)kp.ki_svuid);
+    // OpenBSD
+    // return Py_BuildValue("lll", (long)kp.ki_ruid,
+    //                             (long)kp.ki_uid,
+    //                             (long)kp.ki_svuid);
+    return Py_BuildValue("lll", (long)kp.p_ruid,
+                                (long)kp.p_uid,
+                                (long)kp.p_svuid);
 }
 
 
@@ -285,9 +317,13 @@ get_process_gids(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("lll", (long)kp.ki_rgid,
-                                (long)kp.ki_groups[0],
-                                (long)kp.ki_svuid);
+    // OpenBSD
+    // return Py_BuildValue("lll", (long)kp.ki_rgid,
+    //                             (long)kp.ki_groups[0],
+    //                             (long)kp.ki_svuid);
+    return Py_BuildValue("lll", (long)kp.p_rgid,
+                                (long)kp.p_groups[0],
+                                (long)kp.p_svuid);
 }
 
 
@@ -306,7 +342,9 @@ get_process_tty_nr(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("i", kp.ki_tdev);
+    // OpenBSD
+    //return Py_BuildValue("i", kp.ki_tdev);
+    return Py_BuildValue("i", kp.p_tdev);
 }
 
 
@@ -324,7 +362,9 @@ get_process_num_threads(PyObject* self, PyObject* args
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("l", (long)kp.ki_numthreads);
+    // OpenBSD
+    // return Py_BuildValue("l", (long)kp.ki_numthreads);
+    return Py_BuildValue("l", 0);
 }
 
 
@@ -356,7 +396,9 @@ get_process_threads(PyObject* self, PyObject* args)
      */
     mib[0] = CTL_KERN;
     mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_PID | KERN_PROC_INC_THREAD;
+    // OpenBSD
+    // mib[2] = KERN_PROC_PID | KERN_PROC_INC_THREAD;
+    mib[2] = KERN_PROC_PID;
     mib[3] = pid;
 
     size = 0;
@@ -386,9 +428,14 @@ get_process_threads(PyObject* self, PyObject* args)
 
     for (i = 0; i < size / sizeof(*kipp); i++) {
         kipp = &kip[i];
-        pyTuple = Py_BuildValue("Idd", kipp->ki_tid,
-                                       TV2DOUBLE(kipp->ki_rusage.ru_utime),
-                                       TV2DOUBLE(kipp->ki_rusage.ru_stime)
+	// OpenBSD
+        // pyTuple = Py_BuildValue("Idd", kipp->ki_tid,
+        //                                TV2DOUBLE(kipp->ki_rusage.ru_utime),
+        //                                TV2DOUBLE(kipp->ki_rusage.ru_stime)
+        //                         );
+        pyTuple = Py_BuildValue("Idd", 0, // thread id?
+                                       kipp->p_uutime_sec,
+                                       kipp->p_ustime_sec
                                 );
         PyList_Append(retList, pyTuple);
         Py_XDECREF(pyTuple);
@@ -397,7 +444,6 @@ get_process_threads(PyObject* self, PyObject* args)
     return retList;
 }
 
-
 /*
  * Return a Python tuple (user_time, kernel_time)
  */
@@ -414,8 +460,11 @@ get_cpu_times(PyObject* self, PyObject* args)
         return NULL;
     }
     // convert from microseconds to seconds
-    user_t = TV2DOUBLE(kp.ki_rusage.ru_utime);
-    sys_t = TV2DOUBLE(kp.ki_rusage.ru_stime);
+    // OpenBSD
+    // user_t = TV2DOUBLE(kp.ki_rusage.ru_utime);
+    // sys_t = TV2DOUBLE(kp.ki_rusage.ru_stime);
+    user_t = KPT2DOUBLE(kp.p_uutime);
+    sys_t = KPT2DOUBLE(kp.p_ustime);
     return Py_BuildValue("(dd)", user_t, sys_t);
 }
 
@@ -458,7 +507,10 @@ get_process_create_time(PyObject* self, PyObject* args
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("d", TV2DOUBLE(kp.ki_start));
+    // fprintf(stderr, "---- %d => %d\n", pid, kp.p_ustart_sec);
+    // OpenBSD
+    // return Py_BuildValue("d", TV2DOUBLE(kp.ki_start));
+    return Py_BuildValue("d", KPT2DOUBLE(kp.p_ustart));
 }
 
 
@@ -478,8 +530,12 @@ get_process_io_counters(PyObject* self, PyObject* args
         return NULL;
     }
     // there's apparently no way to determine bytes count, hence return -1.
-    return Py_BuildValue("(llll)", kp.ki_rusage.ru_inblock,
-                                   kp.ki_rusage.ru_oublock,
+    // OpenBSD
+    // return Py_BuildValue("(llll)", kp.ki_rusage.ru_inblock,
+    //                                kp.ki_rusage.ru_oublock,
+    //                                -1, -1);
+    return Py_BuildValue("(llll)", kp.p_uru_inblock,
+                                   kp.p_uru_oublock,
                                    -1, -1);
 }
 
@@ -488,6 +544,7 @@ get_process_io_counters(PyObject* self, PyObject* args
 /*
  * Return the RSS and VMS as a Python tuple.
  */
+#define ptoa(x)         ((paddr_t)(x) << PAGE_SHIFT)
 static PyObject*
 get_memory_info(PyObject* self, PyObject* args)
 {
@@ -499,7 +556,9 @@ get_memory_info(PyObject* self, PyObject* args)
     if (get_kinfo_proc(pid, &kp) == -1) {
         return NULL;
     }
-    return Py_BuildValue("(ll)", ptoa(kp.ki_rssize), (long)kp.ki_size);
+    // OpenBSD
+    // return Py_BuildValue("(ll)", ptoa(kp.ki_rssize), (long)kp.ki_size);
+    return Py_BuildValue("(kk)", ptoa(kp.p_vm_rssize), (long)kp.p_vmspace);
 }
 
 
@@ -527,6 +586,8 @@ get_total_phymem(PyObject* self, PyObject* args)
 }
 
 
+// OpenBSD
+#if 0
 /*
  * Return a Python long indicating the amount of available physical memory in
  * bytes.
@@ -534,21 +595,25 @@ get_total_phymem(PyObject* self, PyObject* args)
 static PyObject*
 get_avail_phymem(PyObject* self, PyObject* args)
 {
-    unsigned long v_inactive_count = 0;
-    unsigned long v_cache_count = 0;
     unsigned long v_free_count = 0;
+    unsigned long avail_mem = 0;
     long total_mem = 0;
     long long avail_mem = 0;
     size_t size = sizeof(unsigned long);
     size_t psize = sizeof(total_mem);
     int pagesize = getpagesize();
 
-    if (sysctlbyname("hw.physmem", &total_mem, &psize, NULL, 0) == -1) {
+    // OpenBSD
+    // if (sysctlbyname("hw.physmem", &total_mem, &psize, NULL, 0) == -1) {
+    int mib[0] = { HW_PHYSMEM64 };
+    if (sysctl(mib, 1, &total_mem, &psize, NULL, 0) == -1) {
         PyErr_SetFromErrno(0);
         return NULL;
     }
 
-    if (sysctlbyname("vm.stats.vm.v_inactive_count", &v_inactive_count,
+    // OpenBSD
+    /*
+    if (sysctl("vm.stats.vm.v_inactive_count", &v_inactive_count,
                      &size, NULL, 0) == -1) {
         PyErr_SetFromErrno(0);
         return NULL;
@@ -565,14 +630,35 @@ get_avail_phymem(PyObject* self, PyObject* args)
         PyErr_SetFromErrno(0);
         return NULL;
     }
+    */
 
     avail_mem = (v_inactive_count + v_cache_count + v_free_count) * pagesize;
     // used_mem = total_mem - avail_mem;
 
     return Py_BuildValue("L", avail_mem);
 }
+#endif
 
+/*
+ * Return a Python long indicating the amount of available physical memory in
+ * bytes.
+ */
+static PyObject*
+get_avail_phymem(PyObject* self, PyObject* args)
+{
+    unsigned long avail_mem = 0;
+    size_t psize = sizeof(avail_mem);
+    int user_mem_mib[] = { CTL_HW, HW_USERMEM64 };
 
+    if (sysctl(user_mem_mib, 2, &avail_mem, &psize, NULL, 0) == -1) {
+        PyErr_SetFromErrno(0);
+        return NULL;
+    }
+
+    return Py_BuildValue("L", avail_mem);
+}
+
+
 /*
  * Return a Python long indicating the total amount of virtual memory
  * in bytes.
@@ -631,6 +717,8 @@ get_avail_virtmem(PyObject* self, PyObject* args)
 static PyObject*
 get_system_cpu_times(PyObject* self, PyObject* args)
 {
+// OpenBSD
+#if 0
     long cpu_time[CPUSTATES];
     size_t size;
 
@@ -648,6 +736,8 @@ get_system_cpu_times(PyObject* self, PyObject* args)
                          (double)cpu_time[CP_IDLE] / CLOCKS_PER_SEC,
                          (double)cpu_time[CP_INTR] / CLOCKS_PER_SEC
     );
+#endif
+    return Py_BuildValue("(ddddd)", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);
 }
 
 /*
@@ -745,7 +835,6 @@ get_process_cwd(PyObject* self, PyObject* args)
     return path;
 }
 
-
 /*
  * Return a Python list of tuple representing per-cpu times
  */
@@ -802,7 +891,59 @@ get_system_per_cpu_times(PyObject* self, PyObject* arg
 #endif
 
 
+#ifdef __OpenBSD__
 /*
+ * Return a Python list of tuple representing per-cpu times
+ */
+static PyObject*
+get_system_per_cpu_times(PyObject* self, PyObject* args)
+{
+    static int maxcpus;
+    int mib[2];
+    int ncpu;
+    size_t len;
+    size_t size;
+    int i;
+    PyObject* py_retlist = PyList_New(0);
+    PyObject* py_cputime;
+
+    // retrieve the number of cpus
+    mib[0] = CTL_HW;
+    mib[1] = HW_NCPU;
+    len = sizeof(ncpu);
+    if (sysctl(mib, 2, &ncpu, &len, NULL, 0) == -1) {
+        PyErr_SetFromErrno(0);
+        return NULL;
+    }
+    long cpu_time[ncpu][CPUSTATES];
+
+    // per-cpu info
+    mib[0] = CTL_KERN;
+    mib[1] = KERN_CPTIME;
+    size = sizeof(cpu_time);
+    if (sysctl(mib, 2, &cpu_time, &size, NULL, 0) == -1) {
+        PyErr_SetFromErrno(0);
+        return NULL;
+    }
+
+    for (i = 0; i < ncpu; i++) {
+        py_cputime = Py_BuildValue("(ddddd)",
+                               (double)cpu_time[i][CP_USER] / CLOCKS_PER_SEC,
+                               (double)cpu_time[i][CP_NICE] / CLOCKS_PER_SEC,
+                               (double)cpu_time[i][CP_SYS] / CLOCKS_PER_SEC,
+                               (double)cpu_time[i][CP_IDLE] / CLOCKS_PER_SEC,
+                               (double)cpu_time[i][CP_INTR] / CLOCKS_PER_SEC
+                               );
+        PyList_Append(py_retlist, py_cputime);
+        Py_XDECREF(py_cputime);
+    }
+
+    return py_retlist;
+}
+#endif
+
+
+/*
  * Return a list of tuples including device, mount point and fs type
  * for all partitions mounted on the system.
  */
@@ -929,7 +1070,8 @@ get_disk_io_counters(PyObject* self, PyObject* args)
 {
     PyObject* py_retdict = PyDict_New();
     PyObject* py_disk_info;
-
+// OpenBSD
+#if 0
     int i;
     struct statinfo stats;
 
@@ -975,6 +1117,7 @@ get_disk_io_counters(PyObject* self, PyObject* args)
         free(stats.dinfo->mem_ptr);
     }
     free(stats.dinfo);
+#endif
 
     return py_retdict;
 }
@@ -1040,7 +1183,7 @@ PsutilMethods[] =
          "Return the amount of available virtual memory, in bytes"},
      {"get_system_cpu_times", get_system_cpu_times, METH_VARARGS,
          "Return system cpu times as a tuple (user, system, nice, idle, irc)"},
-#if defined(__FreeBSD_version) && __FreeBSD_version >= 800000
+#if defined(__OpenBSD__) || defined(__FreeBSD_version) && __FreeBSD_version >= 800000
      {"get_system_per_cpu_times", get_system_per_cpu_times, METH_VARARGS,
          "Return system per-cpu times as a list of tuples"},
 #endif
@@ -1115,8 +1258,11 @@ void init_psutil_bsd(void)
     PyModule_AddIntConstant(module, "SSLEEP", SSLEEP);
     PyModule_AddIntConstant(module, "SRUN", SRUN);
     PyModule_AddIntConstant(module, "SIDL", SIDL);
-    PyModule_AddIntConstant(module, "SWAIT", SWAIT);
-    PyModule_AddIntConstant(module, "SLOCK", SLOCK);
+// OpenBSD
+//    PyModule_AddIntConstant(module, "SWAIT", SWAIT);
+//    PyModule_AddIntConstant(module, "SLOCK", SLOCK);
+    PyModule_AddIntConstant(module, "SWAIT", -1);
+    PyModule_AddIntConstant(module, "SLOCK", -1);
     PyModule_AddIntConstant(module, "SZOMB", SZOMB);
 
     if (module == NULL) {
