$OpenBSD$

Make file(1)-based mime type detection a bit safer.

--- src/int/file_magic.c.orig	Sat Jan  2 19:28:29 2016
+++ src/int/file_magic.c	Fri Jun 10 11:30:00 2016
@@ -29,8 +29,11 @@
 #endif
 
 #include <stddef.h> /* size_t */
-#include <stdio.h> /* popen() */
+#include <stdlib.h> /* exit() */
 #include <string.h> /* strcpy() */
+#include <unistd.h> /* read() */
+#include <sys/resource.h> /* WIFEXITED() */
+#include <sys/wait.h> /* wait() */
 
 #include "../utils/str.h"
 #include "../filetype.h"
@@ -143,27 +146,32 @@ static int
 get_file_mimetype(const char *filename, char *buf, size_t buf_sz)
 {
 #ifdef HAVE_FILE_PROG
-	FILE *pipe;
-	char command[1024];
+	char quoted_filename[PATH_MAX*2], *qp;
+	int pipes[2];
+	pid_t pid;
+	int status;
 
-	/* Use the file command to get mimetype */
-	snprintf(command, sizeof(command), "file \"%s\" -b --mime-type", filename);
-
-	if((pipe = popen(command, "r")) == NULL)
-	{
+	if (pipe(pipes) == -1)
 		return -1;
-	}
 
-	if(fgets(buf, buf_sz, pipe) != buf)
+	switch (pid = fork())
 	{
-		pclose(pipe);
-		return -1;
+		case -1:
+			printf("ERROR: forking child process failed\n");
+			return -1;
+		case 0:
+			dup2 (pipes[1], STDOUT_FILENO);
+			close(pipes[0]);
+			close(pipes[1]);
+			/* Use the file command to get mimetype */
+			execl("/usr/bin/file", "file", "-b", "--mime-type", filename, NULL);
+			_exit(-1);
+		default:
+			close(pipes[1]);
+			(void)read(pipes[0], buf, buf_sz);
+			waitpid(pid, &status, 0);
 	}
-
-	pclose(pipe);
-	chomp(buf);
-
-	return 0;
+	return WIFEXITED(status) && !WEXITSTATUS(status);
 #else /* #ifdef HAVE_FILE_PROG */
 	return -1;
 #endif /* #ifdef HAVE_FILE_PROG */
