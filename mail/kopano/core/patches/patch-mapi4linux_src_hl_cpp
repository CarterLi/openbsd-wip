$OpenBSD$

Current compilers can not export functions with rvalue references.

Index: mapi4linux/src/hl.cpp
--- mapi4linux/src/hl.cpp.orig
+++ mapi4linux/src/hl.cpp
@@ -21,23 +21,11 @@ KProp::KProp(SPropValue *s) :
 {
 }
 
-KProp::KProp(KProp &&other) :
-	m_s(other.m_s)
-{
-	other.m_s = NULL;
-}
-
 KProp::~KProp() {
 	if (m_s != nullptr)
 		MAPIFreeBuffer(m_s);
 }
 
-KProp &KProp::operator=(KProp &&other)
-{
-	std::swap(m_s, other.m_s);
-	return *this;
-}
-
 unsigned int KProp::prop_type() const
 {
 	return PROP_TYPE(m_s->ulPropTag);
@@ -109,26 +97,12 @@ KAttach::KAttach(IAttach *attach, unsigned int num) :
 {
 }
 
-KAttach::KAttach(KAttach &&other) :
-	m_attach(other.m_attach), m_num(other.m_num)
-{
-	other.m_attach = NULL;
-	other.m_num = 0;
-}
-
 KAttach::~KAttach(void)
 {
 	if (m_attach != NULL)
 		m_attach->Release();
 }
 
-KAttach &KAttach::operator=(KAttach &&other)
-{
-	std::swap(m_attach, other.m_attach);
-	std::swap(m_num, other.m_num);
-	return *this;
-}
-
 KStream KAttach::open_property_stream(unsigned int tag, unsigned int intopts,
     unsigned int flags)
 {
@@ -150,24 +124,11 @@ KEntryId::KEntryId(ENTRYID *eid, size_t size) :
 {
 }
 
-KEntryId::KEntryId(KEntryId &&other) :
-	m_eid(other.m_eid), m_size(other.m_size)
-{
-	other.m_eid = NULL;
-}
-
 KEntryId::~KEntryId(void)
 {
 	MAPIFreeBuffer(m_eid);
 }
 
-KEntryId &KEntryId::operator=(KEntryId &&other)
-{
-	std::swap(m_eid, other.m_eid);
-	other.m_size = 0;
-	return *this;
-}
-
 KMAPIError::KMAPIError(HRESULT code) :
 	m_code(code), m_message(GetMAPIErrorDescription(m_code))
 {
@@ -183,24 +144,12 @@ KFolder::KFolder(IMAPIFolder *folder) :
 {
 }
 
-KFolder::KFolder(KFolder &&other) :
-	m_folder(other.m_folder)
-{
-	other.m_folder = NULL;
-}
-
 KFolder::~KFolder(void)
 {
 	if (m_folder != NULL)
 		m_folder->Release();
 }
 
-KFolder &KFolder::operator=(KFolder &&other)
-{
-	std::swap(m_folder, other.m_folder);
-	return *this;
-}
-
 KMessage KFolder::create_message(LPCIID intf, unsigned int flags)
 {
 	IMessage *message;
@@ -242,24 +191,12 @@ KMessage::KMessage(IMessage *message) :
 {
 }
 
-KMessage::KMessage(KMessage &&other) :
-	m_message(other.m_message)
-{
-	other.m_message = NULL;
-}
-
 KMessage::~KMessage(void)
 {
 	if (m_message != NULL)
 		m_message->Release();
 }
 
-KMessage &KMessage::operator=(KMessage &&other)
-{
-	std::swap(m_message, other.m_message);
-	return *this;
-}
-
 KAttach KMessage::create_attach(LPCIID intf, unsigned int flags)
 {
 	IAttach *atm;
@@ -337,25 +274,12 @@ KStore::KStore(IMsgStore *store) :
 {
 }
 
-KStore::KStore(KStore &&other) :
-	m_store(other.m_store), m_type(other.m_type)
-{
-	other.m_store = NULL;
-}
-
 KStore::~KStore(void)
 {
 	if (m_store != NULL)
 		m_store->Release();
 }
 
-KStore &KStore::operator=(KStore &&other)
-{
-	std::swap(m_store, other.m_store);
-	std::swap(m_type, other.m_type);
-	return *this;
-}
-
 KEntryId KStore::get_receive_folder(const char *cls, char **xcls)
 {
 	ULONG eid_size = 0;
@@ -412,24 +336,12 @@ KStream::KStream(IStream *stream) :
 {
 }
 
-KStream::KStream(KStream &&other) :
-	m_stream(other.m_stream)
-{
-	other.m_stream = NULL;
-}
-
 KStream::~KStream(void)
 {
 	if (m_stream != NULL)
 		m_stream->Release();
 }
 
-KStream &KStream::operator=(KStream &&other)
-{
-	std::swap(m_stream, other.m_stream);
-	return *this;
-}
-
 HRESULT KStream::write(const std::string &s)
 {
 	return m_stream->Write(s.c_str(), s.length(), 0);
@@ -483,24 +395,12 @@ KTable::KTable(IMAPITable *table) :
 {
 }
 
-KTable::KTable(KTable &&other) :
-	m_table(other.m_table)
-{
-	other.m_table = NULL;
-}
-
 KTable::~KTable(void)
 {
 	if (m_table != NULL)
 		m_table->Release();
 }
 
-KTable &KTable::operator=(KTable &&other)
-{
-	std::swap(m_table, other.m_table);
-	return *this;
-}
-
 HRESULT KTable::restrict(const SRestriction &r, unsigned int flags)
 {
 	return m_table->Restrict(const_cast<SRestriction *>(&r), flags);
@@ -580,22 +480,10 @@ KUnknown::KUnknown(IUnknown *p) :
 {
 }
 
-KUnknown::KUnknown(KUnknown &&other) :
-	m_ptr(other.m_ptr)
-{
-	other.m_ptr = NULL;
-}
-
 KUnknown::~KUnknown(void)
 {
 	if (m_ptr != NULL)
 		m_ptr->Release();
-}
-
-KUnknown &KUnknown::operator=(KUnknown &&other)
-{
-	std::swap(m_ptr, other.m_ptr);
-	return *this;
 }
 
 KUnknown::operator KFolder(void) const
