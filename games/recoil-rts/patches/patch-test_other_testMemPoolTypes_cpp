alignment aware memory pools:
https://github.com/beyond-all-reason/spring/pull/1165

Index: test/other/testMemPoolTypes.cpp
--- test/other/testMemPoolTypes.cpp.orig
+++ test/other/testMemPoolTypes.cpp
@@ -37,8 +37,8 @@ template <typename T>
 	};
 
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test allocator when full", "[class][template]",
-		(StaticMemPool<1,sizeof(TestData)>),
-		(FixedDynMemPool<sizeof(TestData), 1, 1>))
+		(StaticMemPoolT<1,TestData>),
+		(FixedDynMemPoolT<1, 1, TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
@@ -52,8 +52,8 @@ TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test allocato
 }
 
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test bounded allocator base functionality", "[class][template]",
-		(StaticMemPool<TEST_ALLOCATOR_SIZE,sizeof(TestData)>),
-		(FixedDynMemPool<sizeof(TestData), 1, TEST_ALLOCATOR_SIZE>))
+		(StaticMemPoolT<TEST_ALLOCATOR_SIZE, TestData>),
+		(FixedDynMemPoolT<1, TEST_ALLOCATOR_SIZE, TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
@@ -82,7 +82,7 @@ TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test bounded 
 }
 
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test unbounded allocator base functionality", "[class][template]",
-		(DynMemPool<sizeof(TestData)>))
+		(DynMemPoolT<TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
@@ -111,9 +111,9 @@ TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test unbounde
 }
 
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test reuse allocator's memory", "[class][template]",
-		(StaticMemPool<TEST_ALLOCATOR_SIZE,sizeof(TestData)>),
-		(FixedDynMemPool<sizeof(TestData), 1, TEST_ALLOCATOR_SIZE>),
-		(DynMemPool<sizeof(TestData)>))
+		(StaticMemPoolT<TEST_ALLOCATOR_SIZE, TestData>),
+		(FixedDynMemPoolT<1, TEST_ALLOCATOR_SIZE, TestData>),
+		(DynMemPoolT<TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
@@ -142,9 +142,9 @@ TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test reuse al
 
 // obeying the order is not a functional requirement of allocator
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test reuse allocator's memory in LIFO order", "[class][template]",
-		(StaticMemPool<TEST_ALLOCATOR_SIZE,sizeof(TestData)>),
-		(FixedDynMemPool<sizeof(TestData), 1, TEST_ALLOCATOR_SIZE>),
-		(DynMemPool<sizeof(TestData)>))
+		(StaticMemPoolT<TEST_ALLOCATOR_SIZE, TestData>),
+		(FixedDynMemPoolT<1, TEST_ALLOCATOR_SIZE, TestData>),
+		(DynMemPoolT<TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
@@ -172,8 +172,8 @@ TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test reuse al
 }
 
 TEMPLATE_TEST_CASE_METHOD(AllocFixture, "test allocator's clear method", "[class][template]",
-		(StaticMemPool<TEST_ALLOCATOR_SIZE,sizeof(TestData)>),
-		(FixedDynMemPool<sizeof(TestData), 1, TEST_ALLOCATOR_SIZE>))
+		(StaticMemPoolT<TEST_ALLOCATOR_SIZE, TestData>),
+		(FixedDynMemPoolT<1, TEST_ALLOCATOR_SIZE, TestData>))
 {
 	AllocFixture<TestType> inst;
 	auto& mempool = *inst.mempool;
