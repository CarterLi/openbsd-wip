stub thread_unwind
comment out use of backtrace_symbols
don't run backtrace functions; return instead

Index: rts/System/Platform/Linux/CrashHandler.cpp
--- rts/System/Platform/Linux/CrashHandler.cpp.orig
+++ rts/System/Platform/Linux/CrashHandler.cpp
@@ -45,7 +45,7 @@
 #define ADDR2LINE "atos"
 #endif
 
-#if (defined(__FreeBSD__))
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
 // show function names, demangle
 #define ADDR2LINE_ARGS " -f -C"
 #else
@@ -705,6 +705,9 @@ namespace CrashHandler
 	 */
 	int thread_unwind(ucontext_t* uc, void** iparray, StackTrace& stacktrace)
 	{
+#ifdef __OpenBSD__
+		return 0;
+#else
 		assert(iparray != nullptr);
 
 		unw_cursor_t cursor;
@@ -772,11 +775,16 @@ namespace CrashHandler
 		}
 
 		return (int(stacktrace.size()));
+#endif
 	}
 
 
 	static void Stacktrace(pthread_t* hThread = nullptr, const char* threadName = nullptr, const int logLevel = LOG_LEVEL_ERROR)
 	{
+#ifdef __OpenBSD__
+		//std::abort();
+		return;
+#else
 #if !(DEDICATED || UNIT_TEST)
 		Watchdog::ClearTimer();
 #endif
@@ -798,7 +806,7 @@ namespace CrashHandler
 				LOG_L(L_ERROR, "thread_unwind returned more lines than we allotted space for!");
 
 			// get untranslated stacktrace symbols; give them meaningful names
-			ExtractSymbols(backtrace_symbols(iparray, std::min(numLines, MAX_STACKTRACE_DEPTH)), stacktrace);
+			//ExtractSymbols(backtrace_symbols(iparray, std::min(numLines, MAX_STACKTRACE_DEPTH)), stacktrace);
 		}
 
 		if (stacktrace.empty()) {
@@ -808,6 +816,7 @@ namespace CrashHandler
 
 		TranslateStackTrace(stacktrace, logLevel);
 		LogStacktrace(logLevel, stacktrace);
+#endif
 	}
 
 
@@ -817,6 +826,10 @@ namespace CrashHandler
 	 */
 	void Stacktrace(Threading::NativeThreadHandle thread, const std::string& threadName, const int logLevel)
 	{
+#ifdef __OpenBSD__
+		//std::abort();
+		return;
+#else
 		//TODO Our custom thread_backtrace() only works on the mainthread.
 		//     Use gdb's libthread_db to get the stacktraces of all threads.
 		if (!Threading::IsMainThread(thread) && Threading::GetCurrentThread() != thread) {
@@ -828,6 +841,7 @@ namespace CrashHandler
 		PrepareStacktrace();
 		Stacktrace(&thread, threadName.c_str(), logLevel);
 		CleanupStacktrace();
+#endif
 	}
 
 
@@ -839,6 +853,9 @@ namespace CrashHandler
      */
     void SuspendedStacktrace(Threading::ThreadControls* ctls, const char* threadName)
     {
+#ifdef __OpenBSD__
+		std::abort();
+#else
 #if !(DEDICATED || UNIT_TEST)
 		Watchdog::ClearTimer();
 #endif
@@ -865,7 +882,7 @@ namespace CrashHandler
 				LOG_L(L_ERROR, "thread_unwind returned more lines than we allotted space for!");
 
 			// get untranslated stacktrace symbols; give them meaningful names
-			ExtractSymbols(backtrace_symbols(iparray, numLines), stacktrace);
+			//ExtractSymbols(backtrace_symbols(iparray, numLines), stacktrace);
 		}
 
 		if (stacktrace.empty()) {
@@ -881,6 +898,7 @@ namespace CrashHandler
 		LOG_L(L_DEBUG, "[%s][4]", __func__);
 
 		LogStacktrace(LOG_LEVEL_WARNING, stacktrace);
+#endif
     }
 
 
@@ -892,6 +910,10 @@ namespace CrashHandler
 	 */
     void HaltedStacktrace(siginfo_t* siginfo, ucontext_t* ucontext, const char* signame)
     {
+#ifdef __OpenBSD__
+		//std::abort();
+		return;
+#else
 		LOG_L(L_ERROR, "Halted Stacktrace for Spring %s (%s) using libunwind:", (SpringVersion::GetFull()).c_str(), signame);
 
 		assert(siginfo != nullptr);
@@ -912,7 +934,7 @@ namespace CrashHandler
 				LOG_L(L_ERROR, "thread_unwind returned more lines than we allotted space for!");
 
 			// get untranslated stacktrace symbols; give them meaningful names
-			ExtractSymbols(backtrace_symbols(iparray, std::min(numLines, MAX_STACKTRACE_DEPTH)), stacktrace);
+			//ExtractSymbols(backtrace_symbols(iparray, std::min(numLines, MAX_STACKTRACE_DEPTH)), stacktrace);
         }
 
 		LOG_L(L_DEBUG, "[%s][3]", __func__);
@@ -928,6 +950,7 @@ namespace CrashHandler
 
 		// Print out the translated StackTrace. Ignore the frames that occur inside the signal handler (before its line in the trace) -- they are likely some kind of padding or just garbage.
 		LogStacktrace(LOG_LEVEL_ERROR, stacktrace);
+#endif
     }
 
 
@@ -1022,9 +1045,14 @@ namespace CrashHandler
 	}
 
 	void OutputStacktrace() {
+#ifdef __OpenBSD__
+		//std::abort();
+		return;
+#else
 		PrepareStacktrace();
 		Stacktrace(nullptr);
 		CleanupStacktrace();
+#endif
 	}
 
 	void NewHandler() {
