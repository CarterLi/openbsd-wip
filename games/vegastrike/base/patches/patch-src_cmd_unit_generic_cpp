$OpenBSD$
--- src/cmd/unit_generic.cpp.orig	Thu Jan 26 23:35:59 2012
+++ src/cmd/unit_generic.cpp	Thu Jan 26 23:38:09 2012
@@ -46,6 +46,7 @@
 #include "config.h"
 #include "unit_find.h"
 #include "pilot.h"
+#include <cmath>
 //cannot seem to get min and max working properly across win and lin without using namespace std
 static float mymax (float a, float b) {return a<b?b:a;}
 static float mymin (float a, float b) {return a<b?a:b;}
@@ -3665,7 +3666,7 @@ Vector Unit::ClampTorque (const Vector &amt1)
 								 //HACK this forces the reaction to be Li-6+D fusion with efficiency governed by the getFuelUsage function
 	fuel-=GetFuelUsage(false)*SIMULATION_ATOM*Res.Magnitude()*FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-	if (ISNAN(fuel)) {
+	if (std::isnan(fuel)) {
 		fprintf (stderr,"FUEL is NAN\n");
 		fuel=0;
 	}
@@ -3871,7 +3872,7 @@ Vector Unit::ClampThrust (const Vector &amt1, bool aft
 								 //HACK this forces the reaction to be Li-6+Li-6 fusion with efficiency governed by the getFuelUsage function
 		fuel-=((afterburn&&finegrainedFuelEfficiency)?afterburnenergy:GetFuelUsage(afterburn))*SIMULATION_ATOM*Res.Magnitude()*FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-		if (ISNAN(fuel)) {
+		if (std::isnan(fuel)) {
 			fprintf(stderr,"Fuel is NAN A\n");
 			fuel=0;
 		}
@@ -3881,7 +3882,7 @@ Vector Unit::ClampThrust (const Vector &amt1, bool aft
 								 //HACK this forces the reaction to be Li-6+Li-6 fusion with efficiency governed by the getFuelUsage function
 		fuel-=GetFuelUsage(false)*SIMULATION_ATOM*Res.Magnitude()*FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-		if (ISNAN(fuel)) {
+		if (std::isnan(fuel)) {
 			fprintf(stderr,"Fuel is NAN B\n");
 			fuel=0;
 		}
