DEBUG couts
EXPERIMENTAL: use new for pages and indcs objects and adjust types

Index: rts/System/MemPoolTypes.h
--- rts/System/MemPoolTypes.h.orig
+++ rts/System/MemPoolTypes.h
@@ -22,6 +22,8 @@
 #include "System/Threading/SpringThreading.h"
 #include "System/Log/ILog.h"
 
+#include <iostream>
+
 template<uint32_t NumBuckets, size_t BucketSize> struct PassThroughPool {
 public:
 	PassThroughPool() {
@@ -275,6 +277,10 @@ template<size_t N, size_t S> struct StaticMemPool {
 public:
 	StaticMemPool() { clear(); }
 
+	~StaticMemPool() {
+    		delete pages;
+	}
+
 	void* allocMem(size_t size) {
 		assert(size <= PAGE_SIZE());
 		static_assert(NUM_PAGES() != 0, "");
@@ -286,10 +292,11 @@ template<size_t N, size_t S> struct StaticMemPool {
 		if (free_page_count == 0) {
 			i = used_page_count++;
 		} else {
-			i = indcs[--free_page_count];
+			i = (*indcs)[--free_page_count];
 		}
 
-		return (pages[curr_page_index = i].data());
+		//return (pages + (curr_page_index = i));
+		return ((*pages)[curr_page_index = i].data());
 	}
 
 
@@ -305,7 +312,7 @@ template<size_t N, size_t S> struct StaticMemPool {
 		std::memset(m, 0, PAGE_SIZE());
 
 		// mark page as free
-		indcs[free_page_count++] = base_offset(m) / PAGE_SIZE();
+		(*indcs)[free_page_count++] = base_offset(m) / PAGE_SIZE();
 	}
 
 
@@ -327,15 +334,17 @@ template<size_t N, size_t S> struct StaticMemPool {
 	size_t base_offset(const void* p) const { return (reinterpret_cast<const uint8_t*>(p) - reinterpret_cast<const uint8_t*>(pages[0].data())); }
 
 	bool mapped(const void* p) const { return (((base_offset(p) / PAGE_SIZE()) < total_size()) && ((base_offset(p) % PAGE_SIZE()) == 0)); }
-	bool alloced(const void* p) const { return (pages[curr_page_index].data() == p); }
+	bool alloced(const void* p) const { return (pages + curr_page_index == p); }
 
 	bool can_alloc() const { return (used_page_count < NUM_PAGES() || free_page_count > 0); }
 	bool can_free() const { return (free_page_count < NUM_PAGES()); }
 
 	void reserve(size_t) {} // no-op
 	void clear() {
-		std::memset(pages.data(), 0, total_size());
-		std::memset(indcs.data(), 0, NUM_PAGES());
+		std::memset(pages, 0, total_size());
+		//std::fill_n(*pages, total_size(), 0);
+		std::memset(indcs, 0, NUM_PAGES());
+		//std::fill_n(*indcs, NUM_PAGES(), 0);
 
 		used_page_count = 0;
 		free_page_count = 0;
@@ -343,8 +352,8 @@ template<size_t N, size_t S> struct StaticMemPool {
 	}
 
 private:
-	std::array<std::array<uint8_t, S>, N> pages;
-	std::array<size_t, N> indcs;
+	std::array<std::array<uint8_t, S>, N>* pages = new std::array<std::array<uint8_t, S>, N>;
+	std::array<size_t, N>* indcs = new std::array<size_t, N>;
 
 	size_t used_page_count = 0;
 	size_t free_page_count = 0; // indcs[fpc-1] is the last recycled page
@@ -405,7 +414,7 @@ inline size_t StablePosAllocator<T>::Allocate(size_t n
 	if (positionToSize.empty()) {
 		size_t returnPos = data.size();
 		data.resize(data.size() + numElems);
-		myLog("StablePosAllocator<T>::Allocate(%u) = %u [thread_id = %u]", uint32_t(numElems), uint32_t(returnPos), static_cast<uint32_t>(Threading::GetCurrentThreadId()));
+		//myLog("StablePosAllocator<T>::Allocate(%u) = %u [thread_id = %u]", uint32_t(numElems), uint32_t(returnPos), static_cast<uint32_t>(Threading::GetCurrentThreadId()));
 		return returnPos;
 	}
 
