$OpenBSD$

strcat -> strlcat etc

Index: codemp/botlib/l_precomp.cpp
--- codemp/botlib/l_precomp.cpp.orig
+++ codemp/botlib/l_precomp.cpp
@@ -475,7 +475,7 @@ int PC_StringizeTokens(token_t *tokens, token_t *token
 	token->whitespace_p = NULL;
 	token->endwhitespace_p = NULL;
 	token->string[0] = '\0';
-	strcat(token->string, "\"");
+	strlcat(token->string, "\"", sizeof(token->string));
 	for (t = tokens; t; t = t->next)
 	{
 		strncat(token->string, t->string, MAX_TOKEN - strlen(token->string) - 1);
@@ -494,7 +494,7 @@ int PC_MergeTokens(token_t *t1, token_t *t2)
 	//merging of a name with a name or number
 	if (t1->type == TT_NAME && (t2->type == TT_NAME || t2->type == TT_NUMBER))
 	{
-		strcat(t1->string, t2->string);
+		strlcat(t1->string, t2->string, sizeof(t1->string));
 		return qtrue;
 	} //end if
 	//merging of two strings
@@ -503,7 +503,7 @@ int PC_MergeTokens(token_t *t1, token_t *t2)
 		//remove trailing double quote
 		t1->string[strlen(t1->string)-1] = '\0';
 		//concat without leading double quote
-		strcat(t1->string, &t2->string[1]);
+		strlcat(t1->string, &t2->string[1], sizeof(t1->string));
 		return qtrue;
 	} //end if
 	//FIXME: merging of two number of the same sub type
@@ -705,7 +705,7 @@ void PC_AddBuiltinDefines(source_t *source)
 		define = (define_t *) GetMemory(sizeof(define_t));
 		Com_Memset(define, 0, sizeof(define_t));
 		define->name = (char *) GetMemory(strlen(builtin[i].string) + 1);
-		strcpy(define->name, builtin[i].string);
+		strlcpy(define->name, builtin[i].string, sizeof(define->name));
 		define->flags |= DEFINE_FIXED;
 		define->builtin = builtin[i].mBuiltin;
 		//add the define to the source
@@ -748,7 +748,7 @@ int PC_ExpandBuiltinDefine(source_t *source, token_t *
 		} //end case
 		case BUILTIN_FILE:
 		{
-			strcpy(token->string, source->scriptstack->filename);
+			strlcpy(token->string, source->scriptstack->filename, sizeof(token->string));
 			token->type = TT_NAME;
 			token->subtype = strlen(token->string);
 			*firsttoken = token;
@@ -759,10 +759,10 @@ int PC_ExpandBuiltinDefine(source_t *source, token_t *
 		{
 			t = time(NULL);
 			curtime = ctime(&t);
-			strcpy(token->string, "\"");
+			strlcpy(token->string, "\"", sizeof(token->string));
 			strncat(token->string, curtime+4, 7);
 			strncat(token->string+7, curtime+20, 4);
-			strcat(token->string, "\"");
+			strlcat(token->string, "\"", sizeof(token->string));
 			free(curtime);
 			token->type = TT_NAME;
 			token->subtype = strlen(token->string);
@@ -774,9 +774,9 @@ int PC_ExpandBuiltinDefine(source_t *source, token_t *
 		{
 			t = time(NULL);
 			curtime = ctime(&t);
-			strcpy(token->string, "\"");
+			strlcpy(token->string, "\"", sizeof(token->string));
 			strncat(token->string, curtime+11, 8);
-			strcat(token->string, "\"");
+			strlcat(token->string, "\"", sizeof(token->string));
 			free(curtime);
 			token->type = TT_NAME;
 			token->subtype = strlen(token->string);
@@ -1244,7 +1244,7 @@ int PC_Directive_define(source_t *source)
 	define = (define_t *) GetMemory(sizeof(define_t));
 	Com_Memset(define, 0, sizeof(define_t));
 	define->name = (char *) GetMemory(strlen(token.string) + 1);
-	strcpy(define->name, token.string);
+	strlcpy(define->name, token.string, sizeof(define->name));
 	//add the define to the source
 #if DEFINEHASHING
 	PC_AddDefineToHash(define, source->definehash);
@@ -1505,7 +1505,7 @@ define_t *PC_CopyDefine(source_t *source, define_t *de
 	newdefine = (define_t *) GetMemory(sizeof(define_t));
 	//copy the define name
 	newdefine->name = (char *) GetMemory(strlen(define->name) + 1);
-	strcpy(newdefine->name, define->name);
+	strlcpy(newdefine->name, define->name, sizeof(newdefine->name));
 	newdefine->flags = define->flags;
 	newdefine->builtin = define->builtin;
 	newdefine->numparms = define->numparms;
@@ -2455,7 +2455,7 @@ int PC_Directive_error(source_t *source)
 {
 	token_t token;
 
-	strcpy(token.string, "");
+	strlcpy(token.string, "", sizeof(token.string));
 	PC_ReadSourceToken(source, &token);
 	SourceError(source, "#error directive: %s", token.string);
 	return qfalse;
@@ -2488,7 +2488,7 @@ void UnreadSignToken(source_t *source)
 	token.whitespace_p = source->scriptstack->script_p;
 	token.endwhitespace_p = source->scriptstack->script_p;
 	token.linescrossed = 0;
-	strcpy(token.string, "-");
+	strlcpy(token.string, "-", sizeof(token.string));
 	token.type = TT_PUNCTUATION;
 	token.subtype = P_SUB;
 	PC_UnreadSourceToken(source, &token);
@@ -2824,7 +2824,7 @@ int PC_ReadToken(source_t *source, token_t *token)
 						SourceError(source, "string longer than MAX_TOKEN %d", MAX_TOKEN);
 						return qfalse;
 					}
-					strcat(token->string, newtoken.string+1);
+					strlcat(token->string, newtoken.string+1, sizeof(token->string));
 				}
 				else
 				{
@@ -2898,12 +2898,12 @@ int PC_ExpectTokenType(source_t *source, int type, int
 
 	if (token->type != type)
 	{
-		strcpy(str, "");
-		if (type == TT_STRING) strcpy(str, "string");
-		if (type == TT_LITERAL) strcpy(str, "literal");
-		if (type == TT_NUMBER) strcpy(str, "number");
-		if (type == TT_NAME) strcpy(str, "name");
-		if (type == TT_PUNCTUATION) strcpy(str, "punctuation");
+		strlcpy(str, "", sizeof(str));
+		if (type == TT_STRING) strlcpy(str, "string", sizeof(str));
+		if (type == TT_LITERAL) strlcpy(str, "literal", sizeof(str));
+		if (type == TT_NUMBER) strlcpy(str, "number", sizeof(str));
+		if (type == TT_NAME) strlcpy(str, "name", sizeof(str));
+		if (type == TT_PUNCTUATION) strlcpy(str, "punctuation", sizeof(str));
 		SourceError(source, "expected a %s, found %s", str, token->string);
 		return qfalse;
 	} //end if
@@ -2911,15 +2911,15 @@ int PC_ExpectTokenType(source_t *source, int type, int
 	{
 		if ((token->subtype & subtype) != subtype)
 		{
-			strcpy(str, "");
-			if (subtype & TT_DECIMAL) strcpy(str, "decimal");
-			if (subtype & TT_HEX) strcpy(str, "hex");
-			if (subtype & TT_OCTAL) strcpy(str, "octal");
-			if (subtype & TT_BINARY) strcpy(str, "binary");
-			if (subtype & TT_LONG) strcat(str, " long");
-			if (subtype & TT_UNSIGNED) strcat(str, " unsigned");
-			if (subtype & TT_FLOAT) strcat(str, " float");
-			if (subtype & TT_INTEGER) strcat(str, " integer");
+			strlcpy(str, "", sizeof(str));
+			if (subtype & TT_DECIMAL) strlcpy(str, "decimal", sizeof(str));
+			if (subtype & TT_HEX) strlcpy(str, "hex", sizeof(str));
+			if (subtype & TT_OCTAL) strlcpy(str, "octal", sizeof(str));
+			if (subtype & TT_BINARY) strlcpy(str, "binary", sizeof(str));
+			if (subtype & TT_LONG) strlcat(str, " long", sizeof(str));
+			if (subtype & TT_UNSIGNED) strlcat(str, " unsigned", sizeof(str));
+			if (subtype & TT_FLOAT) strlcat(str, " float", sizeof(str));
+			if (subtype & TT_INTEGER) strlcat(str, " integer", sizeof(str));
 			SourceError(source, "expected %s, found %s", str, token->string);
 			return qfalse;
 		} //end if
@@ -3044,7 +3044,7 @@ void PC_SetIncludePath(source_t *source, char *path)
 	if (len > 0 && source->includepath[len-1] != '\\' &&
 		source->includepath[len-1] != '/')
 	{
-		strcat(source->includepath, PATHSEPERATOR_STR);
+		strlcat(source->includepath, PATHSEPERATOR_STR, sizeof(source->includepath));
 	} //end if
 } //end of the function PC_SetIncludePath
 //============================================================================
@@ -3288,7 +3288,7 @@ int PC_ReadTokenHandle(int handle, pc_token_t *pc_toke
 		return 0;
 
 	ret = PC_ReadToken(sourceFiles[handle], &token);
-	strcpy(pc_token->string, token.string);
+	strlcpy(pc_token->string, token.string, sizeof(pc_token->string));
 	pc_token->type = token.type;
 	pc_token->subtype = token.subtype;
 	pc_token->intvalue = token.intvalue;
@@ -3311,7 +3311,7 @@ int PC_SourceFileAndLine(int handle, char *filename, i
 	if (!sourceFiles[handle])
 		return qfalse;
 
-	strcpy(filename, sourceFiles[handle]->filename);
+	strlcpy(filename, sourceFiles[handle]->filename, sizeof(filename));
 	if (sourceFiles[handle]->scriptstack)
 		*line = sourceFiles[handle]->scriptstack->line;
 	else
