$OpenBSD$

strlcat

Index: codemp/game/NPC_stats.c
--- codemp/game/NPC_stats.c.orig
+++ codemp/game/NPC_stats.c
@@ -402,7 +402,7 @@ void SpewDebugStuffToFile(animation_t *anims)
 
 	while (i < MAX_ANIMATIONS)
 	{
-		strcat(BGPAFtext, va("%i %i\n", i, anims[i].frameLerp));
+		strlcat(BGPAFtext, va("%i %i\n", i, anims[i].frameLerp), sizeof(BPGAFtext));
 		i++;
 	}
 
@@ -565,14 +565,14 @@ void NPC_PrecacheWeapons( team_t playerTeam, int spawn
 
 			char weaponModel[64];
 
-			strcpy (weaponModel, weaponData[curWeap].weaponMdl);
+			strlcpy (weaponModel, weaponData[curWeap].weaponMdl, sizeof(weaponModel));
 			if (char *spot = strstr(weaponModel, ".md3") ) {
 				*spot = 0;
 				spot = strstr(weaponModel, "_w");//i'm using the in view weapon array instead of scanning the item list, so put the _w back on
 				if (!spot) {
-					strcat (weaponModel, "_w");
+					strlcat (weaponModel, "_w", sizeof(weaponModel));
 				}
-				strcat (weaponModel, ".glm");	//and change to ghoul2
+				strlcat (weaponModel, ".glm", sizeof(weaponModel));	//and change to ghoul2
 			}
 			trap->G2API_PrecacheGhoul2Model( weaponModel ); // correct way is item->world_model
 		}
@@ -603,7 +603,7 @@ void NPC_Precache ( gentity_t *spawner )
 	{//sorry, can't precache a random just yet
 		return;
 	}
-	strcpy(customSkin,"default");
+	strlcpy(customSkin,"default", sizeof(customSkin));
 
 	p = NPCParms;
 	Com_sprintf( sessionName, sizeof(sessionName), "NPC_Precache(%s)", spawner->NPC_type );
@@ -848,7 +848,7 @@ void NPC_Precache ( gentity_t *spawner )
 			Com_sprintf(modelName, sizeof(modelName), "models/players/%s/model.glm", playerModel);
 			if (customSkin[0])
 			{ //append it after a *
-				strcat( modelName, va("*%s", customSkin) );
+				strlcat( modelName, va("*%s", customSkin) , sizeof(modelName));
 			}
 
 			G_ModelIndex(modelName);
@@ -989,7 +989,7 @@ qboolean NPC_ParseParms( const char *NPCName, gentity_
 	VectorSet(playerMins, -15, -15, DEFAULT_MINS_2);
 	VectorSet(playerMaxs, 15, 15, DEFAULT_MAXS_2);
 
-	strcpy(customSkin,"default");
+	strlcpy(customSkin,"default", sizeof(customSkin));
 	if ( !NPCName || !NPCName[0])
 	{
 		NPCName = "Player";
@@ -2670,7 +2670,7 @@ qboolean NPC_ParseParms( const char *NPCName, gentity_
 				}
 
 				saberName = (char *)BG_TempAlloc(4096);//G_NewString( value );
-				strcpy(saberName, value);
+				strlcpy(saberName, value, sizeof(saberName));
 
 				WP_SaberParseParms( saberName, &NPC->client->saber[0] );
 				npcSaber1 = G_ModelIndex(va("@%s", saberName));
@@ -2690,7 +2690,7 @@ qboolean NPC_ParseParms( const char *NPCName, gentity_
 				if ( !(NPC->client->saber[0].saberFlags&SFL_TWO_HANDED) )
 				{//can't use a second saber if first one is a two-handed saber...?
 					char *saberName = (char *)BG_TempAlloc(4096);//G_NewString( value );
-					strcpy(saberName, value);
+					strlcpy(saberName, value, sizeof(saberName));
 
 					WP_SaberParseParms( saberName, &NPC->client->saber[1] );
 					if ( (NPC->client->saber[1].saberFlags&SFL_TWO_HANDED) )
@@ -3512,13 +3512,13 @@ Ghoul2 Insert Start
 
 		if (!customSkin[0])
 		{
-			strcpy(customSkin, "default");
+			strlcpy(customSkin, "default", sizeof(customSkin));
 		}
 
 		if ( NPC->client && NPC->client->NPC_class == CLASS_VEHICLE )
 		{ //vehicles want their names fed in as models
 			//we put the $ in front to indicate a name and not a model
-			strcpy(playerModel, va("$%s", NPCName));
+			strlcpy(playerModel, va("$%s", NPCName), sizeof(playerModel));
 		}
 		SetupGameGhoul2Model(NPC, playerModel, customSkin);
 
@@ -3598,8 +3598,8 @@ void NPC_LoadParms( void )
 
 			len = COM_Compress( npcParseBuffer );
 
-			strcat( marker, npcParseBuffer );
-			strcat(marker, "\n");
+			strlcat( marker, npcParseBuffer , sizeof(marker));
+			strlcat(marker, "\n", sizeof(marker));
 			len++;
 			trap->FS_Close(f);
 
