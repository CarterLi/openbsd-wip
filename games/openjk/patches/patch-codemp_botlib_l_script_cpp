$OpenBSD$

strlcat etc

Index: codemp/botlib/l_script.cpp
--- codemp/botlib/l_script.cpp.orig
+++ codemp/botlib/l_script.cpp
@@ -963,12 +963,12 @@ int PS_ExpectTokenType(script_t *script, int type, int
 
 	if (token->type != type)
 	{
-		strcpy(str, "");
-		if (type == TT_STRING) strcpy(str, "string");
-		if (type == TT_LITERAL) strcpy(str, "literal");
-		if (type == TT_NUMBER) strcpy(str, "number");
-		if (type == TT_NAME) strcpy(str, "name");
-		if (type == TT_PUNCTUATION) strcpy(str, "punctuation");
+		strlcpy(str, "", sizeof(str));
+		if (type == TT_STRING) strlcpy(str, "string", sizeof(str));
+		if (type == TT_LITERAL) strlcpy(str, "literal", sizeof(str));
+		if (type == TT_NUMBER) strlcpy(str, "number", sizeof(str));
+		if (type == TT_NAME) strlcpy(str, "name", sizeof(str));
+		if (type == TT_PUNCTUATION) strlcpy(str, "punctuation", sizeof(str));
 		ScriptError(script, "expected a %s, found %s", str, token->string);
 		return 0;
 	} //end if
@@ -976,15 +976,15 @@ int PS_ExpectTokenType(script_t *script, int type, int
 	{
 		if ((token->subtype & subtype) != subtype)
 		{
-			strcpy(str, "");
-			if (subtype & TT_DECIMAL) strcpy(str, "decimal");
-			if (subtype & TT_HEX) strcpy(str, "hex");
-			if (subtype & TT_OCTAL) strcpy(str, "octal");
-			if (subtype & TT_BINARY) strcpy(str, "binary");
-			if (subtype & TT_LONG) strcat(str, " long");
-			if (subtype & TT_UNSIGNED) strcat(str, " unsigned");
-			if (subtype & TT_FLOAT) strcat(str, " float");
-			if (subtype & TT_INTEGER) strcat(str, " integer");
+			strlcpy(str, "", sizeof(str));
+			if (subtype & TT_DECIMAL) strlcpy(str, "decimal", sizeof(str));
+			if (subtype & TT_HEX) strlcpy(str, "hex", sizeof(str));
+			if (subtype & TT_OCTAL) strlcpy(str, "octal", sizeof(str));
+			if (subtype & TT_BINARY) strlcpy(str, "binary", sizeof(str));
+			if (subtype & TT_LONG) strlcat(str, " long", sizeof(str));
+			if (subtype & TT_UNSIGNED) strlcat(str, " unsigned", sizeof(str));
+			if (subtype & TT_FLOAT) strlcat(str, " float", sizeof(str));
+			if (subtype & TT_INTEGER) strlcat(str, " integer", sizeof(str));
 			ScriptError(script, "expected %s, found %s", str, token->string);
 			return 0;
 		} //end if
