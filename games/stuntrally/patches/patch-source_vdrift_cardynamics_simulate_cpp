$OpenBSD$
--- source/vdrift/cardynamics_simulate.cpp.orig	Mon Jul 15 03:07:00 2013
+++ source/vdrift/cardynamics_simulate.cpp	Mon Jul 15 03:07:35 2013
@@ -100,8 +100,8 @@ MATHVECTOR<Dbl,3> CARDYNAMICS::UpdateSuspension(int i,
 	                    suspension[WHEEL_POSITION(otheri)].GetDisplacement() );
 
 	//suspension[WHEEL_POSITION(i)].SetAntiRollInfo(antirollforce);
-	if (isnan( antirollforce ))  antirollforce = 0.f;  //crash dyn obj-
-	assert(!isnan( antirollforce ));
+	if (std::isnan( antirollforce ))  antirollforce = 0.f;  //crash dyn obj-
+	assert(!std::isnan( antirollforce ));
 
 	//find the vector direction to apply the suspension force
 #ifdef SUSPENSION_FORCE_DIRECTION
@@ -221,7 +221,7 @@ void CARDYNAMICS::ApplyWheelTorque(Dbl dt, Dbl drive_t
 	//set wheel torque due to tire rolling resistance
 	Dbl rolling_resistance = wheel.GetRollingResistance(wheel.GetAngularVelocity(), wheel_contact[i].GetSurface().rollingResist);
 	Dbl tire_rolling_resistance_torque = - rolling_resistance * wheel.GetRadius();  //- tire_friction_torque;
-	//assert(!isnan(tire_rolling_resistance_torque));
+	//assert(!std::isnan(tire_rolling_resistance_torque));
 	
 		//LogO(fToStr(wheel_torque, 4,9)+" r "+fToStr(tire_rolling_resistance_torque, 4,9));
 	wheel.SetTorque(wheel_torque*0.5 + tire_rolling_resistance_torque);
@@ -283,7 +283,7 @@ void CARDYNAMICS::ApplyClutchTorque(Dbl engine_drag, D
 void CARDYNAMICS::CalculateDriveTorque(Dbl * wheel_drive_torque, Dbl clutch_torque)
 {
 	Dbl driveshaft_torque = transmission.GetTorque( clutch_torque );
-	assert( !isnan(driveshaft_torque) );
+	assert( !std::isnan(driveshaft_torque) );
 
 	for (int i = 0; i < WHEEL_POSITION_SIZE; ++i)
 		wheel_drive_torque[i] = 0;
@@ -311,7 +311,7 @@ void CARDYNAMICS::CalculateDriveTorque(Dbl * wheel_dri
 		wheel_drive_torque[REAR_RIGHT] = diff_rear.GetSide2Torque();
 	}
 
-	for (int i = 0; i < WHEEL_POSITION_SIZE; ++i)  assert(!isnan( wheel_drive_torque[WHEEL_POSITION(i)] ));
+	for (int i = 0; i < WHEEL_POSITION_SIZE; ++i)  assert(!std::isnan( wheel_drive_torque[WHEEL_POSITION(i)] ));
 }
 
 Dbl CARDYNAMICS::CalculateDriveshaftSpeed()
@@ -321,7 +321,7 @@ Dbl CARDYNAMICS::CalculateDriveshaftSpeed()
 	Dbl whFR = wheel[FRONT_RIGHT].GetAngularVelocity();
 	Dbl whRL = wheel[REAR_LEFT].GetAngularVelocity();
 	Dbl whRR = wheel[REAR_RIGHT].GetAngularVelocity();
-	for (int i = 0; i < 4; ++i)  assert(!isnan( wheel[WHEEL_POSITION(i)].GetAngularVelocity() ));
+	for (int i = 0; i < 4; ++i)  assert(!std::isnan( wheel[WHEEL_POSITION(i)].GetAngularVelocity() ));
 
 	if (drive == RWD)
 		driveshaft_speed = diff_rear.CalculateDriveshaftSpeed( whRL, whRR );
@@ -341,7 +341,7 @@ Dbl CARDYNAMICS::CalculateDriveshaftRPM() const
 	Dbl whFR = wheel[FRONT_RIGHT].GetAngularVelocity();
 	Dbl whRL = wheel[REAR_LEFT].GetAngularVelocity();
 	Dbl whRR = wheel[REAR_RIGHT].GetAngularVelocity();
-	for (int i = 0; i < 4; ++i)  assert(!isnan( wheel[WHEEL_POSITION(i)].GetAngularVelocity() ));
+	for (int i = 0; i < 4; ++i)  assert(!std::isnan( wheel[WHEEL_POSITION(i)].GetAngularVelocity() ));
 	if (drive == RWD)
 		driveshaft_speed = diff_rear.GetDriveshaftSpeed( whRL, whRR );
 	else if (drive == FWD)
@@ -361,7 +361,7 @@ Dbl CARDYNAMICS::GetSpeedMPS() const
 	Dbl whFR = wheel[FRONT_RIGHT].GetAngularVelocity();
 	Dbl whRL = wheel[REAR_LEFT].GetAngularVelocity();
 	Dbl whRR = wheel[REAR_RIGHT].GetAngularVelocity();
-	for (int i = 0; i < 4; ++i)  assert (!isnan(wheel[WHEEL_POSITION(i)].GetAngularVelocity()));
+	for (int i = 0; i < 4; ++i)  assert (!std::isnan(wheel[WHEEL_POSITION(i)].GetAngularVelocity()));
 
 	if (drive == RWD)
 		return (whRL+whRR) * 0.5 * wheel[REAR_LEFT].GetRadius();
