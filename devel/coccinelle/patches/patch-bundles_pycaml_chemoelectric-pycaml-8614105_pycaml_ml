$OpenBSD$
--- bundles/pycaml/chemoelectric-pycaml-8614105/pycaml.ml.orig	Sat Oct  1 02:05:57 2011
+++ bundles/pycaml/chemoelectric-pycaml-8614105/pycaml.ml	Tue Oct  9 13:52:33 2012
@@ -178,9 +178,11 @@ IFDEF PYMAJOR2 THEN
 external pymethod_class : pyobject -> pyobject = "PyMethod_Class_wrapper"
 END
 external pymodule_getdict : pyobject -> pyobject = "PyModule_GetDict_wrapper"
+IFDEF PYMAJOR3 THEN
 external pyunicode_asutf8string : pyobject -> pyobject = "PyUnicode_AsUTF8String_wrapper"
 external pyunicode_asutf16string : pyobject -> pyobject = "PyUnicode_AsUTF16String_wrapper"
 external pyunicode_asutf32string : pyobject -> pyobject = "PyUnicode_AsUTF32String_wrapper"
+END
 external pyobject_repr : pyobject -> pyobject = "PyObject_Repr_wrapper"
 external pyimport_reloadmodule : pyobject -> pyobject = "PyImport_ReloadModule_wrapper"
 external pyimport_import : pyobject -> pyobject = "PyImport_Import_wrapper"
@@ -273,7 +275,9 @@ external pymapping_check : pyobject -> int = "PyMappin
 external pymapping_size : pyobject -> int = "PyMapping_Size_wrapper"
 external pymapping_length : pyobject -> int = "PyMapping_Length_wrapper"
 external pyiter_check : pyobject -> int = "PyIter_Check_wrapper"
+IFDEF PYMAJOR3 THEN
 external pyunicode_getsize : pyobject -> int = "PyUnicode_GetSize_wrapper"
+END
 
 (* Type19 *)
 external pyobject_hasattr : (pyobject * pyobject) -> int = "PyObject_HasAttr_wrapper"
@@ -326,7 +330,11 @@ external pymodule_getname : pyobject -> string = "PyMo
 (* Type28 *)
 external pyimport_addmodule : string -> pyobject = "PyImport_AddModule_wrapper"
 external pybytes_fromstring : string -> pyobject = "PyBytes_FromString_wrapper"
+IFDEF PYMAJOR2 THEN
 external pystring_fromstring : string -> pyobject = "PyBytes_FromString_wrapper" (* Legacy support *)
+ELSE
+external pystring_fromstring : string -> pyobject = "PyUnicode_FromString_wrapper" (* Legacy support *)
+ENDIF
 external pymodule_new : string -> pyobject = "PyModule_New_wrapper"
 external pyimport_importmodule : string -> pyobject = "PyImport_ImportModule_wrapper"
 
@@ -380,15 +388,11 @@ external pysequence_setitem : (pyobject * int * pyobje
 
 (* Type42 *)
 external pyslice_new : (pyobject * pyobject * pyobject) -> pyobject = "PySlice_New_wrapper"
-IFDEF PYMAJOR2 THEN
 external pyclass_new : (pyobject * pyobject * pyobject) -> pyobject = "PyClass_New_wrapper"
+IFDEF PYMAJOR2 THEN
 external pyinstance_new : (pyobject * pyobject * pyobject) -> pyobject = "PyInstance_New_wrapper"
 END
-IFDEF PYMAJOR2 THEN
 external pymethod_new : (pyobject * pyobject * pyobject) -> pyobject = "PyMethod_New_wrapper"
-ELSE
-external pymethod_new : (pyobject * pyobject) -> pyobject = "PyMethod_New_wrapper"
-END
 external pyeval_callobjectwithkeywords : (pyobject * pyobject * pyobject) -> pyobject = "PyEval_CallObjectWithKeywords_wrapper"
 external pynumber_power : (pyobject * pyobject * pyobject) -> pyobject = "PyNumber_Power_wrapper"
 external pynumber_inplacepower : (pyobject * pyobject * pyobject) -> pyobject = "PyNumber_InPlacePower_wrapper"
@@ -432,19 +436,12 @@ external pysequence_setslice : (pyobject * int * int *
 external pysequence_delslice : (pyobject * int * int) -> int = "PySequence_DelSlice_wrapper"
 
 (* TypeUTF8Decoder *)
+IFDEF PYMAJOR3 THEN
 external pyunicode_decodeutf8 : (string * string option) -> pyobject = "PyUnicode_DecodeUTF8_wrapper"
+END
 
-(* TypeUTF16Decoder *)
-external pyunicode_decodeutf16 : (string * string option * int option) -> pyobject = "PyUnicode_DecodeUTF16_wrapper"
-external pyunicode_decodeutf32 : (string * string option * int option) -> pyobject = "PyUnicode_DecodeUTF32_wrapper"
-
 (*-----------------------------------------------------------------------*)
 
-external pyunicode_fromunicode : (int -> int) -> int -> pyobject = "PyUnicode_FromUnicode_wrapper"
-external pyunicode_asunicode   : pyobject -> int array = "PyUnicode_AsUnicode_wrapper"
-
-(*-----------------------------------------------------------------------*)
-
 external pytuple_fromarray : pyobject array -> pyobject = "pytuple_fromarray"
 let pytuple_fromsingle elt = pytuple_fromarray [| elt |] 
 let pytuple_empty = pytuple_fromarray [| |] 
@@ -959,6 +956,7 @@ let unpythonizing_function
   in
     work_fun
 
+IFDEF PYMAJOR3 THEN
 (* OCaml string encoded in UTF-8 --> Python 3 string type (= Python 2 unicode type) *)
 let pythonize_string s =
   pyunicode_decodeutf8(s, None)
@@ -976,6 +974,7 @@ let unpythonize_string =
             | BytesType   -> pybytes_asstringandsize s
             | _ -> assert false
     end
+END
 
 (* FIX: Maybe rewrite this as an unpythonizing_function. *)
 let python_interfaced_function
