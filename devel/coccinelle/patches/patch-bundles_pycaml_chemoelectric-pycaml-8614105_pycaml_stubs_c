$OpenBSD$
--- bundles/pycaml/chemoelectric-pycaml-8614105/pycaml_stubs.c.orig	Sat Oct  1 02:05:57 2011
+++ bundles/pycaml/chemoelectric-pycaml-8614105/pycaml_stubs.c	Tue Oct  9 13:52:33 2012
@@ -789,9 +789,11 @@ Type14(PyModule_GetDict, pywrap)
 Type14(PyMethod_Class, pywrap)
 #endif
 
+#if PY_MAJOR_VERSION >= 3
 Type14(PyUnicode_AsUTF8String, pywrap_steal)
 Type14(PyUnicode_AsUTF16String, pywrap_steal)
 Type14(PyUnicode_AsUTF32String, pywrap_steal)
+#endif
 Type14(PyObject_Repr, pywrap_steal)
 Type14(PyImport_ReloadModule, pywrap_steal)
 Type14(PyImport_Import, pywrap_steal)
@@ -938,7 +940,9 @@ Type18(PyMapping_Check)
 Type18(PyMapping_Size)
 Type18(PyMapping_Length)
 Type18(PyIter_Check)
+#if PY_MAJOR_VERSION >= 3
 Type18(PyUnicode_GetSize)
+#endif
 
 /*-----------------------------------------------------------------------*/
 
@@ -1096,6 +1100,9 @@ Type26(PyModule_GetFilename, const char)
 Type28(PyImport_AddModule, pywrap)
 
 Type28(PyBytes_FromString, pywrap_steal)
+#if PY_MAJOR_VERSION >= 3
+Type28(PyUnicode_FromString, pywrap_steal)
+#endif
 Type28(PyModule_New, pywrap_steal)
 Type28(PyImport_ImportModule, pywrap_steal)
 
@@ -1300,7 +1307,7 @@ Type41(PyTuple_SetItem, 1)
         CAMLparam1(py_args);                                    \
                                                                 \
         PyObject *new_obj = func(pyunwrap(Field(py_args, 0)),   \
-                                 pyunwrap(Field(py_args, 1)));  \
+                                 pyunwrap(Field(py_args, 2)));  \
         CAMLreturn(wrap_obj(new_obj));                          \
     }
 #endif
@@ -1313,6 +1320,22 @@ Type42(PyNumber_InPlacePower, pywrap_steal)
 #if PY_MAJOR_VERSION <= 2
 Type42(PyClass_New, pywrap_steal)
 Type42(PyInstance_New, pywrap_steal)
+#else
+/* Calls the builtin-function: type(name,bases,dict), with the
+ * name of the class, tuples of parent names, and dictionary
+ * with initializations of fields.
+ */
+CAMLprim value PyClass_New_wrapper(value py_args)
+{
+  CAMLparam1(py_args);
+  PyObject *bases = pyunwrap(Field(py_args, 0));
+  PyObject *dict = pyunwrap(Field(py_args, 1));
+  PyObject *name = pyunwrap(Field(py_args, 2));
+  PyObject *new_obj = 
+    PyObject_CallFunctionObjArgs
+    ( (PyObject *) &PyType_Type, name, bases, dict, NULL);
+  CAMLreturn(pywrap_steal(new_obj));
+}
 #endif
 
 Type42a(PyMethod_New, pywrap_steal)
@@ -1493,7 +1516,7 @@ Type51(PyImport_ImportModuleEx, pywrap_steal)
       Type54(PySequence_DelSlice)
 
 /*-----------------------------------------------------------------------*/
-
+#if PY_MAJOR_VERSION >= 3
 #define TypeUTF8Decoder(func, wrap_obj)                                 \
     CAMLprim value func##_wrapper(value py_args)                        \
     {                                                                   \
@@ -1513,9 +1536,9 @@ Type51(PyImport_ImportModuleEx, pywrap_steal)
     }
 
 TypeUTF8Decoder(PyUnicode_DecodeUTF8, pywrap_steal)
-
+#endif
 /*-----------------------------------------------------------------------*/
-
+#if 0
 #define TypeUTF16Decoder(func, wrap_obj)                                \
     CAMLprim value func##_wrapper(value py_args)                        \
     {                                                                   \
@@ -1589,7 +1612,7 @@ CAMLprim value PyUnicode_AsUnicode_wrapper(value uni)
 
     CAMLreturn(result);
 }
-
+#endif
 /*-----------------------------------------------------------------------*/
 
 /* Value -> Pyobject */
