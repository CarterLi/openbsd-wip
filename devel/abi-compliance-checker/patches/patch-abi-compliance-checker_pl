$OpenBSD$
Tweaks:
  - Avoid changing order of both headers and libraries paths.
  - Avoid calling system() with command line as single scalar.
  - Show more stderr output from tools being called.
  - Avoid using non-portable "-regex" option to find(1).
  - Use "ectags" instead of "ctags" (OpenBSD-specific).
  - Do not even try to use C++0x mode (OpenBSD-specific).
--- abi-compliance-checker.pl.orig	Fri Nov 23 15:59:42 2012
+++ abi-compliance-checker.pl	Fri Nov 23 23:57:10 2012
@@ -54,6 +54,7 @@ Getopt::Long::Configure ("posix_default", "no_ignore_c
 use File::Path qw(mkpath rmtree);
 use File::Temp qw(tempdir);
 use File::Copy qw(copy move);
+use IPC::Run3;
 use Cwd qw(abs_path cwd);
 use Data::Dumper;
 use Config;
@@ -1449,7 +1450,7 @@ my %RegisteredObject_Dirs;
 
 # System Objects
 my %SystemObjects;
-my %DefaultLibPaths;
+my @DefaultLibPaths;
 my %DyLib_DefaultPath;
 
 # System Headers
@@ -1890,6 +1891,7 @@ sub readDescriptor($$)
         $Path = path_format($Path, $OSgroup);
         $SystemPaths{"include"}{$Path}=1;
     }
+    $SystemPaths{"lib"} //= [];
     foreach my $Path (split(/\s*\n\s*/, parseTag(\$Content, "search_libs")))
     {
         $Path = clean_path($Path);
@@ -1897,7 +1899,7 @@ sub readDescriptor($$)
             exitStatus("Access_Error", "can't access directory \'$Path\'");
         }
         $Path = path_format($Path, $OSgroup);
-        $SystemPaths{"lib"}{$Path}=1;
+        push(@{$SystemPaths{"lib"}}, $Path);
     }
     foreach my $Path (split(/\s*\n\s*/, parseTag(\$Content, "tools")))
     {
@@ -1912,6 +1914,7 @@ sub readDescriptor($$)
     if(my $Prefix = parseTag(\$Content, "cross_prefix")) {
         $CrossPrefix = $Prefix;
     }
+    $Descriptor{$LibVersion}{"IncludePaths"} //= [];
     foreach my $Path (split(/\s*\n\s*/, parseTag(\$Content, "include_paths")))
     {
         $Path=clean_path($Path);
@@ -1919,8 +1922,9 @@ sub readDescriptor($$)
             exitStatus("Access_Error", "can't access directory \'$Path\'");
         }
         $Path = path_format($Path, $OSgroup);
-        $Descriptor{$LibVersion}{"IncludePaths"}{$Path} = 1;
+        push(@{$Descriptor{$LibVersion}{"IncludePaths"}}, $Path);
     }
+    $Descriptor{$LibVersion}{"AddIncludePaths"} //= [];
     foreach my $Path (split(/\s*\n\s*/, parseTag(\$Content, "add_include_paths")))
     {
         $Path=clean_path($Path);
@@ -1928,7 +1932,7 @@ sub readDescriptor($$)
             exitStatus("Access_Error", "can't access directory \'$Path\'");
         }
         $Path = path_format($Path, $OSgroup);
-        $Descriptor{$LibVersion}{"AddIncludePaths"}{$Path} = 1;
+        push(@{$Descriptor{$LibVersion}{"AddIncludePaths"}}, $Path);
     }
     foreach my $Path (split(/\s*\n\s*/, parseTag(\$Content, "skip_include_paths")))
     {
@@ -5720,11 +5724,13 @@ sub sortHeaders($$)
 sub searchForHeaders($)
 {
     my $LibVersion = $_[0];
+    $Add_Include_Paths{$LibVersion} //= [];
+    $Include_Paths{$LibVersion} //= [];
     # gcc standard include paths
     find_gcc_cxx_headers($LibVersion);
     # processing header paths
-    foreach my $Path (keys(%{$Descriptor{$LibVersion}{"IncludePaths"}}),
-    keys(%{$Descriptor{$LibVersion}{"AddIncludePaths"}}))
+    foreach my $Path (@{$Descriptor{$LibVersion}{"IncludePaths"}},
+        @{$Descriptor{$LibVersion}{"AddIncludePaths"}})
     {
         my $IPath = $Path;
         if($SystemRoot)
@@ -5743,15 +5749,15 @@ sub searchForHeaders($)
         {
             $Path = get_abs_path($Path);
             register_directory($Path, 0, $LibVersion);
-            if($Descriptor{$LibVersion}{"AddIncludePaths"}{$IPath}) {
-                $Add_Include_Paths{$LibVersion}{$Path} = 1;
+            if(grep {$IPath eq $_} @{$Descriptor{$LibVersion}{"AddIncludePaths"}}) {
+                push @{$Add_Include_Paths{$LibVersion}}, $Path;
             }
             else {
-                $Include_Paths{$LibVersion}{$Path} = 1;
+                push @{$Include_Paths{$LibVersion}}, $Path;
             }
         }
     }
-    if(keys(%{$Include_Paths{$LibVersion}})) {
+    if(@{$Include_Paths{$LibVersion}}) {
         $INC_PATH_AUTODETECT{$LibVersion} = 0;
     }
     # registering directories
@@ -6977,6 +6983,7 @@ sub get_HeaderDeps($$)
         return @{$Cache{"get_HeaderDeps"}{$LibVersion}{$AbsPath}};
     }
     my %IncDir = ();
+    my @DirList;
     detect_recursive_includes($AbsPath, $LibVersion);
     foreach my $HeaderPath (keys(%{$RecursiveIncludes{$LibVersion}{$AbsPath}}))
     {
@@ -7030,25 +7037,17 @@ sub get_HeaderDeps($$)
             { # do NOT include /usr/include/{sys,bits}
                 next;
             }
-            $IncDir{$Dep}=1;
+            if(!$IncDir{$Dep})
+            { # Do not include twice; avoid using bare hash to keep order.
+                $IncDir{$Dep}=1;
+                push(@DirList, $Dep);
+            }
         }
     }
-    $Cache{"get_HeaderDeps"}{$LibVersion}{$AbsPath} = sortIncPaths([keys(%IncDir)], $LibVersion);
+    $Cache{"get_HeaderDeps"}{$LibVersion}{$AbsPath} = @DirList;
     return @{$Cache{"get_HeaderDeps"}{$LibVersion}{$AbsPath}};
 }
 
-sub sortIncPaths($$)
-{
-    my ($ArrRef, $LibVersion) = @_;
-    if(not $ArrRef or $#{$ArrRef}<0) {
-        return $ArrRef;
-    }
-    @{$ArrRef} = sort {$b cmp $a} @{$ArrRef};
-    @{$ArrRef} = sort {get_depth($a)<=>get_depth($b)} @{$ArrRef};
-    @{$ArrRef} = sort {sortDeps($b, $a, $LibVersion)} @{$ArrRef};
-    return $ArrRef;
-}
-
 sub sortDeps($$$)
 {
     if($Header_Dependency{$_[2]}{$_[0]}
@@ -7376,12 +7375,12 @@ sub checkCTags($)
     if(not $Path) {
         return;
     }
-    my $CTags = get_CmdPath("ctags");
+    my $CTags = get_CmdPath("ectags");
     if(not $CTags) {
         return;
     }
     my $Out = $TMP_DIR."/ctags.txt";
-    system("$CTags --c-kinds=pxn -f \"$Out\" \"$Path\"");
+    system { $CTags } ($CTags, "--c-kinds=pxn", "-f", $Out, $Path);
     if($Debug) {
         copy($Out, $DEBUG_PATH{$Version}."/ctags.txt");
     }
@@ -7743,12 +7742,13 @@ sub getDump()
             and ($Errors=~/\Q-std=c++0x\E/
             or $Errors=~/is not a class or namespace/))
             { # c++0x: enum class
-                $Cpp0xMode{$Version}=-1;
-                printMsg("INFO", "Enabling c++0x mode");
-                resetLogging($Version);
-                $TMP_DIR = tempdir(CLEANUP=>1);
-                $CompilerOptions{$Version} .= " -std=c++0x";
-                return getDump();
+                printMsg("ERROR", "Probably c++0x construction detected");
+#                $Cpp0xMode{$Version}=-1;
+#                printMsg("INFO", "Enabling c++0x mode");
+#                resetLogging($Version);
+#                $TMP_DIR = tempdir(CLEANUP=>1);
+#                $CompilerOptions{$Version} .= " -std=c++0x";
+#                return getDump();
             }
             elsif($MinGWMode{$Version}==1)
             { # disable MinGW mode and try again
@@ -7817,21 +7817,14 @@ sub getIncPaths(@)
                 $Includes{$Dir}=1;
             }
         }
-        foreach my $Dir (keys(%{$Add_Include_Paths{$Version}}))
-        { # added by user
-            next if($Includes{$Dir});
-            push(@IncPaths, $Dir);
-        }
-        foreach my $Dir (@{sortIncPaths([keys(%Includes)], $Version)}) {
-            push(@IncPaths, $Dir);
-        }
+        @IncPaths = (
+           grep { !exists $Includes{$_} } @{$Add_Include_Paths{$Version}},
+           grep { exists $Includes{$_} } @HeaderPaths
+           );
     }
     else
     { # user-defined paths
-        foreach my $Dir (sort {get_depth($a)<=>get_depth($b)}
-        sort {$b cmp $a} keys(%{$Include_Paths{$Version}})) {
-            push(@IncPaths, $Dir);
-        }
+        @IncPaths = @{$Include_Paths{$Version}};
     }
     return \@IncPaths;
 }
@@ -7850,11 +7843,11 @@ sub callPreprocessor($$$)
     return $Out;
 }
 
-sub cmd_find($$$$)
+sub cmd_find($$$$;$)
 { # native "find" is much faster than File::Find (~6x)
   # also the File::Find doesn't support --maxdepth N option
   # so using the cross-platform wrapper for the native one
-    my ($Path, $Type, $Name, $MaxDepth) = @_;
+    my ($Path, $Type, $Name, $MaxDepth, $UseRegex) = @_;
     return () if(not $Path or not -e $Path);
     if($OSgroup eq "windows")
     {
@@ -7915,27 +7908,32 @@ sub cmd_find($$$$)
         { # for directories that are symlinks
             $Path.="/";
         }
-        my $Cmd = $FindCmd." \"$Path\"";
+        my @Cmd = ($FindCmd, "-f", $Path, '--');
         if($MaxDepth) {
-            $Cmd .= " -maxdepth $MaxDepth";
+            push(@Cmd, "-maxdepth", $MaxDepth);
         }
         if($Type) {
-            $Cmd .= " -type $Type";
+            push(@Cmd, "-type", $Type);
         }
-        if($Name)
-        { # file name
-            if($Name=~/\]/) {
-                $Cmd .= " -regex \"$Name\"";
-            }
-            else {
-                $Cmd .= " -name \"$Name\"";
-            }
+        if($Name and not $UseRegex)
+        { # file name glob
+            push(@Cmd, "-name", $Name);
         }
-        my $Res = `$Cmd 2>\"$TMP_DIR/null\"`;
-        if($?) {
-            printMsg("ERROR", "problem with \'find\' utility ($?): $!");
+        my (@Files, $Res);
+        eval { $Res = run3(\@Cmd, undef, \@Files); };
+        if($@) {
+            printMsg("ERROR", "problem with \'find\' utility: $@");
+            return ();
+        } elsif(!$Res) {
+            printMsg("ERROR", "problem with \'find\' utility: $!");
+            return ();
         }
-        return split(/\n/, $Res);
+        chomp @Files;
+        if($Name and $UseRegex)
+        { # file name regex
+            @Files = grep { /^${Name}$/ } @Files;
+        }
+        return @Files;
     }
 }
 
@@ -13719,6 +13717,13 @@ sub esc($)
     return $Str;
 }
 
+sub globesc($)
+{
+    my $Str = $_[0];
+    $Str=~s/([\[\]*?])/\\$1/g;
+    return $Str;
+}
+
 sub readLineNum($$)
 {
     my ($Path, $Num) = @_;
@@ -16645,7 +16650,7 @@ sub get_LibPath_I($$)
     { # ldconfig default paths
         return $DefaultPath;
     }
-    foreach my $Dir (sort keys(%DefaultLibPaths), sort keys(%{$SystemPaths{"lib"}}))
+    foreach my $Dir (@DefaultLibPaths, @{$SystemPaths{"lib"}})
     { # search in default linker directories
       # and then in all system paths
         if(-f $Dir."/".$Name) {
@@ -17032,7 +17037,7 @@ sub detectSystemHeaders()
             }
         }
     }
-    foreach my $DevelPath (keys(%{$SystemPaths{"lib"}}))
+    foreach my $DevelPath (@{$SystemPaths{"lib"}})
     { # search for config headers in the /usr/lib
         next if(not -d $DevelPath);
         foreach (cmd_find($DevelPath,"f","",""))
@@ -17050,7 +17055,7 @@ sub detectSystemHeaders()
 
 sub detectSystemObjects()
 {
-    foreach my $DevelPath (keys(%{$SystemPaths{"lib"}}))
+    foreach my $DevelPath (@{$SystemPaths{"lib"}})
     {
         next if(not -d $DevelPath);
         foreach my $Path (find_libs($DevelPath,"",""))
@@ -17156,7 +17161,7 @@ sub skipHeader_I($$)
 sub registerObject_Dir($$)
 {
     my ($Dir, $LibVersion) = @_;
-    if($SystemPaths{"lib"}{$Dir})
+    if(grep {$_ eq $Dir} @{$SystemPaths{"lib"}})
     { # system directory
         return;
     }
@@ -17231,10 +17236,10 @@ sub getSOPaths_Dest($$)
     {
         $Dest=~s/[\/\\]+\Z//g;
         my %Libs = ();
-        if($SystemPaths{"lib"}{$Dest})
+        if(grep { $_ eq $Dest } @{$SystemPaths{"lib"}})
         { # you have specified /usr/lib as the search directory (<libs>) in the XML descriptor
           # and the real name of the library by -l option (bz2, stdc++, Xaw, ...)
-            foreach my $Path (cmd_find($Dest,"","*".esc($TargetLibraryName)."*\.$LIB_EXT*",2))
+            foreach my $Path (cmd_find($Dest,"","*".globesc($TargetLibraryName)."*.$LIB_EXT*",2))
             { # all files and symlinks that match the name of a library
                 if(get_filename($Path)=~/\A(|lib)\Q$TargetLibraryName\E[\d\-]*\.$LIB_EXT[\d\.]*\Z/i)
                 {
@@ -17811,7 +17816,7 @@ sub find_libs($$$)
 {
     my ($Path, $Type, $MaxDepth) = @_;
     # FIXME: correct the search pattern
-    return cmd_find($Path, $Type, ".*\\.$LIB_EXT\[0-9.]*", $MaxDepth);
+    return cmd_find($Path, $Type, ".*\\.$LIB_EXT\[0-9.]*", $MaxDepth, 1);
 }
 
 sub createDescriptor($$)
@@ -18007,7 +18012,7 @@ sub detect_default_paths($)
       # do NOT search for systems headers
         $HSearch = 0;
     }
-    if(keys(%{$SystemPaths{"lib"}}))
+    if(@{$SystemPaths{"lib"}})
     { # <search_headers> section of the XML descriptor
       # do NOT search for systems headers
         $LSearch = 0;
@@ -18093,7 +18098,7 @@ sub detect_default_paths($)
             foreach my $Path (split(/:|;/, $ENV{"BELIBRARIES"}), split(/:|;/, $ENV{"LIBRARY_PATH"}))
             {
                 if(is_abs($Path)) {
-                    $DefaultLibPaths{$Path} = 1;
+                    push(@DefaultLibPaths, $Path);
                 }
             }
         }
@@ -18111,12 +18116,10 @@ sub detect_default_paths($)
                     next;
                 }
                 $DyLib_DefaultPath{$Name} = $LPaths->{$Name};
-                $DefaultLibPaths{get_dirname($LPaths->{$Name})} = 1;
+                push(@DefaultLibPaths, get_dirname($LPaths->{$Name}));
             }
         }
-        foreach my $Path (keys(%DefaultLibPaths)) {
-            $SystemPaths{"lib"}{$Path} = $DefaultLibPaths{$Path};
-        }
+        push(@{$SystemPaths{"lib"}}, @DefaultLibPaths);
     }
     if($BSearch)
     {
@@ -18148,7 +18151,7 @@ sub detect_default_paths($)
             foreach my $Path (sort {$b=~/\/usr\/bin/ cmp $a=~/\/usr\/bin/}
             keys(%{$SystemPaths{"bin"}}))
             {
-                if(my @GCCs = cmd_find($Path, "", ".*/gcc-[0-9.]*", 1))
+                if(my @GCCs = cmd_find($Path, "", ".*/gcc-[0-9.]*", 1, 1))
                 { # select the latest version
                     @GCCs = sort {$b cmp $a} @GCCs;
                     if(check_gcc($GCCs[0], "3"))
