nose.config: INFO: Ignoring files matching ['^\\.', '^_', '^setup\\.py$']
[?1034h['-vvs', 'IPython.core']
ARGV 1-: ['-vvs', 'IPython.core']
Doctest: IPython.core.excolors.exception_colors ... ok
Doctest: IPython.core.interactiveshell ... ok
Doctest: IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache ... ok
Doctest: IPython.core.interactiveshell.InteractiveShell.complete ... ok
Doctest: IPython.core.interactiveshell.InteractiveShell.set_next_input ... ok
Doctest: IPython.core.interactiveshell.InteractiveShell.set_next_input ... ok
Doctest: IPython.core.magics.auto ... ok
Doctest: IPython.core.magics.basic ... ok
Doctest: IPython.core.magics.code ... ok
Doctest: IPython.core.magics.execution ... ok
Doctest: IPython.core.magics.history ... ok
Doctest: IPython.core.magics.namespace ... ok
Doctest: IPython.core.magics.osm ... ok
Doctest: IPython.core.magics.pylab ... ok
Doctest: IPython.core.oinspect.Inspector.pdoc ... ok
Doctest: IPython.core.oinspect.Inspector.pdoc ... ok
Failure: ValueError (unknown locale: en_US-UTF-8) ... ERROR
Check that IPython starts with non-ascii characters in the path. ... SKIP: Skipping test: test_unicode_cwd. This test is only applicable where we can use unicode in filenames.
Check that IPython starts with non-ascii characters in the IP dir. ... SKIP: Skipping test: test_unicode_ipdir. This test is only applicable where we can use unicode in filenames.
Doctest: IPython.core.tests.test_autocall.doctest_autocall ... ok
IPython.core.tests.test_compilerop.test_code_name ... ok
IPython.core.tests.test_compilerop.test_code_name2 ... ok
Test the compiler correctly compiles and caches inputs ... ok
IPython.core.tests.test_compilerop.test_cache_unicode ... ok
Test the compiler properly manages the cache. ... ok
test_delim_setting (IPython.core.tests.test_completer.CompletionSplitterTestCase) ... ok
Test with only spaces as split chars. ... ok
IPython.core.tests.test_completer.test_protect_filename ... ok
Basice line splitter test with default specs. ... ok
Test that errors from custom attribute completers are silenced. ... ok
IPython.core.tests.test_completer.test_unicode_completions ... ok
IPython.core.tests.test_completer.test_has_open_quotes1 ... ok
IPython.core.tests.test_completer.test_has_open_quotes2 ... ok
IPython.core.tests.test_completer.test_has_open_quotes3 ... ok
IPython.core.tests.test_completer.test_has_open_quotes4 ... ok
IPython.core.tests.test_completer.test_abspath_file_completions ... ok
IPython.core.tests.test_completer.test_local_file_completions ... ok
IPython.core.tests.test_completer.test_greedy_completions ... ok
IPython.core.tests.test_completer.test_omit__names ... ok
IPython.core.tests.test_completer.test_limit_to__all__False_ok ... ok
IPython.core.tests.test_completer.test_limit_to__all__True_ok ... ok
IPython.core.tests.test_completer.test_get__all__entries_ok ... ok
IPython.core.tests.test_completer.test_get__all__entries_no__all__ok ... ok
IPython.core.tests.test_completer.test_func_kw_completions ... ok
IPython.core.tests.test_completer.test_default_arguments_from_docstring ... ok
IPython.core.tests.test_completer.test_line_magics ... ok
IPython.core.tests.test_completer.test_cell_magics ... ok
IPython.core.tests.test_completer.test_line_cell_magics ... ok
Test magic_run_completer, should match two alterntives ... ok
Test magic_run_completer, should match one alterntive ... ok
Test magic_run_completer with unterminated " ... ok
Testing of issue https://github.com/ipython/ipython/issues/1107 ... ok
Test magic_run_completer, should match two alterntives ... SKIP: Skipping test: setUp. This test is only applicable where we can use unicode in filenames.
Test magic_run_completer, should match one alterntive ... SKIP: Skipping test: setUp. This test is only applicable where we can use unicode in filenames.
Test magic_run_completer with unterminated " ... SKIP: Skipping test: setUp. This test is only applicable where we can use unicode in filenames.
IPython.core.tests.test_debugger.test_longer_repr ... ok
Doctest: IPython.core.tests.test_debugger.test_ipdb_magics ... ok
Doctest: IPython.core.tests.test_debugger.test_ipdb_magics2 ... ok
Doctest: IPython.core.tests.test_debugger.test_ipdb_magics ... ok
Doctest: IPython.core.tests.test_debugger.test_ipdb_magics2 ... ok
Simple test for display.Image(args, width=x,height=y) ... ok
IPython.core.tests.test_display.test_retina_png ... ok
IPython.core.tests.test_display.test_retina_jpeg ... ok
test format constraint, and validity of jpeg and png ... ok
IPython.core.tests.test_extension.test_extension_loading ... ok
IPython.core.tests.test_extension.test_extension_builtins ... ok
IPython.core.tests.test_extension.test_non_extension ... ok
IPython.core.tests.test_fakemodule.test_mk_fakemod(<module '?' from '/usr/local/lib/python2.7/site-packages/IPython/core/fakemodule.pyc'>,) ... ok
IPython.core.tests.test_fakemodule.test_mk_fakemod(<function <lambda> at 0x12d264f46b90>,) ... ok
Test making a FakeModule object with initial data ... ok
IPython.core.tests.test_formatters.test_pretty ... ok
IPython.core.tests.test_formatters.test_deferred ... ok
test various values for float_precision. ... ok
test various invalid values for float_precision. ... ok
IPython.core.tests.test_handlers.test_handlers ... ok
IPython.core.tests.test_history.test_history ... ERROR - failed to write data to stream: <open file '<stdout>', mode 'w' at 0x12d25683d150>
ERROR
IPython.core.tests.test_history.test_extract_hist_ranges ... ok
Simple test for %rerun (no args -> rerun last line) ... ok
IPython.core.tests.test_history.test_timestamp_type ... ok
IPython.core.tests.test_history.test_hist_file_config ... ok
Test two failing hooks ... ok
Test a mixture of failing and succeeding hooks. ... ok
IPython.core.tests.test_hooks.test_command_chain_dispatcher_eq_priority ... ok
IPython.core.tests.test_imports.test_import_completer ... ok
IPython.core.tests.test_imports.test_import_crashhandler ... ok
IPython.core.tests.test_imports.test_import_debugger ... ok
IPython.core.tests.test_imports.test_import_fakemodule ... ok
IPython.core.tests.test_imports.test_import_excolors ... ok
IPython.core.tests.test_imports.test_import_history ... ok
IPython.core.tests.test_imports.test_import_hooks ... ok
IPython.core.tests.test_imports.test_import_getipython ... ok
IPython.core.tests.test_imports.test_import_interactiveshell ... ok
IPython.core.tests.test_imports.test_import_logger ... ok
IPython.core.tests.test_imports.test_import_macro ... ok
IPython.core.tests.test_imports.test_import_magic ... ok
IPython.core.tests.test_imports.test_import_oinspect ... ok
IPython.core.tests.test_imports.test_import_prefilter ... ok
IPython.core.tests.test_imports.test_import_prompts ... ok
IPython.core.tests.test_imports.test_import_release ... ok
IPython.core.tests.test_imports.test_import_shadowns ... ok
IPython.core.tests.test_imports.test_import_ultratb ... ok
IPython.core.tests.test_imports.test_import_usage ... ok
test_cellmagic_help (IPython.core.tests.test_inputsplitter.CellModeCellMagics) ... ok
test_incremental (IPython.core.tests.test_inputsplitter.CellModeCellMagics) ... ok
test_whole_cell (IPython.core.tests.test_inputsplitter.CellModeCellMagics) ... ok
test_cellmagic_preempt (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_continuation (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_dedent_break (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_dedent_continue (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_dedent_pass (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_dedent_raise (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_dedent_return (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_indent (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_indent2 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_indent3 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_indent4 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
Test issue #2108. ... ok
test_push (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push2 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push3 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push_accepts_more (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push_accepts_more2 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push_accepts_more3 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push_accepts_more4 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_push_accepts_more5 (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_reset (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_source (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
Call all single-line syntax tests from the main object ... ok
test_syntax_error (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_syntax_multiline (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_syntax_multiline_cell (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_unicode (IPython.core.tests.test_inputsplitter.IPythonInputTestCase) ... ok
test_continuation (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_dedent_break (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_dedent_continue (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_dedent_pass (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_dedent_raise (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_dedent_return (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_indent (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_indent2 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_indent3 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_indent4 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
Test issue #2108. ... ok
test_push (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push2 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push3 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push_accepts_more (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push_accepts_more2 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push_accepts_more3 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push_accepts_more4 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_push_accepts_more5 (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_reset (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_source (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_syntax_error (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_unicode (IPython.core.tests.test_inputsplitter.InputSplitterTestCase) ... ok
test_abc (IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase) ... ok
test_multi (IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase) ... ok
test_simple (IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase) ... ok
test_simple2 (IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase) ... ok
test_xy (IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase) ... ok
test_cellmagic_help (IPython.core.tests.test_inputsplitter.LineModeCellMagics) ... ok
test_incremental (IPython.core.tests.test_inputsplitter.LineModeCellMagics) ... ok
test_whole_cell (IPython.core.tests.test_inputsplitter.LineModeCellMagics) ... ok
test (IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase) ... ok
IPython.core.tests.test_inputsplitter.test_spaces ... ok
IPython.core.tests.test_inputsplitter.test_remove_comments ... ok
IPython.core.tests.test_inputsplitter.test_get_input_encoding ... ok
IPython.core.tests.test_inputsplitter.test_last_blank ... ok
IPython.core.tests.test_inputsplitter.test_last_two_blanks ... ok
IPython.core.tests.test_inputtransformer.test_assign_system ... ok
IPython.core.tests.test_inputtransformer.test_assign_magic ... ok
IPython.core.tests.test_inputtransformer.test_classic_prompt ... ok
IPython.core.tests.test_inputtransformer.test_ipy_prompt ... ok
IPython.core.tests.test_inputtransformer.test_coding_cookie ... ok
IPython.core.tests.test_inputtransformer.test_assemble_logical_lines ... ok
IPython.core.tests.test_inputtransformer.test_assemble_python_lines ... ok
IPython.core.tests.test_inputtransformer.test_help_end ... ok
IPython.core.tests.test_inputtransformer.test_escaped_noesc ... ok
IPython.core.tests.test_inputtransformer.test_escaped_shell ... ok
IPython.core.tests.test_inputtransformer.test_escaped_help ... ok
IPython.core.tests.test_inputtransformer.test_escaped_magic ... ok
IPython.core.tests.test_inputtransformer.test_escaped_quote ... ok
IPython.core.tests.test_inputtransformer.test_escaped_quote2 ... ok
IPython.core.tests.test_inputtransformer.test_escaped_paren ... ok
IPython.core.tests.test_inputtransformer.test_cellmagic ... ok
IPython.core.tests.test_inputtransformer.test_has_comment ... ok
IPython.core.tests.test_inputtransformer.test_token_input_transformer ... ok
Verify that In variable grows with user input (GH-284) ... ok
Errors in prefilter can't crash IPython ... ok
Check that InteractiveShell is protected from bad custom exception handlers ... ok
Check that InteractiveShell is protected from bad return types in custom exception handlers ... ok
var_expand on invalid formats shouldn't raise ... ok
Can we pickle objects defined interactively (GH-29) ... ok
test_custom_exception (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
Ending a line with semicolon should not cache the returned object (GH-307) ... Automatic calling is: OFF
-> autocallable()
Automatic calling is: Smart
-> len("abc")
-> len("abc");
-> len([1,2])
-> call_idx(1)
Automatic calling is: Full
-> len("abc")
-> len("abc");
-> len([1,2])
-> call_idx(1)
-> len()
Automatic calling is: Smart
def f():
    test = 1
    return test

The following commands were written to file `/tmp/tmpEGs0Rz/test4.py`:
=== Executing: ===
a += 1
=== Output: ===
  x=1
# a comment
  y=2
  x=1
# a comment
  y=2
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
TypeError: <lambda>() takes exactly 3 arguments (5 given)
The original exception:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
TypeError: <lambda>() got multiple values for keyword argument 'tb_offset'
The original exception:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-1-6d7f71609539> in <module>()
----> 1 raise ValueError('test')

ValueError: test
Out[2]: 1
ok
test_drop_by_id (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
Can we run code with & without the shell's __future__ imports? ... ok
Check that future flags are used for parsing code (gh-777) ... ok
Check that unicode_literals is imported from __future__ (gh #786) ... ok
Pretty-printing lists of objects with non-ascii reprs may cause ... ok
Code in functions must be able to access variables outside them. ... ok
test_magic_names_in_string (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
Code sprinkled with multiline strings should execute (GH-306) ... 1 2
Out[1]: 'a\nb'
ok
Test that cells with only naked strings are fully executed ... Out[1]: 'a'
Out[1]: 'a\nb'
ok
test_ofind_cell_magic (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
test_ofind_line_magic (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
Verify that softspace is handled correctly when executing multiple ... ok
Multi-block, multi-line cells must execute correctly. ... ok
Just make sure we don't get a horrible error with a blank ... ok
run_cell(silent=True) doesn't advance execution_count ... Out[1]: 1
ok
run_cell(silent=True) doesn't trigger displayhook ... ok
run_cell(silent=True) doesn't invoke post-exec funcs ... Out[2]: 1
ok
test that running !(command) does not raise a SyntaxError ... ok
test_var_expand (IPython.core.tests.test_interactiveshell.InteractiveShellTestCase) ... ok
Test local variable expansion in !system and %magic calls ... ok
Test variable expansion with the name 'self', which was failing. ... Macro `macro_var_expand_locals` created. To execute, type its name (without quotes).
=== Macro contents: ===
str(12)

ok
test_macro (IPython.core.tests.test_interactiveshell.TestAstTransform) ... ok
test_run_cell (IPython.core.tests.test_interactiveshell.TestAstTransform) ... ok
test_time (IPython.core.tests.test_interactiveshell.TestAstTransform) ... ok
test_timeit (IPython.core.tests.test_interactiveshell.TestAstTransform) ... ok
test_run_cell (IPython.core.tests.test_interactiveshell.TestAstTransform2) ... ok
test_timeit (IPython.core.tests.test_interactiveshell.TestAstTransform2) ... ok
test_unregistering (IPython.core.tests.test_interactiveshell.TestAstTransformError) ... Out[2]: 3
ok
Test we're not loading modules on startup that we shouldn't. ... ok
Test safe_execfile with non-ascii path ... SKIP: Skipping test: setUp. This test is only applicable where we can use unicode in filenames.
Test system_raw with non-ascii cmd ... SKIP: Skipping test: test_1. This test is only applicable where we can use unicode in filenames.
Test that the exit code is parsed correctly. ... ok
IPython.core.tests.test_interactiveshell.test__IPYTHON__ ... ok
IPython.core.tests.test_interactiveshell.test_user_variables ... ok
IPython.core.tests.test_interactiveshell.test_user_expression ... ok
reset must clear most namespaces. ... ok
IPython.core.tests.test_iplib.test_run_cell ... ok
Test the internal database used for variable persistence. ... ok
Doctest: IPython.core.tests.test_iplib.doctest_tb_context ... ok
Doctest: IPython.core.tests.test_iplib.doctest_tb_plain ... ok
Doctest: IPython.core.tests.test_iplib.doctest_tb_sysexit ... ok
Doctest: IPython.core.tests.test_iplib.doctest_tb_verbose ... ok
IPython.core.tests.test_logger.test_logstart_inaccessible_file ... ok
IPython.core.tests.test_logger.test_logstart_unicode ... {'a': {'data': {u'text/plain': '3'}, 'metadata': {}, 'status': 'ok'},
 'b': {u'ename': u'ZeroDivisionError',
       u'evalue': u'integer division or modulo by zero',
       u'status': 'error',
       u'traceback': [u'ZeroDivisionError: integer division or modulo by zero\n']}}
hello
world
foo
bar
bar
Out[1]: 'abc\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd'
Activating auto-logging. Current session state plus future input saved.
Filename       : /tmp/tmpJ9Y_e_/test_unicode.log
Mode           : backup
Output logging : True
Raw input log  : False
Timestamping   : True
State          : active
Out[1]: 'abc\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd'
ok
Cell magics declared via a class ... Out[1]: (u'c', u'd')
ok
Cell magics declared via a class, #2 ... Out[1]: (u'c', u'd')
ok
Cell magic using simple decorator ... Out[1]: (u'c', u'd')
ok
Cell magic manually registered ... Out[1]: (u'c', u'd')
ok
Test that references from %run are cleared by xdel. ... Out[1]: <__main__.A at 0x12d28f7ee950>
ok
IPython.core.tests.test_magic.test_rehashx ... ok
Test that we don't mangle paths when parsing magic options. ... ok
Magic.parse_options can handle --foo=bar long options ... ok
IPython.core.tests.test_magic.test_macro ... ok
Test that we can run a multi-line macro successfully. ... Macro `test` created. To execute, type its name (without quotes).
=== Macro contents: ===
a=1
def b():
  return a**2
print(a,b())

11
Macro `test` created. To execute, type its name (without quotes).
=== Macro contents: ===
a+=1
print a

ok
Test %magic ... ok
Test '%reset array' functionality ... ok
Test '%reset out' magic ... Out[6]: 'dead'
ok
Test '%reset in' magic ... Flushing output cache (1 entries)
Out[7]: 'dead'
ok
Test '%reset dhist' magic ... ok
Test that '%reset in' preserves In[] length ... ok
test %tb after a SyntaxError ... ok
IPython.core.tests.test_magic.test_time ... Flushing input history
/usr/local/lib/python2.7/site-packages/nose
/usr/ports/mystuff/devel/ipython
Flushing directory history
foo
Flushing input history
  File "<ipython-input-8-91e454eba04c>", line 1
    for
       ^
SyntaxError: invalid syntax

ok
IPython.core.tests.test_magic.test_time2 ... ok
Erroneous magic function calls, issue gh-3334 ... ok
Toggle doctest_mode twice, it should be a no-op and run without error ... ok
Tests for basic options parsing in magics. ... ok
Test various directory handling operations. ... ok
IPython.core.tests.test_magic.test_xmode ... ok
IPython.core.tests.test_magic.test_reset_hard ... CPU times: user 0 ns, sys: 0 ns, total: 0 ns
Wall time: 7.87 us
Exception reporting mode: Plain
Doctest mode is: ON
Exception reporting mode: Verbose
Doctest mode is: OFF
/home/edd/eck2/main_configs/.config/ipython
/usr/ports/mystuff/devel/ipython
/home/edd/eck2/main_configs/.config/ipython
/usr/ports/mystuff/devel/ipython
popd -> /usr/ports/mystuff/devel/ipython
Exception reporting mode: Plain
Exception reporting mode: Context
Exception reporting mode: Verbose
Out[8]: <A instance>
ok
Check that whos is protected against objects where repr() fails. ... ok
IPython.core.tests.test_magic.test_psearch ... Variable   Type    Data/Info
----------------------------
a          A       <object with id 20695559886416 (str() failed)>
ok
test shlex issues with timeit (#1109) ... ok
Test valid timeit arguments, should not cause SyntaxError (GH #1269) ... ok
Test %%timeit with IPython special syntax ... ok
Test %%prun with IPython special syntax ... ok
Test that prun does not clobber string escapes (GH #1302) ... ok
IPython.core.tests.test_magic.test_extension ... ok
IPython.core.tests.test_magic.test_notebook_export_json ... ok
IPython.core.tests.test_magic.test_notebook_export_py ... ok
IPython.core.tests.test_magic.test_notebook_reformat_py ... ok
IPython.core.tests.test_magic.test_notebook_reformat_json ... ok
IPython.core.tests.test_magic.test_env ... ok
Basic %%file ... ok
%%file $filename ... ok
%%file with unicode cell ... ok
%%file -a amends files ... ok
IPython.core.tests.test_magic.test_script_config ... ok
IPython.core.tests.test_magic.test_script_out ... ok
IPython.core.tests.test_magic.test_script_err ... 1 loops, best of 3: 1.91 us per loop
1 loops, best of 1: 4.05 us per loop
1 loops, best of 1: 3.1 us per loop
1 loops, best of 1: 2.15 us per loop
1 loops, best of 1: 3.1 us per loop
1 loops, best of 1: 1.91 us per loop
100000000 loops, best of 3: 12.8 ns per loop
1 loops, best of 1: 42 us per loop
1 loops, best of 1: 42.9 us per loop
   Installed daft_extension.py. To use it, type:
  %load_ext daft_extension
Writing /tmp/tmpEFelvQ/file1
Writing /tmp/tmpnbGlxB/file1
Writing /tmp/tmp7LIClg/file1
Writing /tmp/tmp0_3ILl/file2
Appending to /tmp/tmp0_3ILl/file2
ok
IPython.core.tests.test_magic.test_script_out_err ... ok
IPython.core.tests.test_magic.test_script_bg_out ... ok
IPython.core.tests.test_magic.test_script_bg_err ... ok
IPython.core.tests.test_magic.test_script_bg_out_err ... ok
IPython.core.tests.test_magic.test_script_defaults ... ok
%%foo and %foo magics are distinguishable to inspect ... ok
IPython.core.tests.test_magic.test_multiple_magics ... ok
Test %alias_magic. ... ok
Test %save. ... ok
Test %store. ... ok
%edit on interactively defined objects ... ok
%edit [cell id] ... ok
Doctest: IPython.core.tests.test_magic.doctest_precision ... ok
Doctest: IPython.core.tests.test_magic.doctest_who ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... ok
test (IPython.core.tests.test_magic_arguments.test_magic_arguments) ... test_paste (IPython.core.tests.test_magic_terminal.PasteTestCase) ... ok
Also test self.paste echoing, by temporarily faking the writer ... ok
Test pasting of email-quoted contents ... ok
Email again; some programs add a space also at each quoting level ... ok
Email quoting of interactive input ... ok
Test multiline strings with leading commas ... ok
test_paste_py_multi (IPython.core.tests.test_magic_terminal.PasteTestCase) ... ok
Now, test that self.paste -r works ... ok
test_paste_pyprompt (IPython.core.tests.test_magic_terminal.PasteTestCase) ... ok
Test pasting sources with trailing question marks ... ok
Test cpaste magic ... Starting job # 0 in a separate thread.
Starting job # 2 in a separate thread.
Starting job # 3 in a separate thread.
Created `%timeit_alias` as an alias for `%timeit`.
Created `%%timeit_alias` as an alias for `%%timeit`.
Created `%%timeit_cell_alias` as an alias for `%%timeit`.
Created `%env_alias` as an alias for `%env`.
The following commands were written to file `/tmp/tmpgxcRyC/testsave.py`:
a=1
def b():
  return a**2
print(a, b())
The following commands were written to file `/tmp/tmpgxcRyC/testsave.py`:
a=1
def b():
  return a**2
print(a, b())
Stored 'var' (int)
IPython will make a temporary file named: /tmp/ipython_edit_uevHOi.py
Block assigned to 'foo'
Re-executing '        >>> x = [1,2,3]...' (119 chars)
ok
IPython.core.tests.test_oinspect.test_find_source_lines ... ok
IPython.core.tests.test_oinspect.test_find_file ... ok
IPython.core.tests.test_oinspect.test_find_file_decorated1 ... ok
IPython.core.tests.test_oinspect.test_find_file_decorated2 ... ok
IPython.core.tests.test_oinspect.test_find_file_magic ... ok
IPython.core.tests.test_oinspect.test_calltip_class ... ok
IPython.core.tests.test_oinspect.test_calltip_instance ... ok
IPython.core.tests.test_oinspect.test_calltip_method ... ok
IPython.core.tests.test_oinspect.test_calltip_function ... ok
IPython.core.tests.test_oinspect.test_calltip_function2 ... ok
IPython.core.tests.test_oinspect.test_calltip_builtin ... ok
IPython.core.tests.test_oinspect.test_calltip_line_magic ... ok
IPython.core.tests.test_oinspect.test_calltip_cell_magic ... ok
IPython.core.tests.test_oinspect.test_calltip_line_cell_magic ... ok
IPython.core.tests.test_oinspect.test_class_magics ... ok
Check that Inspector.info fills out various fields as expected. ... ok
IPython.core.tests.test_oinspect.test_info_awkward ... ok
IPython.core.tests.test_oinspect.test_getdoc ... ok
IPython.core.tests.test_oinspect.test_pdef ... ok
IPython.core.tests.test_oinspect.test_pinfo_nonascii ... ERROR
Simple smoketest for page._detect_screen_size. ... ok
See https://github.com/ipython/ipython/issues/81 ... ok
See https://github.com/ipython/ipython/issues/81 ... ok
See https://github.com/ipython/ipython/issues/81 ... ok
See https://github.com/ipython/ipython/issues/81 ... ok
See https://github.com/ipython/ipython/issues/81 ... ok
See https://github.com/ipython/ipython/issues/81 ... Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... ok
Check that multiline string literals don't expand as magic ... Test user input conversions ... ok
Test user input conversions ... Capture exceptions thrown by user objects on attribute access. ... ok
test_startup_ipy (IPython.core.tests.test_profile.ProfileStartupTest) ... ok
test_startup_py (IPython.core.tests.test_profile.ProfileStartupTest) ... ok
IPython.core.tests.test_profile.test_list_profiles_in ... ok
IPython.core.tests.test_profile.test_list_bundled_profiles ... ok
ipython profile create respects --ipython-dir ... ok
test_builtins (IPython.core.tests.test_prompts.PromptTests) ... ok
test_cwd_x (IPython.core.tests.test_prompts.PromptTests) ... ok
test_lazy_eval_float (IPython.core.tests.test_prompts.PromptTests) ... ok
test_lazy_eval_nonascii_bytes (IPython.core.tests.test_prompts.PromptTests) ... ok
test_lazy_eval_unicode (IPython.core.tests.test_prompts.PromptTests) ... ok
test_multiline_prompt (IPython.core.tests.test_prompts.PromptTests) ... ok
test_render (IPython.core.tests.test_prompts.PromptTests) ... ok
test_render_unicode_cwd (IPython.core.tests.test_prompts.PromptTests) ... SKIP: Skipping test: test_render_unicode_cwd. This test is only applicable where we can use unicode in filenames.
test_translate_abbreviations (IPython.core.tests.test_prompts.PromptTests) ... ok
test_undefined (IPython.core.tests.test_prompts.PromptTests) ... ok
test_user_ns (IPython.core.tests.test_prompts.PromptTests) ... ok
IPython.core.tests.test_pylabtools.TestPylabSwitch.test_inline ... ok
IPython.core.tests.test_pylabtools.TestPylabSwitch.test_qt ... FAIL
IPython.core.tests.test_pylabtools.TestPylabSwitch.test_qt_gtk ... ok
test (IPython.core.tests.test_pylabtools.test_figure_to_svg) ... ok
test (IPython.core.tests.test_pylabtools.test_figure_to_svg) ... ok
test (IPython.core.tests.test_pylabtools.test_figure_to_svg) ... IPython.core.tests.test_pylabtools.test_import_pylab ... ok
Check that %run doesn't damage __builtins__ ... ok
Check that the type of __builtins__ doesn't change with %run. ... ok
Test that prompts correctly generate after %run ... ok
Test that the option -p, which invokes the profiler, do not ... ok
Test that namespace cleanup is not too aggressive GH-238 ...  foo()
 Automatic calling is: Full
-------> f(1)
-------> f(-1)
-------> f(+1)
Automatic calling is: OFF
Automatic calling is: Full
-------> x(1)
Automatic calling is: OFF
Warning: Cannot change to a different GUI toolkit: gtk. Using qt instead.
         39 function calls in 0.000 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 {execfile}
        1    0.000    0.000    0.000    0.000 interactiveshell.py:2449(safe_execfile)
        1    0.000    0.000    0.000    0.000 posixpath.py:321(normpath)
        1    0.000    0.000    0.000    0.000 {open}
        1    0.000    0.000    0.000    0.000 posixpath.py:127(dirname)
        1    0.000    0.000    0.000    0.000 py3compat.py:199(execfile)
        1    0.000    0.000    0.000    0.000 syspathcontext.py:54(__init__)
        4    0.000    0.000    0.000    0.000 {method 'startswith' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 posixpath.py:350(abspath)
        1    0.000    0.000    0.000    0.000 py3compat.py:30(cast_bytes)
        1    0.000    0.000    0.000    0.000 posixpath.py:258(expanduser)
        2    0.000    0.000    0.000    0.000 {method 'encode' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 syspathcontext.py:64(__exit__)
        1    0.000    0.000    0.000    0.000 syspathcontext.py:57(__enter__)
        1    0.000    0.000    0.000    0.000 py3compat.py:20(encode)
        1    0.000    0.000    0.000    0.000 posixpath.py:59(isabs)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 {method 'split' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        3    0.000    0.000    0.000    0.000 {isinstance}
        2    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'rfind' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {method 'join' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {len}
        1    0.000    0.000    0.000    0.000 tmpkAiPgW.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {sys.getdefaultencoding}
        1    0.000    0.000    0.000    0.000 {sys.getfilesystemencoding}
Out[10]: True
ok
Test that object's __del__ methods are called on exit. ... ok
Test that %run -t -N<N> does not raise a TypeError for N > 1. ... ok
Check that %run -i still works after %reset (gh-693) ... ok
Test handling of `__file__` attribute in `%run <file.ipy>`. ... ok
Test handling of `__file__` attribute in `%run <file>.py`. ... ok
Test that running a second file doesn't clobber the first, gh-3547 ... ok
Test that simple class definitions work. ... ok
IPython.core.tests.test_run.TestMagicRunSimple.test_tclass ... ok
Check that files in odd encodings are accepted. ... ok
test_debug_run_submodule_with_absolute_import (IPython.core.tests.test_run.TestMagicRunWithPackage) ... ok
test_debug_run_submodule_with_relative_import (IPython.core.tests.test_run.TestMagicRunWithPackage) ... ok
test_prun_submodule_with_absolute_import (IPython.core.tests.test_run.TestMagicRunWithPackage) ... ok
test_prun_submodule_with_relative_import (IPython.core.tests.test_run.TestMagicRunWithPackage) ... ok
test_run_submodule_with_absolute_import (IPython.core.tests.test_run.TestMagicRunWithPackage) ... ok
Run submodule that has a relative import statement (#2727). ... ok
Doctest: IPython.core.tests.test_run.doctest_refbug ... ok
Doctest: IPython.core.tests.test_run.doctest_reset_del ... ok
Doctest: IPython.core.tests.test_run.doctest_run_builtins ... ok
Doctest: IPython.core.tests.test_run.doctest_run_option_parser ... ok
Test that `__file__` is set when running `ipython file.ipy` ... ok
Test that `__file__` is set when running `ipython file.py` ... ok
IPython.core.tests.test_splitinput.test_split_user_input ... ok
Simple test for LineInfo construction and str() ... ok
Traceback produced if the line where the error occurred is missing? ... 
IPython CPU timings (estimated):
  User   :       0.00 s.
  System :       0.00 s.
Wall time:       0.00 s.

IPython CPU timings (estimated):
Total runs performed: 10
  Times  :      Total      Per run
  User   :       0.00 s,       0.00 s.
  System :       0.00 s,       0.00 s.
Wall time:       0.00 s.
*** Blank or comment
*** Blank or comment
NOTE: Enter 'c' at the ipdb>  prompt to continue execution.
*** Blank or comment
*** Blank or comment
NOTE: Enter 'c' at the ipdb>  prompt to continue execution.
         96 function calls in 0.001 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 absolute.py:2(<module>)
        1    0.000    0.000    0.000    0.000 {__import__}
        1    0.000    0.000    0.000    0.000 {compile}
        2    0.000    0.000    0.000    0.000 pkgutil.py:400(iter_importers)
        1    0.000    0.000    0.000    0.000 runpy.py:75(_run_module_code)
        1    0.000    0.000    0.000    0.000 posixpath.py:372(_joinrealpath)
        1    0.000    0.000    0.000    0.000 posixpath.py:321(normpath)
        3    0.000    0.000    0.000    0.000 posixpath.py:139(islink)
        3    0.000    0.000    0.000    0.000 posixpath.py:68(join)
        1    0.000    0.000    0.000    0.000 {imp.find_module}
        1    0.000    0.000    0.000    0.000 pkgutil.py:366(get_importer)
        3    0.000    0.000    0.000    0.000 {posix.lstat}
        8    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.001    0.001 runpy.py:164(run_module)
        1    0.000    0.000    0.000    0.000 pkgutil.py:176(find_module)
        1    0.000    0.000    0.000    0.000 pkgutil.py:294(get_source)
        1    0.000    0.000    0.000    0.000 pkgutil.py:277(get_code)
        1    0.000    0.000    0.001    0.001 runpy.py:100(_get_module_details)
        1    0.000    0.000    0.000    0.000 {method 'read' of 'file' objects}
        3    0.000    0.000    0.000    0.000 stat.py:55(S_ISLNK)
        1    0.000    0.000    0.001    0.001 interactiveshell.py:2546(safe_run_module)
        2    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 pkgutil.py:466(find_loader)
        1    0.000    0.000    0.000    0.000 pkgutil.py:317(get_filename)
        1    0.000    0.000    0.000    0.000 runpy.py:62(_run_code)
        1    0.000    0.000    0.000    0.000 pkgutil.py:441(get_loader)
        3    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        3    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
        3    0.000    0.000    0.000    0.000 stat.py:24(S_IFMT)
        1    0.000    0.000    0.000    0.000 posixpath.py:364(realpath)
        2    0.000    0.000    0.000    0.000 posixpath.py:59(isabs)
        1    0.000    0.000    0.000    0.000 runpy.py:92(_get_filename)
        4    0.000    0.000    0.000    0.000 pkgutil.py:265(_fix_name)
        3    0.000    0.000    0.000    0.000 qt_loaders.py:35(find_module)
        1    0.000    0.000    0.000    0.000 pkgutil.py:273(is_package)
        1    0.000    0.000    0.000    0.000 posixpath.py:350(abspath)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'file' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:31(__enter__)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        3    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {isinstance}
        4    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:26(__init__)
        2    0.000    0.000    0.000    0.000 {getattr}
        1    0.000    0.000    0.000    0.000 sub.py:2(<module>)
        1    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:48(__init__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:257(_reopen)
        1    0.000    0.000    0.000    0.000 {imp.new_module}
        1    0.000    0.000    0.000    0.000 pkgutil.py:237(__init__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:173(__init__)
        1    0.000    0.000    0.000    0.000 {method 'rpartition' of 'str' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:58(__exit__)
        1    0.000    0.000    0.000    0.000 runpy.py:52(__enter__)
        1    0.000    0.000    0.000    0.000 runpy.py:40(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:1(<module>)
         95 function calls in 0.001 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 {__import__}
        1    0.000    0.000    0.000    0.000 relative.py:2(<module>)
        1    0.000    0.000    0.000    0.000 {compile}
        1    0.000    0.000    0.000    0.000 runpy.py:75(_run_module_code)
        2    0.000    0.000    0.000    0.000 pkgutil.py:400(iter_importers)
        1    0.000    0.000    0.000    0.000 posixpath.py:372(_joinrealpath)
        1    0.000    0.000    0.000    0.000 pkgutil.py:366(get_importer)
        3    0.000    0.000    0.000    0.000 {posix.lstat}
        1    0.000    0.000    0.000    0.000 {imp.find_module}
        1    0.000    0.000    0.000    0.000 posixpath.py:321(normpath)
        3    0.000    0.000    0.000    0.000 posixpath.py:68(join)
        1    0.000    0.000    0.000    0.000 pkgutil.py:176(find_module)
        3    0.000    0.000    0.000    0.000 posixpath.py:139(islink)
        8    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.001    0.001 runpy.py:100(_get_module_details)
        1    0.000    0.000    0.001    0.001 runpy.py:164(run_module)
        1    0.000    0.000    0.000    0.000 pkgutil.py:294(get_source)
        1    0.000    0.000    0.000    0.000 {method 'read' of 'file' objects}
        1    0.000    0.000    0.000    0.000 pkgutil.py:277(get_code)
        1    0.000    0.000    0.001    0.001 pkgutil.py:466(find_loader)
        3    0.000    0.000    0.000    0.000 stat.py:55(S_ISLNK)
        1    0.000    0.000    0.000    0.000 runpy.py:62(_run_code)
        1    0.000    0.000    0.001    0.001 interactiveshell.py:2546(safe_run_module)
        3    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        2    0.000    0.000    0.000    0.000 posixpath.py:59(isabs)
        1    0.000    0.000    0.001    0.001 pkgutil.py:441(get_loader)
        4    0.000    0.000    0.000    0.000 pkgutil.py:265(_fix_name)
        2    0.000    0.000    0.000    0.000 {getattr}
        1    0.000    0.000    0.000    0.000 pkgutil.py:317(get_filename)
        2    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:92(_get_filename)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'file' objects}
        2    0.000    0.000    0.000    0.000 qt_loaders.py:35(find_module)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 posixpath.py:350(abspath)
        2    0.000    0.000    0.000    0.000 {isinstance}
        1    0.000    0.000    0.000    0.000 posixpath.py:364(realpath)
        4    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        3    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:26(__init__)
        1    0.000    0.000    0.000    0.000 runpy.py:31(__enter__)
        3    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
        3    0.000    0.000    0.000    0.000 stat.py:24(S_IFMT)
        1    0.000    0.000    0.000    0.000 runpy.py:58(__exit__)
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:52(__enter__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 runpy.py:40(__exit__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:257(_reopen)
        1    0.000    0.000    0.000    0.000 {imp.new_module}
        1    0.000    0.000    0.000    0.000 pkgutil.py:173(__init__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:273(is_package)
        1    0.000    0.000    0.000    0.000 __init__.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sub.py:2(<module>)
        1    0.000    0.000    0.000    0.000 runpy.py:48(__init__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:237(__init__)
        1    0.000    0.000    0.000    0.000 {method 'rpartition' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
 
ok
test_indentationerror_shows_line (IPython.core.tests.test_ultratb.IndentationErrorTest) ... ok
test_iso8859_5 (IPython.core.tests.test_ultratb.NonAsciiTest) ... ok
test_nonascii_path (IPython.core.tests.test_ultratb.NonAsciiTest) ... SKIP: Skipping test: test_nonascii_path. This test is only applicable where we can use unicode in filenames.
test_changing_py_file (IPython.core.tests.test_ultratb.SyntaxErrorTest) ... ok
test_non_syntaxerror (IPython.core.tests.test_ultratb.SyntaxErrorTest) ... ok
test_syntaxerror_without_lineno (IPython.core.tests.test_ultratb.SyntaxErrorTest) ... ok

======================================================================
ERROR: Failure: ValueError (unknown locale: en_US-UTF-8)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/nose/loader.py", line 390, in loadTestsFromName
    addr.filename, addr.module)
  File "/usr/local/lib/python2.7/site-packages/nose/importer.py", line 39, in importFromPath
    return self.importFromDir(dir_path, fqname)
  File "/usr/local/lib/python2.7/site-packages/nose/importer.py", line 86, in importFromDir
    mod = load_module(part_fqname, fh, filename, desc)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/payloadpage.py", line 24, in <module>
    from docutils.core import publish_string
  File "/usr/local/lib/python2.7/site-packages/docutils/core.py", line 20, in <module>
    from docutils import frontend, io, utils, readers, writers
  File "/usr/local/lib/python2.7/site-packages/docutils/frontend.py", line 41, in <module>
    import docutils.utils
  File "/usr/local/lib/python2.7/site-packages/docutils/utils/__init__.py", line 20, in <module>
    import docutils.io
  File "/usr/local/lib/python2.7/site-packages/docutils/io.py", line 18, in <module>
    from docutils.utils.error_reporting import locale_encoding, ErrorString, ErrorOutput
  File "/usr/local/lib/python2.7/site-packages/docutils/utils/error_reporting.py", line 47, in <module>
    locale_encoding = locale.getlocale()[1] or locale.getdefaultlocale()[1]
  File "/usr/local/lib/python2.7/locale.py", line 511, in getdefaultlocale
    return _parse_localename(localename)
  File "/usr/local/lib/python2.7/locale.py", line 443, in _parse_localename
    raise ValueError, 'unknown locale: %s' % localename
ValueError: unknown locale: en_US-UTF-8

======================================================================
ERROR: IPython.core.tests.test_history.test_history
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/nose/case.py", line 197, in runTest
    self.test(*self.arg)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/tests/test_history.py", line 58, in test_history
    ip.magic("%%save %s 1-10" % os.path.join(tmpdir, "test4"))
  File "/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2165, in magic
    return self.run_line_magic(magic_name, magic_arg_s)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2086, in run_line_magic
    result = fn(*args,**kwargs)
  File "<string>", line 2, in save
  File "/usr/local/lib/python2.7/site-packages/IPython/core/magic.py", line 191, in <lambda>
    call = lambda f, *a, **k: f(*a, **k)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/magics/code.py", line 115, in save
    print cmds
UnicodeEncodeError: 'ascii' codec can't encode characters in position 45-49: ordinal not in range(128)

======================================================================
ERROR: IPython.core.tests.test_oinspect.test_pinfo_nonascii
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/nose/case.py", line 197, in runTest
    self.test(*self.arg)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/tests/test_oinspect.py", line 305, in test_pinfo_nonascii
    ip._inspect('pinfo', 'nonascii2', detail_level=1)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 1457, in _inspect
    pmethod(info.obj, oname, formatter, info, **kw)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/oinspect.py", line 607, in pinfo
    page.page(self._format_fields(displayfields))
  File "/usr/local/lib/python2.7/site-packages/IPython/testing/globalipapp.py", line 171, in nopage
    print(strng)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 322-359: ordinal not in range(128)

======================================================================
FAIL: IPython.core.tests.test_pylabtools.TestPylabSwitch.test_qt
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/site-packages/nose/case.py", line 197, in runTest
    self.test(*self.arg)
  File "/usr/local/lib/python2.7/site-packages/IPython/core/tests/test_pylabtools.py", line 98, in test_qt
    nt.assert_equal(gui, 'qt')
AssertionError: 'gtk' != 'qt'
    "'gtk' != 'qt'" = '%s != %s' % (safe_repr('gtk'), safe_repr('qt'))
    "'gtk' != 'qt'" = self._formatMessage("'gtk' != 'qt'", "'gtk' != 'qt'")
>>  raise self.failureException("'gtk' != 'qt'")
    

----------------------------------------------------------------------
Ran 523 tests in 11.749s

FAILED (SKIP=9, errors=3, failures=1)
