$OpenBSD: patch-pthread_support_c,v 1.3 2012/04/30 15:33:16 kurt Exp $
--- pthread_support.c.orig	Wed Jul  4 11:58:32 2012
+++ pthread_support.c	Wed Jul  4 12:01:29 2012
@@ -1002,14 +1002,14 @@ GC_INNER void GC_thr_init(void)
       GC_nprocs = pthread_num_processors_np();
 #   elif defined(GC_OSF1_THREADS) || defined(GC_AIX_THREADS) \
          || defined(GC_SOLARIS_THREADS) || defined(GC_GNU_THREADS) \
-         || defined(PLATFORM_ANDROID) || defined(NACL)
+	 || defined(PLATFORM_ANDROID) || defined(NACL) || defined(GC_OPENBSD_THREADS)
       GC_nprocs = sysconf(_SC_NPROCESSORS_ONLN);
       if (GC_nprocs <= 0) GC_nprocs = 1;
 #   elif defined(GC_IRIX_THREADS)
       GC_nprocs = sysconf(_SC_NPROC_ONLN);
       if (GC_nprocs <= 0) GC_nprocs = 1;
 #   elif defined(GC_DARWIN_THREADS) || defined(GC_FREEBSD_THREADS) \
-         || defined(GC_NETBSD_THREADS) || defined(GC_OPENBSD_THREADS)
+         || defined(GC_NETBSD_THREADS)
       GC_nprocs = get_ncpu();
 #   elif defined(GC_LINUX_THREADS) || defined(GC_DGUX386_THREADS)
       GC_nprocs = GC_get_nprocs();
@@ -1544,6 +1544,12 @@ STATIC void * GC_start_routine(void * arg)
 #     ifdef REDIRECT_MALLOC
         GC_enable();
 #     endif
+      return GC_inner_start_routine(&sb, arg);
+#   elif defined(GC_OPENBSD_THREADS)
+      /* On OpenBSD GC_get_stack_base() doesn't cause any allocations */
+      struct GC_stack_base sb;
+      if (GC_get_stack_base(&sb) != GC_SUCCESS)
+	ABORT("Failed to get thread stack base.");
       return GC_inner_start_routine(&sb, arg);
 #   else
       return GC_call_with_stack_base(GC_inner_start_routine, arg);
