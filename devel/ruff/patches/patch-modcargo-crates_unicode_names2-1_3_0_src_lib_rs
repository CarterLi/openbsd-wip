Fix tests for crate unicode_names2

- Feature attributes are only allowed on the nightly release channel.
  See rustc --explain E0554

- Suppress use of unstable library feature 'test': 'bench' is a part of custom
  test frameworks which are unstable. See rustc --explain E0658

Index: modcargo-crates/unicode_names2-1.3.0/src/lib.rs
--- modcargo-crates/unicode_names2-1.3.0/src/lib.rs.orig
+++ modcargo-crates/unicode_names2-1.3.0/src/lib.rs
@@ -30,8 +30,6 @@
 //!   string) is required, unless you use a raw string.
 //!
 //! ```rust
-//! #![feature(proc_macro_hygiene)]
-//!
 //! #[macro_use]
 //! extern crate unicode_names2_macros;
 //!
@@ -59,7 +57,6 @@
 //! ```
 
 #![cfg_attr(feature = "no_std", no_std)]
-#![cfg_attr(test, feature(test))]
 #![deny(missing_docs, unsafe_code)]
 
 #[cfg(all(test, feature = "no_std"))]
@@ -436,17 +433,9 @@ pub fn character(search_name: &str) -> Option<char> {
 #[cfg(test)]
 mod tests {
     use super::*;
-    use rand::{
-        distributions::{Distribution, Standard},
-        prelude::{SeedableRng, StdRng},
-    };
     use std::char;
     use std::prelude::v1::*;
 
-    extern crate test;
-
-    use test::bench::Bencher;
-
     static DATA: &'static str =
         include_str!(concat!(env!("CARGO_MANIFEST_DIR"), "/data/UnicodeData.txt"));
 
@@ -619,68 +608,6 @@ mod tests {
         b.iter(|| {
             for s in name('รถ').unwrap() {
                 test::black_box(s);
-            }
-        })
-    }
-
-    #[bench]
-    fn character_basic(b: &mut Bencher) {
-        b.iter(|| character("LATIN SMALL LETTER O WITH DIAERESIS"));
-    }
-
-    #[bench]
-    fn name_10000_invalid(b: &mut Bencher) {
-        // be consistent across runs, but avoid sequential/caching.
-        let mut rng = StdRng::seed_from_u64(0x12345678);
-        let chars: Vec<char> = Standard
-            .sample_iter(&mut rng)
-            .take(10000)
-            .filter_map(|c| match c {
-                c if name(c).is_none() => Some(c),
-                _ => None,
-            })
-            .collect();
-
-        b.iter(|| {
-            for &c in chars.iter() {
-                assert!(name(c).is_none());
-            }
-        })
-    }
-
-    #[bench]
-    fn name_all_valid(b: &mut Bencher) {
-        let chars = (0u32..0x10FFFF)
-            .filter_map(|x| match char::from_u32(x) {
-                Some(c) if name(c).is_some() => Some(c),
-                _ => None,
-            })
-            .collect::<Vec<char>>();
-
-        b.iter(|| {
-            for c in chars.iter() {
-                for s in name(*c).unwrap() {
-                    test::black_box(s);
-                }
-            }
-        });
-    }
-
-    #[bench]
-    fn character_10000(b: &mut Bencher) {
-        // be consistent across runs, but avoid sequential/caching.
-        let mut rng = StdRng::seed_from_u64(0x12345678);
-
-        let names: Vec<_> = Standard
-            .sample_iter(&mut rng)
-            .take(10000)
-            .filter_map(name)
-            .map(|name| name.to_string())
-            .collect();
-
-        b.iter(|| {
-            for n in names.iter() {
-                test::black_box(character(&n));
             }
         })
     }
