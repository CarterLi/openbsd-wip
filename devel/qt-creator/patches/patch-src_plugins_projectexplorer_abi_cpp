$OpenBSD$
--- src/plugins/projectexplorer/abi.cpp.orig	Mon Oct 21 01:53:59 2013
+++ src/plugins/projectexplorer/abi.cpp	Mon Oct 21 02:34:54 2013
@@ -312,7 +312,8 @@ Abi::Abi(const Architecture &a, const OS &o,
             m_osFlavor = UnknownFlavor;
         break;
     case ProjectExplorer::Abi::BsdOS:
-        m_osFlavor = FreeBsdFlavor;
+        if (m_osFlavor < FreeBsdFlavor || m_osFlavor > OpenBsdFlavor)
+            m_osFlavor = UnknownFlavor;
         break;
     case ProjectExplorer::Abi::MacOS:
         if (m_osFlavor < GenericMacFlavor || m_osFlavor > GenericMacFlavor)
@@ -341,6 +342,14 @@ Abi::Abi(const QString &abiString) :
             m_architecture = ArmArchitecture;
         else if (abiParts.at(0) == QLatin1String("x86"))
             m_architecture = X86Architecture;
+        else if (abiParts.at(0) == QLatin1String("i386")) {
+            m_architecture = X86Architecture;
+            m_wordWidth = 32;
+        }
+        else if (abiParts.at(0) == QLatin1String("amd64")) {
+            m_architecture = X86Architecture;
+            m_wordWidth = 64;
+        }
         else if (abiParts.at(0) == QLatin1String("mips"))
             m_architecture = MipsArchitecture;
         else if (abiParts.at(0) == QLatin1String("ppc"))
@@ -382,8 +391,10 @@ Abi::Abi(const QString &abiString) :
             m_osFlavor = FreeBsdFlavor;
         else if (abiParts.at(2) == QLatin1String("netbsd") && m_os == BsdOS)
             m_osFlavor = NetBsdFlavor;
-        else if (abiParts.at(2) == QLatin1String("openbsd") && m_os == BsdOS)
+        else if (abiParts.at(2).startsWith(QLatin1String("openbsd"))) {
+            m_os = BsdOS;
             m_osFlavor = OpenBsdFlavor;
+        }
         else if (abiParts.at(2) == QLatin1String("maemo") && m_os == LinuxOS)
             m_osFlavor = MaemoLinuxFlavor;
         else if (abiParts.at(2) == QLatin1String("harmattan") && m_os == LinuxOS)
@@ -665,6 +676,10 @@ Abi Abi::hostAbi()
     os = MacOS;
     subos = GenericMacFlavor;
     format = MachOFormat;
+#elif defined (Q_OS_OPENBSD)
+    os = BsdOS;
+    subos = OpenBsdFlavor;
+    format = ElfFormat;
 #endif
 
     const Abi result(arch, os, subos, format, QSysInfo::WordSize);
