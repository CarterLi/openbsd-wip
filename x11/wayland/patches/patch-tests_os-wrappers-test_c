$OpenBSD$
Add *BSD support.
--- tests/os-wrappers-test.c.orig	Sat Jun 13 01:31:24 2015
+++ tests/os-wrappers-test.c	Sun Jan 10 16:41:21 2016
@@ -37,7 +37,11 @@
 #include <stdarg.h>
 #include <fcntl.h>
 #include <stdio.h>
-#include <sys/epoll.h>
+#ifdef HAVE_SYS_EPOLL_H
+# include <sys/epoll.h>
+#else
+# include <sys/event.h>
+#endif
 
 #include "wayland-private.h"
 #include "test-runner.h"
@@ -54,9 +58,16 @@ static int wrapped_calls_fcntl;
 static ssize_t (*real_recvmsg)(int, struct msghdr *, int);
 static int wrapped_calls_recvmsg;
 
+#ifdef HAVE_SYS_EPOLL_H
 static int (*real_epoll_create1)(int);
 static int wrapped_calls_epoll_create1;
+#endif
 
+#if HAVE_SYS_EVENT_H
+static int (*real_kqueue)(void);
+static int wrapped_calls_kqueue;
+#endif
+
 static void
 init_fallbacks(int do_fallbacks)
 {
@@ -64,7 +75,12 @@ init_fallbacks(int do_fallbacks)
 	real_socket = dlsym(RTLD_NEXT, "socket");
 	real_fcntl = dlsym(RTLD_NEXT, "fcntl");
 	real_recvmsg = dlsym(RTLD_NEXT, "recvmsg");
+#ifdef HAVE_SYS_EPOLL_H
 	real_epoll_create1 = dlsym(RTLD_NEXT, "epoll_create1");
+#endif
+#ifdef HAVE_SYS_EVENT_H
+	real_kqueue = dlsym(RTLD_NEXT, "kqueue");
+#endif
 }
 
 __attribute__ ((visibility("default"))) int
@@ -80,6 +96,7 @@ socket(int domain, int type, int protocol)
 	return real_socket(domain, type, protocol);
 }
 
+#if 0
 __attribute__ ((visibility("default"))) int
 fcntl(int fd, int cmd, ...)
 {
@@ -99,6 +116,7 @@ fcntl(int fd, int cmd, ...)
 
 	return real_fcntl(fd, cmd, arg);
 }
+#endif
 
 __attribute__ ((visibility("default"))) ssize_t
 recvmsg(int sockfd, struct msghdr *msg, int flags)
@@ -113,6 +131,7 @@ recvmsg(int sockfd, struct msghdr *msg, int flags)
 	return real_recvmsg(sockfd, msg, flags);
 }
 
+#ifdef HAVE_SYS_EPOLL_H
 __attribute__ ((visibility("default"))) int
 epoll_create1(int flags)
 {
@@ -126,7 +145,24 @@ epoll_create1(int flags)
 
 	return real_epoll_create1(flags);
 }
+#endif
 
+#ifdef HAVE_SYS_EVENT_H
+__attribute__ ((visibility("default"))) int
+kqueue(void)
+{
+	wrapped_calls_kqueue++;
+
+	if (fall_back) {
+		wrapped_calls_kqueue++; /* kqueue() not wrapped */
+		errno = EINVAL;
+		return -1;
+	}
+
+	return real_kqueue();
+}
+#endif
+
 static void
 do_os_wrappers_socket_cloexec(int n)
 {
@@ -333,6 +369,7 @@ TEST(os_wrappers_recvmsg_cloexec_fallback)
 	do_os_wrappers_recvmsg_cloexec(1);
 }
 
+#ifdef HAVE_SYS_EPOLL_H
 static void
 do_os_wrappers_epoll_create_cloexec(int n)
 {
@@ -364,5 +401,8 @@ TEST(os_wrappers_epoll_create_cloexec_fallback)
 	init_fallbacks(1);
 	do_os_wrappers_epoll_create_cloexec(2);
 }
+#endif
 
 /* FIXME: add tests for wl_os_accept_cloexec() */
+
+/* FIXME: add tests for kqueue() */
