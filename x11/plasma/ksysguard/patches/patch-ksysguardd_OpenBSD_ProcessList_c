$OpenBSD$

Index: ksysguardd/OpenBSD/ProcessList.c
--- ksysguardd/OpenBSD/ProcessList.c.orig
+++ ksysguardd/OpenBSD/ProcessList.c
@@ -20,6 +20,7 @@
 
 */
 
+#include <errno.h>
 #include <ctype.h>
 #include <dirent.h>
 #include <pwd.h>
@@ -155,7 +156,7 @@ findProcessInList(int pid)
 }
 
 static void
-fillProcessCmdline(char *cmdline, struct kinfo_proc2 *p, size_t maxlen)
+fillProcessCmdline(char *cmdline, struct kinfo_proc *p, size_t maxlen)
 {
 	int mib[4];
 	int ret = -1;
@@ -204,7 +205,7 @@ fillProcessCmdline(char *cmdline, struct kinfo_proc2 *
 }
 
 static int
-updateProcess(struct kinfo_proc2 *p)
+updateProcess(struct kinfo_proc *p)
 {
 	static const char * const statuses[] = { "idle","run","sleep","stop","zombie" };
 	
@@ -317,14 +318,14 @@ updateProcessList(void)
         int mib[6];
         size_t len;
         size_t num;
-        struct kinfo_proc2 *p;
+        struct kinfo_proc *p;
 
 
         mib[0] = CTL_KERN;
-        mib[1] = KERN_PROC2;
+        mib[1] = KERN_PROC;
         mib[2] = KERN_PROC_ALL;
 	mib[3] = 0;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 0;
         if (sysctl(mib, 6, NULL, &len, NULL, 0) == -1)
 		return 0;
@@ -332,11 +333,11 @@ updateProcessList(void)
 	p = malloc(len);
 	if (!p)
 		return 0;
-	mib[5] = len/ sizeof(struct kinfo_proc2);
+	mib[5] = len/ sizeof(struct kinfo_proc);
         if (sysctl(mib, 6, p, &len, NULL, 0) == -1)
 		return 0;
 
-	for (num = 0; num < len / sizeof(struct kinfo_proc2); num++)
+	for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
 		updateProcess(&p[num]);
 	free(p);
 	cleanupProcessList();
@@ -381,7 +382,7 @@ printProcessCountInfo(const char* cmd)
 void
 killProcess(const char* cmd)
 {
-	int sig, pid;
+	int sig, pid, errno;
 
 	sscanf(cmd, "%*s %d %d", &pid, &sig);
 	switch(sig)
@@ -444,54 +445,46 @@ killProcess(const char* cmd)
 		sig = SIGUSR2;
 		break;
 	}
-	if (kill((pid_t) pid, sig))
-	{
-		switch(errno)
-		{
-		case EINVAL:
-			fprintf(CurrentClient, "4\t%d\n", pid);
-			break;
-		case ESRCH:
-			fprintf(CurrentClient, "3\t%d\n", pid);
-			break;
-		case EPERM:
-			fprintf(CurrentClient, "2\t%d\n", pid);
-			break;
-		default:
-			fprintf(CurrentClient, "1\t%d\n", pid);	/* unknown error */
-			break;
-		}
 
+	errno = kill((pid_t) pid, sig);
+	switch(errno)
+	{
+	case EINVAL:
+		fprintf(CurrentClient, "4\t%d\n", pid);
+		break;
+	case ESRCH:
+		fprintf(CurrentClient, "3\t%d\n", pid);
+		break;
+	case EPERM:
+		fprintf(CurrentClient, "2\t%d\n", pid);
+		break;
+	default:
+		fprintf(CurrentClient, "1\t%d\n", pid);	/* unknown error */
+		break;
 	}
-	else
-		fprintf(CurrentClient, "0\t%d\n", pid);
 }
 
 void
 setPriority(const char* cmd)
 {
-	int pid, prio;
+	int pid, prio, errno;
 
 	sscanf(cmd, "%*s %d %d", &pid, &prio);
-	if (setpriority(PRIO_PROCESS, pid, prio))
+	errno = setpriority(PRIO_PROCESS, pid, prio);
+	switch(errno)
 	{
-		switch(errno)
-		{
-		case EINVAL:
-			fprintf(CurrentClient, "4\n");
-			break;
-		case ESRCH:
-			fprintf(CurrentClient, "3\n");
-			break;
-		case EPERM:
-		case EACCES:
-			fprintf(CurrentClient, "2\n");
-			break;
-		default:
-			fprintf(CurrentClient, "1\n");	/* unknown error */
-			break;
-		}
+	case EINVAL:
+		fprintf(CurrentClient, "4\n");
+		break;
+	case ESRCH:
+		fprintf(CurrentClient, "3\n");
+		break;
+	case EPERM:
+	case EACCES:
+		fprintf(CurrentClient, "2\n");
+		break;
+	default:
+		fprintf(CurrentClient, "1\n");	/* unknown error */
+		break;
 	}
-	else
-		fprintf(CurrentClient, "0\n");
 }
