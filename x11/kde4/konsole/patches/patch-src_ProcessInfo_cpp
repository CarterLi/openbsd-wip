$OpenBSD$
--- src/ProcessInfo.cpp.orig	Mon Apr  2 13:28:40 2012
+++ src/ProcessInfo.cpp	Sat Jun 30 08:28:53 2012
@@ -54,12 +54,14 @@
 #include <kde_file.h>
 #endif
 
-#if defined(Q_OS_FREEBSD)
-#include <sys/sysctl.h> //krazy:exclude=includes
+#if defined(Q_OS_FREEBSD) || defined(Q_OS_OPENBSD)
 #include <sys/types.h>
+#include <sys/sysctl.h> //krazy:exclude=includes
 #include <sys/user.h>
 #include <sys/syslimits.h>
-#include <libutil.h>
+#    if defined(Q_OS_FREEBSD)
+#    include <libutil.h>
+#    endif
 #endif
 
 using namespace Konsole;
@@ -659,11 +661,11 @@ class LinuxProcessInfo : public UnixProcessInfo (priva
     }
 } ;
 
-#if defined(Q_OS_FREEBSD)
-class FreeBSDProcessInfo : public UnixProcessInfo
+#if defined(Q_OS_FREEBSD) || defined(Q_OS_OPENBSD)
+class BSDProcessInfo : public UnixProcessInfo
 {
 public:
-    FreeBSDProcessInfo(int pid, bool readEnvironment) :
+    BSDProcessInfo(int pid, bool readEnvironment) :
         UnixProcessInfo(pid, readEnvironment)
     {
     }
@@ -671,53 +673,101 @@ class FreeBSDProcessInfo : public UnixProcessInfo (pub
 private:
     virtual bool readProcInfo(int pid)
     {
-        int managementInfoBase[4];
-        size_t mibLength;
+        int managementInfoBase[6];
+        size_t mibLength, mibCnt;
         struct kinfo_proc* kInfoProc;
 
         managementInfoBase[0] = CTL_KERN;
         managementInfoBase[1] = KERN_PROC;
         managementInfoBase[2] = KERN_PROC_PID;
         managementInfoBase[3] = pid;
+#if defined(Q_OS_OPENBSD)
+        managementInfoBase[4] = sizeof(struct kinfo_proc);
+        managementInfoBase[5] = 1;
+        mibCnt = 6;
+#else
+        mibCnt = 4;
+#endif
 
-        if (sysctl(managementInfoBase, 4, NULL, &mibLength, NULL, 0) == -1)
+        if (sysctl(managementInfoBase, mibCnt, NULL, &mibLength, NULL, 0) == -1)
             return false;
 
         kInfoProc = new struct kinfo_proc [mibLength];
 
-        if (sysctl(managementInfoBase, 4, kInfoProc, &mibLength, NULL, 0) == -1)
+        if (sysctl(managementInfoBase, mibCnt, kInfoProc, &mibLength, NULL, 0) == -1)
         {
             delete [] kInfoProc;
             return false;
         }
 
-#if defined(__DragonFly__)
+#if defined(Q_OS_OPENBSD)
+        setName(kInfoProc->p_comm);
+        setPid(kInfoProc->p_pid);
+        setParentPid(kInfoProc->p_ppid);
+        setForegroundPid(kInfoProc->p_tpgid);
+        setUserId(kInfoProc->p_uid);
+        setUserName(kInfoProc->p_login);
+#elif defined(__DragonFly__)
         setName(kInfoProc->kp_comm);
         setPid(kInfoProc->kp_pid);
         setParentPid(kInfoProc->kp_ppid);
         setForegroundPid(kInfoProc->kp_pgid);
         setUserId(kInfoProc->kp_uid);
+        readUserName();
 #else
         setName(kInfoProc->ki_comm);
         setPid(kInfoProc->ki_pid);
         setParentPid(kInfoProc->ki_ppid);
         setForegroundPid(kInfoProc->ki_pgid);
         setUserId(kInfoProc->ki_uid);
+        readUserName();
 #endif
 
-        readUserName();
-
         delete [] kInfoProc;
         return true;
     }
 
     virtual bool readArguments(int pid)
     {
-        char args[ARG_MAX];
         int managementInfoBase[4];
-        size_t len;
+	size_t len;
 
+#if defined(Q_OS_OPENBSD)
         managementInfoBase[0] = CTL_KERN;
+        managementInfoBase[1] = KERN_PROC_ARGS;
+        managementInfoBase[2] = pid;
+        managementInfoBase[3] = KERN_PROC_ARGV;
+
+	void *buf = NULL;
+        int rc = -1;
+        len = 4096;
+        do
+        {
+            len *= 2;
+            void *nbuf = realloc(buf, len);
+            if (nbuf == NULL)
+                break;
+            buf = nbuf;
+            rc = sysctl(managementInfoBase, 4, buf, &len, NULL, 0);
+        } while (rc == -1 && errno == ENOMEM);
+
+        if (rc == -1)
+        {
+            free(buf);
+            return false;
+        }
+
+        for (const char **p = ((const char **)buf); *p != NULL; p++)
+        {
+            addArgument(QString(*p));
+        }
+
+        free(buf);
+#else
+        char args[ARG_MAX];
+        len = sizeof(args);
+
+        managementInfoBase[0] = CTL_KERN;
         managementInfoBase[1] = KERN_PROC;
         managementInfoBase[2] = KERN_PROC_PID;
         managementInfoBase[3] = pid;
@@ -732,30 +782,77 @@ class FreeBSDProcessInfo : public UnixProcessInfo (pub
         {
             addArgument(*it);
         }
+#endif
 
         return true;
     }
 
     virtual bool readEnvironment(int pid)
     {
+#if defined(Q_OS_OPENBSD)
+        int managementInfoBase[4];
+	size_t len;
+
+        managementInfoBase[0] = CTL_KERN;
+        managementInfoBase[1] = KERN_PROC_ARGS;
+        managementInfoBase[2] = pid;
+        managementInfoBase[3] = KERN_PROC_ENV;
+
+	void *buf = NULL;
+        int rc = -1;
+        len = 4096;
+        do
+        {
+            len *= 2;
+            void *nbuf = realloc(buf, len);
+            if (nbuf == NULL)
+                break;
+            buf = nbuf;
+            rc = sysctl(managementInfoBase, 4, buf, &len, NULL, 0);
+        } while (rc == -1 && errno == ENOMEM);
+
+        if (rc == -1)
+        {
+            free(buf);
+            return false;
+        }
+
+        for (char **p = ((char **)buf); *p != NULL; p++)
+        {
+            char *eqsign = strchr(*p, '=');
+            if (eqsign == NULL || eqsign[1] == '\0')
+                continue;
+            *eqsign = '\0';
+            QString name(*p);
+            QString value(eqsign + 1);
+            addEnvironmentBinding(name, value);
+        }
+
+        free(buf);
+        return true;
+#else
         // Not supported in FreeBSD?
         return false;
+#endif
     }
 
     virtual bool readCurrentDir(int pid)
     {
-#if defined(__DragonFly__)
+#if defined(__DragonFly__) || defined(Q_OS_OPENBSD)
         char buf[PATH_MAX];
-        int managementInfoBase[4];
+        int i, managementInfoBase[4];
         size_t len;
 
-        managementInfoBase[0] = CTL_KERN;
-        managementInfoBase[1] = KERN_PROC;
-        managementInfoBase[2] = KERN_PROC_CWD;
-        managementInfoBase[3] = pid;
+        i = 0;
+        managementInfoBase[i++] = CTL_KERN;
+#if defined(__DragonFly__)
+        managementInfoBase[i++] = KERN_PROC;
+#endif
+        managementInfoBase[i++] = KERN_PROC_CWD;
+        managementInfoBase[i++] = pid;
 
         len = sizeof(buf);
-        if (sysctl(managementInfoBase, 4, buf, &len, NULL, 0) == -1)
+        if (sysctl(managementInfoBase, i, buf, &len, NULL, 0) == -1)
             return false;
 
         setCurrentDir(buf);
@@ -1149,8 +1246,8 @@ ProcessInfo* ProcessInfo::newInstance(int pid,bool ena
     return new SolarisProcessInfo(pid,enableEnvironmentRead);
 #elif defined(Q_OS_MAC)
     return new MacProcessInfo(pid,enableEnvironmentRead);
-#elif defined(Q_OS_FREEBSD)
-    return new FreeBSDProcessInfo(pid,enableEnvironmentRead);
+#elif defined(Q_OS_FREEBSD) || defined(Q_OS_OPENBSD)
+    return new BSDProcessInfo(pid,enableEnvironmentRead);
 #else
     return new NullProcessInfo(pid,enableEnvironmentRead);
 #endif
