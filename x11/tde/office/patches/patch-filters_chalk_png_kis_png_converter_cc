$OpenBSD$
--- filters/chalk/png/kis_png_converter.cc.orig	Wed Jul 11 23:33:14 2012
+++ filters/chalk/png/kis_png_converter.cc	Wed Jul 11 23:43:18 2012
@@ -20,6 +20,7 @@
  // A big thank to Glenn Randers-Pehrson for it's wonderfull documentation of libpng available at http://www.libpng.org/pub/png/libpng-1.2.5-manual.html
 #include "kis_png_converter.h"
 
+#include <zlib.h>
 #include <stdio.h>
 
 #include <tqfile.h>
@@ -230,7 +231,7 @@ KisImageBuilder_Result KisPNGConverter::decode(const K
         number_of_passes = png_set_interlace_handling(png_ptr);
 
     KisProfile* profile = 0;
-    if(png_get_iCCP(png_ptr, info_ptr, &profile_name, &compression_type, &profile_data, &proflen))
+    if(png_get_iCCP(png_ptr, info_ptr, &profile_name, &compression_type, (png_byte **)&profile_data, &proflen))
     {
         TQByteArray profile_rawdata;
         // XXX: Hardcoded for icc type -- is that correct for us?
@@ -627,7 +628,7 @@ KisImageBuilder_Result KisPNGConverter::buildFile(cons
         } else { // Profile
             char* name = new char[(*it)->type().length()+1];
             strcpy(name, (*it)->type().ascii());
-            png_set_iCCP(png_ptr, info_ptr, name, PNG_COMPRESSION_TYPE_BASE, (char*)(*it)->annotation().data(), (*it) -> annotation() . size());
+            png_set_iCCP(png_ptr, info_ptr, name, PNG_COMPRESSION_TYPE_BASE, (const png_byte*)(*it)->annotation().data(), (*it) -> annotation() . size());
         }
         ++it;
     }
@@ -785,7 +786,7 @@ void KisPNGConverter::cancel()
 
 void KisPNGConverter::progress(png_structp png_ptr, png_uint_32 row_number, int pass)
 {
-    if(png_ptr == NULL || row_number > PNG_MAX_UINT || pass > 7) return;
+    if(png_ptr == NULL || row_number > PNG_UINT_31_MAX || pass > 7) return;
 //     setProgress(row_number);
 }
 
