$OpenBSD$

Index: Source/JavaScriptCore/heap/MachineStackMarker.cpp
--- Source/JavaScriptCore/heap/MachineStackMarker.cpp.orig
+++ Source/JavaScriptCore/heap/MachineStackMarker.cpp
@@ -49,6 +49,10 @@
 
 #elif OS(UNIX)
 
+#if OS(OPENBSD)
+#include<sys/param.h>
+#endif
+
 #include <sys/mman.h>
 #include <unistd.h>
 
@@ -89,7 +93,7 @@ static void pthreadSignalHandlerSuspendResume(int, sig
 #if CPU(PPC)
     thread->suspendedMachineContext = *userContext->uc_mcontext.uc_regs;
 #else
-    thread->suspendedMachineContext = userContext->uc_mcontext;
+    // XXX thread->suspendedMachineContext = userContext->uc_mcontext;
 #endif
 
     // Allow suspend caller to see that this thread is suspended.
@@ -566,6 +570,25 @@ void* MachineThreads::Thread::Registers::stackPointer(
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_edx);
+#elif CPU(X86_64)
+    //return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_rsp);
+#elif CPU(ARM)#
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.__gregs[_REG_R1]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_x[1]);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_regs[5]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_rsi);
+#else
+#error Unknown Architecture
+#endif
+
+
 #elif defined(__GLIBC__) && ENABLE(JIT)
 
 #if CPU(X86)
@@ -632,6 +655,7 @@ void* MachineThreads::Thread::Registers::framePointer(
 #error Unknown Architecture
 #endif
 
+
 #endif // __DARWIN_UNIX03
 
 // end OS(DARWIN)
@@ -665,6 +689,25 @@ void* MachineThreads::Thread::Registers::framePointer(
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_esp);
+#elif CPU(X86_64)
+    //return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_rsp);
+#elif CPU(ARM)#
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.__gregs[_REG_SP]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_sp);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_regs[29]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_rsp);
+#else
+#error Unknown Architecture
+#endif
+
+
 #elif defined(__GLIBC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
@@ -747,6 +790,25 @@ void* MachineThreads::Thread::Registers::instructionPo
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_ebp);
+#elif CPU(X86_64)
+    //return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_rbp);
+#elif CPU(ARM)#
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.__gregs[_REG_FP]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_x[29]);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_regs[30]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_rbp);
+#else
+#error Unknown Architecture
+#endif
+
+
 #elif defined(__GLIBC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
@@ -837,6 +899,25 @@ void* MachineThreads::Thread::Registers::llintPC() con
 #else
 #error Unknown Architecture
 #endif
+
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_eip);
+#elif CPU(X86_64)
+    //return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_rip);
+#elif CPU(ARM)#
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.__gregs[_REG_PC]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.sc_elr);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_pc);                                                                                                                  
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*&>((uintptr_t&) regs.machineContex.mc_rip);
+#else
+#error Unknown Architecture
+#endif
+
 
 #elif defined(__GLIBC__)
 
