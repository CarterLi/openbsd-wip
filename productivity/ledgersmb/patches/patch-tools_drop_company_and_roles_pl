--- /dev/null	Wed Aug 21 17:48:16 2013
+++ tools/drop_company_and_roles.pl	Wed Aug 21 17:07:34 2013
@@ -0,0 +1,303 @@
+#!/usr/bin/perl
+
+# Script can be used by automated scripts
+# or manually with options
+# defaults to interactive process.
+
+our $VERSION = 1.3.1;
+
+use warnings;
+use strict;
+
+use Encode;
+use DBI;
+use DBD::Pg qw(:pg_types);
+use Getopt::Long;
+my @company_roles;
+my $role;
+my $host              = '127.0.0.1';
+my $port              = '5432';
+my $postgres_username = 'postgres';
+my $postgres_password;
+my $postgres_db       = 'postgres';
+my $no_postgres_pass;
+my $company_name;
+my @other_roles;
+my $not_interactive;
+my $verbose;
+my $help;
+my $dbh;
+my $rolname;
+my $usage = qq{
+usage: $0 --company COMPANY --postgres_password PASS [options]
+Available options:
+ --not_interactive  Does not run interactively. Manual options or for
+                    scripts does not show possible values for roles to drop.
+ --company          The name of the database to be dropped. [*]
+ --postgres_user    postgres username. Defaults to [$postgres_username].
+ --postgres_pass    postgres user password.
+ --no_postgres_pass postgres password not used.
+ --postgres_db      postgres database name. Defaults to [$postgres_db].
+ --owner            The superuser owner of database. [optional]
+ --role             Additional roles to be dropped, such as 'admin'.
+ --host             The PostgreSQL host to connect to (see 'man psql'). [$host]
+ --port             The PostgreSQL port to connect to (see 'man psql'). [$port]
+ --verbose          Verbose.
+
+ * These arguments don't have a default, but are required
+Roles like 'lsmb_"company_name"__%' within the database are removed.
+};
+GetOptions(
+    'help|?|h'          => \$help,
+    'not_interactive|n' => \$not_interactive,
+    'host:s'                 => \$host,
+    'port:i'                 => \$port,
+    'company|c=s'            => \$company_name,
+    'owner|o:s'              => \@other_roles,
+    'role|r:s'               => \@other_roles,
+    'postgres_username|pu:s' => \$postgres_username,
+    'postgres_password|pp:s' => \$postgres_password,
+    'no_postgres_pass|nop'   => \$no_postgres_pass,
+    'postgres_db|pdb:s'      => \$postgres_db,
+    'verbose|v'              => \$verbose,
+);
+
+if ($help) {
+    print $usage;
+    exit;
+}
+
+if ($not_interactive) {
+unless ($company_name) {
+    print $usage;
+    print "\nmissing or empty --company option\n";
+    exit;
+}
+unless ( ($postgres_password) || ($no_postgres_pass) ) {
+    print $usage;
+    print "\nmissing or empty --postgres_password option\n";
+    exit;
+}
+
+if ($postgres_password) {
+    $dbh = DBI->connect( "DBI:Pg:dbname=$postgres_db;host=$host;port=$port",
+        $postgres_username, $postgres_password,
+        { 'AutoCommit' => 1, 'RaiseError' => 1, pg_enable_utf8 => 1 } );
+}
+else {
+    $dbh = DBI->connect( "DBI:Pg:dbname=$postgres_db;host=$host;port=$port",
+        $postgres_username, { 'AutoCommit' => 1, 'RaiseError' => 1, pg_enable_utf8 => 1 } );
+}
+
+if ($verbose) {
+    print qq{DROP DATABASE "$company_name";};
+}
+$dbh->do(qq{DROP DATABASE "$company_name";});
+
+$company_name .= '__';
+my $SQL
+    = "SELECT rolname FROM pg_roles WHERE rolname SIMILAR TO 'lsmb_$company_name%';";
+
+my $sth = $dbh->prepare($SQL);
+$sth->execute;
+while ( $role = $sth->fetchrow ) {
+    if ($verbose) {
+        print qq{$role};
+    }
+    push @company_roles, $role;
+}
+
+for my $role (@company_roles) {
+    if ($verbose) {
+        print qq{DROP ROLE "$role";};
+    }
+    $dbh->do(qq{DROP ROLE "$role";});
+}
+
+for my $role (@other_roles) {
+    if ($verbose) {
+        print qq{Other role to drop:\n};
+        print qq{DROP ROLE "$role";\n};
+    }
+    $dbh->do(qq{DROP ROLE "$role";});
+}
+
+}
+else {
+    interactive_setup();
+}
+
+sub interactive_setup {
+    print "Welcome to the interactive database and role drop utility.\n\n";
+    print "Name of company database to drop?  ";
+    chomp( $_ = <STDIN> );
+    if ($_) { $company_name = $_; }
+    unless ($company_name) {
+        print $usage;
+        print "\nmissing or empty --company option\n";
+        exit;
+    }
+    print "host? [$host]  ";
+    chomp( $_ = <STDIN> );
+    if ($_) { $host = $_; }
+    print "port? [$port]  ";
+    chomp( $_ = <STDIN> );
+    if ($_) { $port = $_; }
+    print "postgres username? [$postgres_username]  ";
+    chomp( $_ = <STDIN> );
+    if ($_) { $postgres_username = $_; }
+    print "Do you wish to use a $postgres_db password? [y|n]  ";
+    chomp ($_ = <STDIN>);
+    if ($_ =~ /Y|y|yes|Yes/) {
+        print "postgres password?  ";
+        chomp ($_ = <STDIN>);
+        if ($_) {$postgres_password = $_;}
+    } else {
+        $no_postgres_pass = 1;
+    }
+    unless ( ($postgres_password) || ($no_postgres_pass) ) {
+        print $usage;
+        print "\nmissing or empty --postgres_password option\n";
+        exit;
+    }
+
+    print "postgres database name? [$postgres_db]  ";
+    chomp( $_ = <STDIN> );
+    if ($_) { $postgres_db = $_; }
+        if ($postgres_password) {
+            $dbh = DBI->connect(
+                "DBI:Pg:dbname=$postgres_db;host=$host;port=$port",
+                $postgres_username,
+                $postgres_password,
+                { 'RaiseError' => 1, pg_enable_utf8 => 1 }
+            );
+        }
+        else {
+            $dbh
+                = DBI->connect(
+                "DBI:Pg:dbname=$postgres_db;host=$host;port=$port",
+                $postgres_username,
+                { 'RaiseError' => 1, pg_enable_utf8 => 1 } );
+        }
+
+    print "Do you wish to see available roles to drop? [y|n]  ";
+    chomp( $_ = <STDIN> );
+    if ( $_ =~ /Y|y|yes|Yes/ ) {
+        my $sth
+            = $dbh->prepare(
+            "SELECT rolname FROM pg_roles WHERE rolname NOT SIMILAR TO 'lsmb_$company_name%';"
+            );
+        my $num_rows = $sth->execute();
+        while ( ($rolname) = $sth->fetchrow ) {
+            print "\n$rolname";
+        }
+    }
+    print "\n\nRole to drop? You may add more than one after this entry
+ or type <Enter> to skip roles.\n\n";
+    do {
+        local $| = 1;
+        $_ = <STDIN>;
+        chomp $_;
+        if ($_) {
+            push( @other_roles, $_ );
+        }
+    } while ($_);
+
+    print "Verbose?\n";
+    chomp( $_ = <STDIN> );
+    if ( $_ =~ /Y|y|yes|Yes/ ) { $verbose = 1; }
+
+    if ($verbose) {
+        print "$company_name = $company_name\n";
+        print "$host = $host\n";
+        print "$port = $port\n";
+        print "$postgres_username = $postgres_username\n";
+        print "$postgres_password = $postgres_password\n";
+        print "$postgres_db = $postgres_db\n";
+        if (@other_roles) {
+            print "Roles to drop are:\n";
+            for my $i ( 0 .. $#other_roles ) {
+                print "Role = $other_roles[$i]\n";
+            }
+        }
+    }
+
+    print qq{DROP DATABASE "$company_name";\n};
+    $dbh->do(qq{DROP DATABASE "$company_name";});
+
+    $company_name .= '__';
+    if ($verbose) {
+        print
+        "SELECT rolname FROM pg_roles WHERE rolname SIMILAR TO 'lsmb_$company_name%';\n";
+    }
+    my $SQL
+        = "SELECT rolname FROM pg_roles WHERE rolname SIMILAR TO 'lsmb_$company_name%';";
+
+    my $sth = $dbh->prepare($SQL);
+    $sth->execute;
+    while ( $role = $sth->fetchrow ) {
+        if ($verbose) {
+            print "$role\n";
+        }
+        push @company_roles, $role;
+    }
+
+    for my $role (@company_roles) {
+        if ($verbose) {
+            print qq{DROP ROLE "$role";\n};
+        }
+        $dbh->do(qq{DROP ROLE "$role";});
+    }
+
+    for my $role (@other_roles) {
+        if ($verbose) {
+            print qq{Other role to drop:\n};
+            print qq{DROP ROLE "$role";\n};
+        }
+        $dbh->do(qq{DROP ROLE "$role";});
+    }
+    if ($verbose) {
+        print "Done!\n";
+    }
+}
+
+$dbh->disconnect();
+=pod
+
+=head1 NAME
+
+drop_company_and_roles.pl
+
+=head1 VERSION
+
+This documentation refers to drop_company_and_roles.pl version 1.2.2
+
+=head1 BUGS AND LIMITATIONS
+
+Please report problems to Chris Bennett (chris@bennettconstruction.us)
+
+Patches are welcome.
+
+=head1 AUTHOR
+
+Chris Bennett  (chris@bennettconstruction.us)
+
+=head1 LICENSE AND COPYRIGHT
+
+Copyright (c) 2013 Chris Bennett (chris@bennettconstruction.us).
+
+Permission to use, copy, modify, and distribute this software for any
+purpose with or without fee is hereby granted, provided that the above
+copyright notice and this permission notice appear in all copies.
+
+THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+=cut
+
+1;
