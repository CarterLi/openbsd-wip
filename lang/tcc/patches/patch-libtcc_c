$OpenBSD$

OpenBSD has no crtbeginT.o; expects to use crtbegin.o in such situations.
Process shared library major and minor version numbers.

Index: libtcc.c
--- libtcc.c.orig
+++ libtcc.c
@@ -906,7 +906,7 @@ LIBTCCAPI int tcc_set_output_type(TCCState *s, int out
             tcc_add_crt(s, "crt0.o");
         tcc_add_crt(s, "crti.o");
 #endif
-        if (s->static_link)
+        if (s->static_link && !TARGETOS_OpenBSD)
             tcc_add_crt(s, "crtbeginT.o");
         else if (output_type == TCC_OUTPUT_DLL)
             tcc_add_crt(s, "crtbeginS.o");
@@ -1093,6 +1093,77 @@ ST_FUNC int tcc_add_crt(TCCState *s1, const char *file
 }
 #endif
 
+/* OpenBSD only has suffixed .so files; e.g., libc.so.96.0 */
+/* So we must process that */
+#if defined TARGETOS_OpenBSD
+#include <dirent.h>
+ST_FUNC char *tcc_openbsd_library_soversion(TCCState *s, const char *libraryname)
+{
+    DIR *dirp;
+    struct dirent *dp;
+    const char *e;
+    char **libpaths, *t, *u, *v;
+    char soname[1024];
+    int i;
+    long long maj, min, tmaj, tmin;
+    static char soversion[1024];
+
+    snprintf(soname, sizeof(soname), "lib%s.so", libraryname);
+
+    libpaths = s->library_paths;
+    while (*libpaths) {
+        if ((dirp = opendir(*libpaths++)) == NULL)
+            continue;
+
+        maj = -1;
+        min = -1;
+
+        while ((dp = readdir(dirp)) != NULL) {
+            if (!strncmp(dp->d_name, soname, strlen(soname))) {
+                t = tcc_strdup(dp->d_name);
+                u = strrchr(t, '.');
+                *u = '\0';
+
+                tmin = strtonum(u + 1, 0, LLONG_MAX, &e);
+                if (e != NULL) {
+                    tcc_free(t);
+                    t = NULL;
+                    continue;
+                }
+
+                v = strrchr(t, '.');
+                tmaj = strtonum(v + 1, 0, LLONG_MAX, &e);
+                if (e != NULL) {
+                    tcc_free(t);
+                    t = NULL;
+                    continue;
+                }
+
+                tcc_free(t);
+                t = NULL;
+
+                if (maj == tmaj) {
+                    if (min < tmin)
+                        min = tmin;
+                } else if (maj < tmaj) {
+                    maj = tmaj;
+                    min = tmin;
+                }
+            }
+        }
+        closedir(dirp);
+
+        if (maj == -1 || min == -1)
+            continue;
+
+	snprintf(soversion, sizeof(soversion), "%s/%s.%lld.%lld", *--libpaths, soname, maj, min);
+        ++libpaths;
+    }
+
+    return soversion;
+}
+#endif
+
 /* the library name is the same as the argument of the '-l' option */
 LIBTCCAPI int tcc_add_library(TCCState *s, const char *libraryname)
 {
@@ -1101,6 +1172,9 @@ LIBTCCAPI int tcc_add_library(TCCState *s, const char 
     const char **pp = s->static_link ? libs + 4 : libs;
 #elif defined TCC_TARGET_MACHO
     const char *libs[] = { "%s/lib%s.dylib", "%s/lib%s.a", NULL };
+    const char **pp = s->static_link ? libs + 1 : libs;
+#elif defined TARGETOS_OpenBSD
+    const char *libs[] = { tcc_openbsd_library_soversion(s, libraryname), "%s/lib%s.a", NULL };
     const char **pp = s->static_link ? libs + 1 : libs;
 #else
     const char *libs[] = { "%s/lib%s.so", "%s/lib%s.a", NULL };
